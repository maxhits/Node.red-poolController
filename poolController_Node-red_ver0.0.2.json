[
    {
        "id": "eec921f299f35505",
        "type": "tab",
        "label": "Main Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2242e2f628b1ea7d",
        "type": "tab",
        "label": "Waterfall Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d2c68e9ea49e3bd9",
        "type": "tab",
        "label": "Cleaner Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "920459fe5b6c0979",
        "type": "tab",
        "label": "Heater",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4a0a70f997c94c8e",
        "type": "tab",
        "label": "Lighting Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "13125f291573f180",
        "type": "tab",
        "label": "Freeze Protection",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6b22b498c6292ac6",
        "type": "tab",
        "label": "Schedule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d6e03a16f09c42f2",
        "type": "tab",
        "label": "Remote IO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9cdce304f6571f02",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "poolController-Node-red",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "MM/DD/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9d78e22564de8eb5",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3c2b3f3943ddef7b",
        "type": "ui_tab",
        "name": "Light Control",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d747055b993129c6",
        "type": "ui_tab",
        "name": "Runtime Schedule",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8a8b7e8d86ab12af",
        "type": "ui_tab",
        "name": "Set Points",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "25c6fe1eed10f361",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "15",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "100"
    },
    {
        "id": "eafeda6c925d16dc",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "15",
        "bin": "bin",
        "out": "interbyte",
        "addchar": "",
        "responsetimeout": "100"
    },
    {
        "id": "0c38332020600541",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7bcfc95d3d1f86ef",
        "type": "ui_group",
        "name": "Main Pump",
        "tab": "0c38332020600541",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4ccf2a1e17044380",
        "type": "ui_tab",
        "name": "Light Control",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7910133684fc4d5b",
        "type": "ui_group",
        "name": "Waterfall Pump",
        "tab": "0c38332020600541",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a8e7f1a1d9bdecb2",
        "type": "ui_group",
        "name": "Aux Equipment",
        "tab": "0c38332020600541",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "877ace883d8c55f8",
        "type": "ui_group",
        "name": "Light Control Panel",
        "tab": "4ccf2a1e17044380",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ef9d38cd02b78b73",
        "type": "ui_tab",
        "name": "Runtime Schedule",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9920c1160810f169",
        "type": "ui_group",
        "name": "Main Pump",
        "tab": "ef9d38cd02b78b73",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "05c18f816c8c8a67",
        "type": "ui_group",
        "name": "Waterfall Pump",
        "tab": "ef9d38cd02b78b73",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9e10244780a591c3",
        "type": "ui_group",
        "name": "Cleaner Pump",
        "tab": "ef9d38cd02b78b73",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "376bc5cc811a1666",
        "type": "ui_tab",
        "name": "Set Points",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3c239c21fd265beb",
        "type": "ui_group",
        "name": "Temp Setpoints",
        "tab": "376bc5cc811a1666",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ef3af84e97574c80",
        "type": "ui_group",
        "name": "Pump Setpoints",
        "tab": "376bc5cc811a1666",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "61d4b92bb1186e5e",
        "type": "ui_group",
        "name": "Ramp Up Setpoints",
        "tab": "376bc5cc811a1666",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d0f277a26b640484",
        "type": "ui_group",
        "name": "Temp Trends",
        "tab": "0c38332020600541",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b1476d4d493c883a",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Run Pump",
        "func": "// Pump Run node creates the hex command for running\n// the pump before sending it to the pump.  The command\n// must be sent in intervals to the pump not to exceed \n// 1 minute or the pump will stop running.  \n\n// 15 address\n// 41 function\n// 20 ack\n// 518C CRC16 modbus\n\nif (msg.payload === 1) {\n    msg.payload = Buffer.from(\"154120518C\", \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 600,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "ab0565353a45f0a1",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Stop Pump",
        "func": "// Pump Stop node creates the hex command for stopping\n// the pump before sending it to the pump\n// 15 address\n// 42 function\n// 20 ack\n// 517C CRC16 modbus\n\nif (msg.payload === 0) {\n    await delay(500);\n    return [{ payload:Buffer.from(\"154220517C\",\"hex\")}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "551b272b5a604b1f",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Variables",
        "func": "if (msg.topic === \"MainPumpSP\") {\n    global.set('mainpumpsd', msg.payload);\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\nif (msg.topic === \"PrimePumpSP\") {\n    global.set('primepumpsd', msg.payload);\n}\nif (msg.topic === \"MainPumpHeaterSP\") {\n    global.set('heaterpumpsd', msg.payload);\n}\nif (msg.topic === \"MainPumpCleanerSP\") {\n    global.set('cleanerpumpsd', msg.payload);\n}\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 740,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "73bca259cb8c16b9",
        "type": "tcp request",
        "z": "eec921f299f35505",
        "name": "",
        "server": "127.0.0.1",
        "port": "23",
        "out": "sit",
        "ret": "buffer",
        "splitc": " ",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1140,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "33add2c41c2970b7",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Status",
        "func": "// Pump status node creates the hex command for pump run \n// status before sending it to the pump\n// 15 address\n// 43 function\n// 20 ack\n// 50EC CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump status\n    msg.payload=Buffer.from(\"15432050EC\",\"hex\");\n    await delay(600);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 280,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "49e2f19cb910415c",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Status",
        "func": "var msg2 = 0;\n\nif(msg.payload[1] === 67 && msg.payload[0] === 21) {\n    if(msg.payload[3] === 0) { msg.payload=0 }\n    if(msg.payload[3] === 11) { msg.payload=1}\n    if(msg.payload[3] === 32) { msg.payload=2}\n\n    if(msg.payload === 1){\n        msg2 = 1;\n    }\n    else {\n        msg2 =0;\n    }\n    return [msg, {'payload':msg2}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 500,
        "wires": [
            [
                "2927fbe8a0310aec"
            ],
            [
                "26bafbc36389233a"
            ]
        ]
    },
    {
        "id": "2718e1e0c9e7f20c",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Speed",
        "func": "// Pump speed node creates the hex command for pump RPM\n// status before sending it to the pump\n// 15 address\n// 45 function\n// 20 ack\n// 00 Page\n// 00 register address\n// 3D05 CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump speed\n    msg.payload=Buffer.from(\"15452000003D05\",\"hex\");\n    await delay(700);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 320,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "f4a719a49190f362",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Speed",
        "func": "var buff = Buffer.from(msg.payload);\n\nif (msg.payload[3] === 0 && msg.payload[4] === 0 && msg.payload[0] === 21 && buff.length === 9) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 540,
        "wires": [
            [
                "fc8313a1307aa3d6"
            ]
        ]
    },
    {
        "id": "496789266ceaeeab",
        "type": "inject",
        "z": "eec921f299f35505",
        "name": "Poll Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 890,
        "y": 220,
        "wires": [
            [
                "33add2c41c2970b7",
                "2718e1e0c9e7f20c",
                "43d36b99e31ae928"
            ]
        ]
    },
    {
        "id": "200db0e3ae1fcc66",
        "type": "trigger",
        "z": "eec921f299f35505",
        "name": "Keep Alive Pulse",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 600,
        "wires": [
            [
                "b1476d4d493c883a"
            ]
        ]
    },
    {
        "id": "bd40abea2ab33676",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "HOA_Convert",
        "func": "// HOA_Convert takes the output from the HOA multi-switch\n// and adds payload and commands the eztimer node can use.\n\nflow.set(\"mainpumphoa\", msg.payload, \"storeInFile\");\n\nif(msg.payload==='hand'){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload==='auto'){\n    msg.payload = {'suspended':false};\n    msg.payload = { 'action': 'off' };\n    return msg;\n}\nelse{\n    msg.payload = {'suspended':false};\n    msg.payload = {'action':'off'};\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "1484636c17e0f109"
            ]
        ]
    },
    {
        "id": "9782788f893f3ff0",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload, 'hex');\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = msg.payload + crcValue;\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 750,
        "y": 780,
        "wires": [
            [
                "551b272b5a604b1f"
            ]
        ]
    },
    {
        "id": "14122a40fc60c7d3",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nflow.set(\"mainpumpsp\", msg.payload, \"storeInFile\");\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 820,
        "wires": [
            [
                "9782788f893f3ff0"
            ]
        ]
    },
    {
        "id": "573da8a7d97c15c8",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nflow.set(\"primepumpsp\", msg.payload, \"storeInFile\");\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 920,
        "wires": [
            [
                "10e9a3a625c35cd0"
            ]
        ]
    },
    {
        "id": "9bfc70496b295092",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Watts",
        "func": "var buff = Buffer.from(msg.payload);\n\nif(msg.payload[4] === 1 && msg.payload[0] === 21 && buff.length === 9) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 580,
        "wires": [
            [
                "03509564cb10991b"
            ]
        ]
    },
    {
        "id": "43d36b99e31ae928",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Amp",
        "func": "// Pump Amp node creates the hex command for pump Amp\n// status before sending it to the pump\n// 15 address\n// 45 function\n// 20 ack\n// 00 Page\n// 01 register address\n// FCC5 CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump amp's\n    msg.payload=Buffer.from(\"1545200001FCC5\",\"hex\");\n    await delay(800);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 360,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "df2407ff92c84021",
        "type": "delay",
        "z": "eec921f299f35505",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 900,
        "y": 440,
        "wires": [
            [
                "14f9cb2807fdc98e"
            ]
        ]
    },
    {
        "id": "653cb24a711109d8",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Prime Demand",
        "func": "// Set Pump Prime Demand node creates the hex command \n// for setting pump rpm to prime rpm to starting pump\n// global variables 'primepumpsd' holds the hex command\n// for demand set prime speed\n\nif (msg.payload === 1) {\n    // push prime speed to pump\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(500);\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 440,
        "wires": [
            [
                "df2407ff92c84021"
            ],
            [
                "323677db99a0022e"
            ]
        ]
    },
    {
        "id": "fbc8f1231527c978",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nflow.set(\"heaterpumpsp\", msg.payload, \"storeInFile\");\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1020,
        "wires": [
            [
                "fb63772e308f8c51"
            ]
        ]
    },
    {
        "id": "323677db99a0022e",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Prime Demand bk",
        "func": "//  Repeats to inusre command makes it to pump.  \n\n// Set Pump Prime Demand node creates the hex command\n// for setting pump rpm to prime rpm to starting pump\n// global variables 'primepumpsd' holds the hex command\n// for demand set prime speed\n\nif (msg.payload === 1) {\n    // push prime speed to pump\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(2000);\n    return [msg, {'payload':1}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 480,
        "wires": [
            [
                "df2407ff92c84021"
            ],
            [
                "8c4257c0485be3eb"
            ]
        ]
    },
    {
        "id": "8c4257c0485be3eb",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Speed Demand",
        "func": "// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 180 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 1) {\n    // push main pump run speed\n    await delay(180000);\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "df2407ff92c84021"
            ],
            [
                "7d584f5c6c0f4568"
            ]
        ]
    },
    {
        "id": "7d584f5c6c0f4568",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Speed Demand bk",
        "func": "// Repeats command to insure delivery\n\n// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 120 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(2000);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 560,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "26bafbc36389233a",
        "type": "rbe",
        "z": "eec921f299f35505",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1890,
        "y": 500,
        "wires": [
            [
                "e8e5f666e8b91f3a",
                "753919b6ec91e67c"
            ]
        ]
    },
    {
        "id": "5ef145ec8dcb0b8a",
        "type": "link in",
        "z": "eec921f299f35505",
        "name": "link in Freeze",
        "links": [
            "919febfe094f2632"
        ],
        "x": 205,
        "y": 300,
        "wires": [
            [
                "1484636c17e0f109"
            ]
        ]
    },
    {
        "id": "dff85099e89fce57",
        "type": "link in",
        "z": "eec921f299f35505",
        "name": "link in Schedule Main",
        "links": [
            "7cce2edea9cb0127",
            "eda800d7f3e0a0c5",
            "17cb870608287ede"
        ],
        "x": 205,
        "y": 260,
        "wires": [
            [
                "1484636c17e0f109"
            ]
        ]
    },
    {
        "id": "6ccd7a679e3a2ecc",
        "type": "comment",
        "z": "eec921f299f35505",
        "name": "Pump #1 control flow",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "9fd0a25a9d1cac96",
        "type": "comment",
        "z": "eec921f299f35505",
        "name": "tcp out can be replaced with rtu out if using attached /dev/tty",
        "info": "",
        "x": 1240,
        "y": 400,
        "wires": []
    },
    {
        "id": "b7fea43de9ee4625",
        "type": "comment",
        "z": "eec921f299f35505",
        "name": "Interface to adjust pump speeds, converts number into hex, adds pump specific commands and CRC16",
        "info": "",
        "x": 370,
        "y": 700,
        "wires": []
    },
    {
        "id": "79c021212202778b",
        "type": "trigger",
        "z": "eec921f299f35505",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "num",
        "op2type": "num",
        "duration": "12",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "22e55ed774226f7a"
            ]
        ]
    },
    {
        "id": "22e55ed774226f7a",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "HOA Reset",
        "func": "if(msg.payload===1){\n    msg.payload = 'auto';\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            [
                "fbdd1ffcffc672ed"
            ]
        ]
    },
    {
        "id": "da0f40147af750e6",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Delay Shutoff Timer",
        "func": "if (msg.payload === 'hand') {\n    msg.payload = 1;\n    return msg;\n}\nelse if (msg.payload === 'auto') {\n    msg.payload = 0;\n    return msg;\n}\nelse {\n    msg.payload = 0;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 140,
        "wires": [
            [
                "79c021212202778b"
            ]
        ]
    },
    {
        "id": "567bde02a662d450",
        "type": "comment",
        "z": "eec921f299f35505",
        "name": "Pump #1 control flow, stops if left in hand for more than 12 hours",
        "info": "",
        "x": 530,
        "y": 100,
        "wires": []
    },
    {
        "id": "70b8d4b9e7e12cc6",
        "type": "link in",
        "z": "eec921f299f35505",
        "name": "link in Heater",
        "links": [
            "3dae6c09899874eb"
        ],
        "x": 1005,
        "y": 560,
        "wires": [
            [
                "14f9cb2807fdc98e"
            ]
        ]
    },
    {
        "id": "78f7e222231288ee",
        "type": "comment",
        "z": "eec921f299f35505",
        "name": "Heater Flow Injection",
        "info": "",
        "x": 920,
        "y": 520,
        "wires": []
    },
    {
        "id": "c0e5d218f54a90a3",
        "type": "delay",
        "z": "eec921f299f35505",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1380,
        "y": 440,
        "wires": [
            [
                "b1a8b9f952ad89a4"
            ]
        ]
    },
    {
        "id": "b1a8b9f952ad89a4",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Strip CRC from Msg",
        "func": "var recMsg = msg.payload.slice(0, msg.payload.length - 2).toString('hex');\nvar compareMsg = msg.payload.toString('hex').toUpperCase();\n\nmsg.payload = {\n    'lessCRC': recMsg.toString('hex'),\n    'compare': compareMsg.toString('hex').toUpperCase(), \n    'original': msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 500,
        "wires": [
            [
                "807cc0cc3733a9d7"
            ]
        ]
    },
    {
        "id": "807cc0cc3733a9d7",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload.lessCRC, 'hex');\n\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = {\n    'msgCal': msg.payload.lessCRC + crcValue,\n    'compare': msg.payload.compare,\n    'original': msg.payload.original\n};\n\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 1430,
        "y": 540,
        "wires": [
            [
                "4b618ce08d54b537"
            ]
        ]
    },
    {
        "id": "4b618ce08d54b537",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Check Original CRC vs Cal CRC",
        "func": "var goodMsg = msg.payload.original;\n\nif ((msg.payload.compare).toUpperCase() === (msg.payload.msgCal).toUpperCase()){\n    return { 'payload': goodMsg};\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 580,
        "wires": [
            [
                "49e2f19cb910415c",
                "f4a719a49190f362",
                "9bfc70496b295092"
            ]
        ]
    },
    {
        "id": "7ffed07792ea384f",
        "type": "ui_numeric",
        "z": "eec921f299f35505",
        "name": "",
        "label": "Main Pump Speed",
        "tooltip": "",
        "group": "ef3af84e97574c80",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "MainPumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 430,
        "y": 820,
        "wires": [
            [
                "14122a40fc60c7d3",
                "80352435c1688ede"
            ]
        ]
    },
    {
        "id": "bf605c77f42e33d8",
        "type": "ui_numeric",
        "z": "eec921f299f35505",
        "name": "",
        "label": "Prime Pump Speed",
        "tooltip": "",
        "group": "ef3af84e97574c80",
        "order": 7,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "PrimePumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "2500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 430,
        "y": 920,
        "wires": [
            [
                "573da8a7d97c15c8",
                "6ecd92d4e80384fe"
            ]
        ]
    },
    {
        "id": "045724b12257d2e9",
        "type": "ui_numeric",
        "z": "eec921f299f35505",
        "name": "",
        "label": "Main Pump Heater Speed",
        "tooltip": "",
        "group": "61d4b92bb1186e5e",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "MainPumpHeaterSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "fbc8f1231527c978",
                "8c39f1fc41509a6d"
            ]
        ]
    },
    {
        "id": "557db108d3b0abaa",
        "type": "ui_text",
        "z": "eec921f299f35505",
        "group": "7bcfc95d3d1f86ef",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Power (watts):",
        "format": "{{msg.payload[0]}}",
        "layout": "row-spread",
        "className": "wattMPTxt",
        "x": 2100,
        "y": 580,
        "wires": []
    },
    {
        "id": "43211d4ac3eb7fc8",
        "type": "ui_gauge",
        "z": "eec921f299f35505",
        "name": "",
        "group": "7bcfc95d3d1f86ef",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Main Pump Speed",
        "label": "RPM",
        "format": "{{value}}",
        "min": 0,
        "max": "3600",
        "colors": [
            "#ca3838",
            "#ffff00",
            "#00b500"
        ],
        "seg1": "600",
        "seg2": "1800",
        "diff": false,
        "className": "",
        "x": 2110,
        "y": 540,
        "wires": []
    },
    {
        "id": "0a54546eb83c0d63",
        "type": "ui_template",
        "z": "eec921f299f35505",
        "group": "7bcfc95d3d1f86ef",
        "name": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>\n\n<style>\n    .wattMPTxt p {\n    font-size:150%;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2080,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "14f9cb2807fdc98e",
        "type": "serial request",
        "z": "eec921f299f35505",
        "name": "Main_Pump",
        "serial": "25c6fe1eed10f361",
        "x": 1130,
        "y": 440,
        "wires": [
            [
                "c0e5d218f54a90a3"
            ]
        ]
    },
    {
        "id": "753919b6ec91e67c",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Ozone Start Function Relay 1",
        "func": "if(msg.payload === 1){\n    msg.payload = \"gpioset 1 86=1\";\n} else{\n    msg.payload = \"gpioset 1 86=0\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 440,
        "wires": [
            [
                "72aa0989631b9ac9"
            ]
        ]
    },
    {
        "id": "72aa0989631b9ac9",
        "type": "exec",
        "z": "eec921f299f35505",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "GPIO Pin 35 Relay 1",
        "x": 2100,
        "y": 380,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "10e9a3a625c35cd0",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload, 'hex');\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = msg.payload + crcValue;\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 750,
        "y": 880,
        "wires": [
            [
                "551b272b5a604b1f"
            ]
        ]
    },
    {
        "id": "fb63772e308f8c51",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload, 'hex');\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = msg.payload + crcValue;\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 750,
        "y": 980,
        "wires": [
            [
                "551b272b5a604b1f"
            ]
        ]
    },
    {
        "id": "44bbc784f6576661",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nflow.set(\"cleanerpumpsp\", msg.payload, \"storeInFile\");\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1120,
        "wires": [
            [
                "73fafc416da368dc"
            ]
        ]
    },
    {
        "id": "55ebd709c29f3e01",
        "type": "ui_numeric",
        "z": "eec921f299f35505",
        "name": "",
        "label": "Main Pump Cleaner Speed",
        "tooltip": "",
        "group": "61d4b92bb1186e5e",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "MainPumpCleanerSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 460,
        "y": 1120,
        "wires": [
            [
                "44bbc784f6576661",
                "dcc92c9640ddfb93"
            ]
        ]
    },
    {
        "id": "73fafc416da368dc",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload, 'hex');\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = msg.payload + crcValue;\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 750,
        "y": 1080,
        "wires": [
            [
                "551b272b5a604b1f"
            ]
        ]
    },
    {
        "id": "f3ee13354db270ee",
        "type": "link in",
        "z": "eec921f299f35505",
        "name": "link in cleaner",
        "links": [
            "4110341e8189634f"
        ],
        "x": 1015,
        "y": 660,
        "wires": [
            [
                "14f9cb2807fdc98e"
            ]
        ]
    },
    {
        "id": "5b9dafe638da0299",
        "type": "comment",
        "z": "eec921f299f35505",
        "name": "Cleaner Speed Ramp Up",
        "info": "",
        "x": 910,
        "y": 620,
        "wires": []
    },
    {
        "id": "e0f3d0049be7d601",
        "type": "inject",
        "z": "eec921f299f35505",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "69a70ab10ae15ece",
                "58125fd03621f815",
                "c066865df0526dcc",
                "32f02d58c982a238"
            ]
        ]
    },
    {
        "id": "69a70ab10ae15ece",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Load Stored Main Pump Speed",
        "func": "msg.payload = flow.get(\"mainpumpsp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 820,
        "wires": [
            [
                "7ffed07792ea384f"
            ]
        ]
    },
    {
        "id": "58125fd03621f815",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Load Stored Prime Pump Speed",
        "func": "msg.payload = flow.get(\"primepumpsp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 920,
        "wires": [
            [
                "bf605c77f42e33d8"
            ]
        ]
    },
    {
        "id": "c066865df0526dcc",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Load Stored Main Heater Speed",
        "func": "msg.payload = flow.get(\"heaterpumpsp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1020,
        "wires": [
            [
                "045724b12257d2e9"
            ]
        ]
    },
    {
        "id": "32f02d58c982a238",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Load Stored Main Cleaner Speed",
        "func": "msg.payload = flow.get(\"cleanerpumpsp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "55ebd709c29f3e01"
            ]
        ]
    },
    {
        "id": "d98afef3853e5e8e",
        "type": "inject",
        "z": "eec921f299f35505",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "d8055d69c83ccfad"
            ]
        ]
    },
    {
        "id": "d8055d69c83ccfad",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Load Stored HOA",
        "func": "msg.payload = flow.get(\"mainpumphoa\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 140,
        "wires": [
            [
                "fbdd1ffcffc672ed"
            ]
        ]
    },
    {
        "id": "a03d416780f333a9",
        "type": "comment",
        "z": "eec921f299f35505",
        "name": "GPIO can be replaced with Modbus write or get function to control remote I/O",
        "info": "",
        "x": 1910,
        "y": 320,
        "wires": []
    },
    {
        "id": "fbdd1ffcffc672ed",
        "type": "ui_multistate_switch",
        "z": "eec921f299f35505",
        "name": "",
        "group": "7bcfc95d3d1f86ef",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "HOA Main Pump",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Auto",
                "value": "auto",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Hand",
                "value": "hand",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 390,
        "y": 280,
        "wires": [
            [
                "bd40abea2ab33676",
                "da0f40147af750e6"
            ]
        ]
    },
    {
        "id": "1484636c17e0f109",
        "type": "eztimer",
        "z": "eec921f299f35505",
        "name": "Run Main Pool Pump",
        "debug": false,
        "autoname": "02:00 - 14:00",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "02:00",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "num",
        "onvalue": 1,
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": false,
        "offtype": "2",
        "offtimesun": "dusk",
        "offtimetod": "14:00",
        "offduration": "00:01:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "num",
        "offvalue": 0,
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": false,
        "resend": false,
        "resendInterval": "0s",
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 140,
        "y": 400,
        "wires": [
            [
                "ab0565353a45f0a1",
                "200db0e3ae1fcc66",
                "653cb24a711109d8"
            ]
        ]
    },
    {
        "id": "80352435c1688ede",
        "type": "ui_digital_display",
        "z": "eec921f299f35505",
        "name": "Main Pump RPM Set",
        "group": "ef3af84e97574c80",
        "order": 2,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 440,
        "y": 780,
        "wires": []
    },
    {
        "id": "6ecd92d4e80384fe",
        "type": "ui_digital_display",
        "z": "eec921f299f35505",
        "name": "Prime RPM Set",
        "group": "ef3af84e97574c80",
        "order": 8,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 420,
        "y": 880,
        "wires": []
    },
    {
        "id": "8c39f1fc41509a6d",
        "type": "ui_digital_display",
        "z": "eec921f299f35505",
        "name": "Main Pump Heater RPM Set",
        "group": "61d4b92bb1186e5e",
        "order": 2,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 460,
        "y": 980,
        "wires": []
    },
    {
        "id": "dcc92c9640ddfb93",
        "type": "ui_digital_display",
        "z": "eec921f299f35505",
        "name": "Main Pump Cleaner RPM Set",
        "group": "61d4b92bb1186e5e",
        "order": 4,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 460,
        "y": 1080,
        "wires": []
    },
    {
        "id": "2927fbe8a0310aec",
        "type": "ui_led",
        "z": "eec921f299f35505",
        "order": 2,
        "group": "7bcfc95d3d1f86ef",
        "width": 0,
        "height": 0,
        "label": "Main Pump Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ffff00",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 1750,
        "y": 440,
        "wires": []
    },
    {
        "id": "e8e5f666e8b91f3a",
        "type": "ui_led",
        "z": "eec921f299f35505",
        "order": 3,
        "group": "a8e7f1a1d9bdecb2",
        "width": 0,
        "height": 0,
        "label": "O3 Generator Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 2070,
        "y": 500,
        "wires": []
    },
    {
        "id": "fc8313a1307aa3d6",
        "type": "buffer-parser",
        "z": "eec921f299f35505",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16le",
                "name": "RPM",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "/4",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1910,
        "y": 540,
        "wires": [
            [
                "43211d4ac3eb7fc8"
            ]
        ]
    },
    {
        "id": "03509564cb10991b",
        "type": "buffer-parser",
        "z": "eec921f299f35505",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16le",
                "name": "Watts",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "*0.240",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1910,
        "y": 580,
        "wires": [
            [
                "557db108d3b0abaa"
            ]
        ]
    },
    {
        "id": "3ab6c971f06f442d",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload, 'hex');\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = msg.payload + crcValue;\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 770,
        "y": 800,
        "wires": [
            [
                "73c78aa373f47825"
            ]
        ]
    },
    {
        "id": "6d2bc6d569285dc4",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nflow.set(\"wfpumpsp\", msg.payload, \"storeInFile\");\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 840,
        "wires": [
            [
                "3ab6c971f06f442d"
            ]
        ]
    },
    {
        "id": "aa3f020438125ffe",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Run Pump",
        "func": "if (msg.payload === 1) {\n    // run pump command\n    msg.payload = Buffer.from(\"154120518C\", \"hex\");\n    await delay(500);\n    return msg;\n}\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "c706727fc5e07d59",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Stop Pump",
        "func": "if (msg.payload === 0) {\n    await delay(500);\n    return [{ payload:Buffer.from(\"154220517C\",\"hex\")}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "dca8bf402e9e9a2e",
        "type": "tcp request",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "server": "127.0.0.1",
        "port": "23",
        "out": "sit",
        "ret": "buffer",
        "splitc": " ",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1100,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b1350cfc78c50eee",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Status",
        "func": "// Pump status node creates the hex command for pump run\n// status before sending it to the pump\n// 15 address\n// 43 function\n// 20 ack\n// 50EC CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump status\n    msg.payload=Buffer.from(\"15432050EC\",\"hex\");\n    await delay(600);\n    return msg;\n}\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 240,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "f28f7690adbe26bd",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Status",
        "func": "var msg2 = 0;\n\nif (msg.payload[1] === 67 && msg.payload[0] === 21) {\n    if (msg.payload[3] === 0) { msg.payload = 0 }\n    if (msg.payload[3] === 11) { msg.payload = 1 }\n    if (msg.payload[3] === 32) { msg.payload = 2 }\n\n    if (msg.payload === 1) {\n        msg2 = 1;\n    }\n    else {\n        msg2 = 0;\n    }\n    return [msg, { 'payload': msg2 }];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 440,
        "wires": [
            [
                "d265227f7ce05653"
            ],
            []
        ]
    },
    {
        "id": "063ad6f1a3fbc839",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Speed",
        "func": "// Pump speed node creates the hex command for pump RPM\n// status before sending it to the pump\n// 15 address\n// 45 function\n// 20 ack\n// 00 Page\n// 00 register address\n// 3D05 CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump rpm\n    msg.payload=Buffer.from(\"15452000003D05\",\"hex\");\n    await delay(700);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "41575a147acbb583",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Speed",
        "func": "var buff = Buffer.from(msg.payload);\n\nif (msg.payload[3] === 0 && msg.payload[4] === 0 && msg.payload[0] === 21 && buff.length === 9) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 480,
        "wires": [
            [
                "da64961778917f77"
            ]
        ]
    },
    {
        "id": "ffc82838237a2856",
        "type": "inject",
        "z": "2242e2f628b1ea7d",
        "name": "Poll Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 850,
        "y": 200,
        "wires": [
            [
                "b1350cfc78c50eee",
                "063ad6f1a3fbc839",
                "4e0c59f08b380c9d"
            ]
        ]
    },
    {
        "id": "f9b343e0b7e286a6",
        "type": "trigger",
        "z": "2242e2f628b1ea7d",
        "name": "Keep Alive Pulse",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 410,
        "y": 540,
        "wires": [
            [
                "aa3f020438125ffe"
            ]
        ]
    },
    {
        "id": "12e9a83fdd105b4b",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "HOA_Convert",
        "func": "flow.set(\"wfpumphoa\", msg.payload, \"storeInFile\");\n\nif(msg.payload==='hand'){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload==='auto'){\n    msg.payload = {'suspended':false};\n    msg.payload = { 'action': 'off' };\n    return msg;\n}\nelse{\n    msg.payload = {'suspended':false};\n    msg.payload = {'action':'off'};\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 260,
        "wires": [
            [
                "e77263115e1ca086"
            ]
        ]
    },
    {
        "id": "73c78aa373f47825",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set Variables",
        "func": "if (msg.topic === \"WFPumpSP\") {\n    global.set('wfpumpsd', msg.payload);\n    // push waterfall pump run speed\n    msg.payload = Buffer.from(global.get('wfpumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 760,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "4e0c59f08b380c9d",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Amp",
        "func": "// Pump Amp node creates the hex command for pump Amp\n// status before sending it to the pump\n// 15 address\n// 45 function\n// 20 ack\n// 00 Page\n// 01 register address\n// FCC5 CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump amp's\n    msg.payload=Buffer.from(\"1545200001FCC5\",\"hex\");\n    await delay(800);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 320,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "64146a262769c5e8",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Watts",
        "func": "var buff = Buffer.from(msg.payload);\n\nif (msg.payload[4] === 1 && msg.payload[0] === 21 && buff.length === 9) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 520,
        "wires": [
            [
                "91f7ad326751495b"
            ]
        ]
    },
    {
        "id": "876f1aa51d257d52",
        "type": "trigger",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "num",
        "op2type": "num",
        "duration": "4",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "de5be01573cf307a"
            ]
        ]
    },
    {
        "id": "54457a0a23170106",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Delay Shutoff Timer",
        "func": "if (msg.payload === 'hand') {\n    msg.payload = 1;\n    return msg;\n}\nelse if (msg.payload === 'auto') {\n    msg.payload = 0;\n    return msg;\n}\nelse {\n    msg.payload = 0;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "876f1aa51d257d52"
            ]
        ]
    },
    {
        "id": "de5be01573cf307a",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "HOA Reset",
        "func": "if(msg.payload===1){\n    msg.payload = 'auto';\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            [
                "38f7771f2fded410"
            ]
        ]
    },
    {
        "id": "9c44f69ffc362448",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set Pump Prime Demand",
        "func": "if (msg.payload === 1) {\n    // push prime pump speed\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(500);\n    return [msg,{'payload':1}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 380,
        "wires": [
            [
                "11ef37aa9891664a"
            ],
            [
                "62a7d15ddce3a3f1"
            ]
        ]
    },
    {
        "id": "11ef37aa9891664a",
        "type": "delay",
        "z": "2242e2f628b1ea7d",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 880,
        "y": 380,
        "wires": [
            [
                "cdd33e7542b2c8e4"
            ]
        ]
    },
    {
        "id": "62a7d15ddce3a3f1",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set Pump Prime Demand bk",
        "func": "if (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(2000);\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 420,
        "wires": [
            [
                "11ef37aa9891664a"
            ],
            [
                "9af0e6f27a535a27"
            ]
        ]
    },
    {
        "id": "9af0e6f27a535a27",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set Pump Speed Demand",
        "func": "if (msg.payload === 1) {\n    // push waterfall pump run speed\n    await delay(180000);\n    msg.payload = Buffer.from(global.get('wfpumpsd'), \"hex\");\n    return [msg,{'payload':1}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 460,
        "wires": [
            [
                "11ef37aa9891664a"
            ],
            [
                "a41afc295c83c397"
            ]
        ]
    },
    {
        "id": "a41afc295c83c397",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set Pump Prime Demand bk",
        "func": "if (msg.payload === 1) {\n    // push waterfall pump run speed\n    msg.payload = Buffer.from(global.get('wfpumpsd'), \"hex\");\n    await delay(2000);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 500,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "615470b8aeecb54b",
        "type": "link in",
        "z": "2242e2f628b1ea7d",
        "name": "link in Freeze",
        "links": [
            "919febfe094f2632"
        ],
        "x": 215,
        "y": 400,
        "wires": [
            [
                "e77263115e1ca086"
            ]
        ]
    },
    {
        "id": "f10ad99fc3bf1a96",
        "type": "link in",
        "z": "2242e2f628b1ea7d",
        "name": "link in Schedule WF",
        "links": [
            "ae0293a21b79967f"
        ],
        "x": 215,
        "y": 460,
        "wires": [
            [
                "e77263115e1ca086"
            ]
        ]
    },
    {
        "id": "20c5a5464fb43985",
        "type": "comment",
        "z": "2242e2f628b1ea7d",
        "name": "Pump #2 control flow, stops if left in hand for more than 4 hours",
        "info": "",
        "x": 550,
        "y": 80,
        "wires": []
    },
    {
        "id": "806a7968acd59338",
        "type": "comment",
        "z": "2242e2f628b1ea7d",
        "name": "Interface to adjust pump speeds, converts number into hex, adds pump specific commands and CRC16",
        "info": "",
        "x": 350,
        "y": 720,
        "wires": []
    },
    {
        "id": "9b44c84c267179ea",
        "type": "comment",
        "z": "2242e2f628b1ea7d",
        "name": "tcp out can be replaced with rtu out if using attached /dev/tty",
        "info": "",
        "x": 1240,
        "y": 300,
        "wires": []
    },
    {
        "id": "9e0a9d941f85d5a4",
        "type": "delay",
        "z": "2242e2f628b1ea7d",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1300,
        "y": 380,
        "wires": [
            [
                "1b11bd5bf6eff7e5"
            ]
        ]
    },
    {
        "id": "1b11bd5bf6eff7e5",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Strip CRC from Msg",
        "func": "var recMsg = msg.payload.slice(0, msg.payload.length - 2).toString('hex');\nvar compareMsg = msg.payload.toString('hex').toUpperCase();\n\nmsg.payload = {\n    'lessCRC': recMsg.toString('hex'),\n    'compare': compareMsg.toString('hex').toUpperCase(),\n    'original': msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 440,
        "wires": [
            [
                "ce5e4166e2c98aff"
            ]
        ]
    },
    {
        "id": "ce5e4166e2c98aff",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload.lessCRC, 'hex');\n\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = {\n    'msgCal': msg.payload.lessCRC + crcValue,\n    'compare': msg.payload.compare,\n    'original': msg.payload.original\n};\n\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 1350,
        "y": 480,
        "wires": [
            [
                "41666f5256bb5bb2"
            ]
        ]
    },
    {
        "id": "41666f5256bb5bb2",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Check Original CRC vs Cal CRC",
        "func": "var goodMsg = msg.payload.original;\n\nif ((msg.payload.compare).toUpperCase() === (msg.payload.msgCal).toUpperCase()) {\n    return { 'payload': goodMsg };\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 520,
        "wires": [
            [
                "f28f7690adbe26bd",
                "41575a147acbb583",
                "64146a262769c5e8"
            ]
        ]
    },
    {
        "id": "c41c5811e0e50c09",
        "type": "ui_numeric",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "label": "Waterfall Pump Speed",
        "tooltip": "",
        "group": "ef3af84e97574c80",
        "order": 5,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "WFPumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "2000",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 440,
        "y": 840,
        "wires": [
            [
                "6d2bc6d569285dc4",
                "2aa8b8db0686664c"
            ]
        ]
    },
    {
        "id": "28951a2641a3ef89",
        "type": "ui_text",
        "z": "2242e2f628b1ea7d",
        "group": "7910133684fc4d5b",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Power (watts):",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "wattWFTxt",
        "x": 1980,
        "y": 520,
        "wires": []
    },
    {
        "id": "7f2e0bdaf085ca0e",
        "type": "ui_gauge",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "group": "7910133684fc4d5b",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Waterfall Pump Speed",
        "label": "RPM",
        "format": "{{value}}",
        "min": 0,
        "max": "3600",
        "colors": [
            "#ca3838",
            "#ffff00",
            "#00b500"
        ],
        "seg1": "600",
        "seg2": "1800",
        "diff": false,
        "className": "",
        "x": 2000,
        "y": 480,
        "wires": []
    },
    {
        "id": "694b13c99eed8852",
        "type": "ui_template",
        "z": "2242e2f628b1ea7d",
        "group": "7910133684fc4d5b",
        "name": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>\n\n<style>\n    .wattWFTxt p {\n    font-size:150%;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1960,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "cdd33e7542b2c8e4",
        "type": "serial request",
        "z": "2242e2f628b1ea7d",
        "name": "Waterfall_Pump",
        "serial": "eafeda6c925d16dc",
        "x": 1100,
        "y": 380,
        "wires": [
            [
                "9e0a9d941f85d5a4"
            ]
        ]
    },
    {
        "id": "25551a4b7bb1e515",
        "type": "inject",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 780,
        "wires": [
            [
                "b2af50d78767f03c"
            ]
        ]
    },
    {
        "id": "b2af50d78767f03c",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Load Stored Waterfall Pump Speed",
        "func": "msg.payload = flow.get(\"wfpumpsp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 840,
        "wires": [
            [
                "c41c5811e0e50c09"
            ]
        ]
    },
    {
        "id": "37a1480e3ad898ca",
        "type": "inject",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "185bb63e4ce5ef95"
            ]
        ]
    },
    {
        "id": "185bb63e4ce5ef95",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Load Stored HOA",
        "func": "msg.payload = flow.get(\"wfpumphoa\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 140,
        "wires": [
            [
                "38f7771f2fded410"
            ]
        ]
    },
    {
        "id": "38f7771f2fded410",
        "type": "ui_multistate_switch",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "group": "7910133684fc4d5b",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "HOA Waterfall Pump",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Auto",
                "value": "auto",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Hand",
                "value": "hand",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "12e9a83fdd105b4b",
                "54457a0a23170106"
            ]
        ]
    },
    {
        "id": "e77263115e1ca086",
        "type": "eztimer",
        "z": "2242e2f628b1ea7d",
        "name": "Run Waterfall Pool Pump",
        "debug": false,
        "autoname": "12:30 - 13:30",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "12:30",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "num",
        "onvalue": 1,
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": false,
        "offtype": "2",
        "offtimesun": "dusk",
        "offtimetod": "13:30",
        "offduration": "00:01:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "num",
        "offvalue": 0,
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": false,
        "resend": false,
        "resendInterval": "0s",
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": true,
        "sun": true,
        "x": 150,
        "y": 320,
        "wires": [
            [
                "c706727fc5e07d59",
                "f9b343e0b7e286a6",
                "9c44f69ffc362448"
            ]
        ]
    },
    {
        "id": "2aa8b8db0686664c",
        "type": "ui_digital_display",
        "z": "2242e2f628b1ea7d",
        "name": "Waterfall RPM Set",
        "group": "ef3af84e97574c80",
        "order": 6,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 430,
        "y": 800,
        "wires": []
    },
    {
        "id": "d265227f7ce05653",
        "type": "ui_led",
        "z": "2242e2f628b1ea7d",
        "order": 2,
        "group": "7910133684fc4d5b",
        "width": 0,
        "height": 0,
        "label": "Waterfall Pump Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ffff00",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 1670,
        "y": 380,
        "wires": []
    },
    {
        "id": "da64961778917f77",
        "type": "buffer-parser",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16le",
                "name": "RPM",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "/4",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "array",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1810,
        "y": 480,
        "wires": [
            [
                "7f2e0bdaf085ca0e"
            ]
        ]
    },
    {
        "id": "91f7ad326751495b",
        "type": "buffer-parser",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16le",
                "name": "Watts",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "*0.240",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1810,
        "y": 520,
        "wires": [
            [
                "28951a2641a3ef89"
            ]
        ]
    },
    {
        "id": "e246f39b6238ecbf",
        "type": "function",
        "z": "d2c68e9ea49e3bd9",
        "name": "HOA_Convert",
        "func": "flow.set(\"cleanerpumphoa\", msg.payload, \"storeInFile\");\n\nif(msg.payload==='hand'){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload==='auto'){\n    msg.payload = {'suspended':false};\n    return msg;\n}\nelse{\n    msg.payload = {'suspended':false};\n    msg.payload = {'action':'off'};\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "8a74c2f770ea35e4"
            ]
        ]
    },
    {
        "id": "3ccee3b8c2f18719",
        "type": "link in",
        "z": "d2c68e9ea49e3bd9",
        "name": "link in Freeze",
        "links": [
            "919febfe094f2632"
        ],
        "x": 225,
        "y": 360,
        "wires": [
            [
                "8a74c2f770ea35e4"
            ]
        ]
    },
    {
        "id": "a1e60eef4d7009cc",
        "type": "link in",
        "z": "d2c68e9ea49e3bd9",
        "name": "link in Schedule Cleaner",
        "links": [
            "11b5851c7c4372e7"
        ],
        "x": 225,
        "y": 420,
        "wires": [
            [
                "8a74c2f770ea35e4"
            ]
        ]
    },
    {
        "id": "aafef63d399ea29d",
        "type": "comment",
        "z": "d2c68e9ea49e3bd9",
        "name": "Pool Cleaner Flow - Controls relay through Relay",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "4c76c80403e1877d",
        "type": "function",
        "z": "d2c68e9ea49e3bd9",
        "name": "Cleaner Start Function Relay 2",
        "func": "if(msg.payload === 1){\n    msg.payload = \"gpioset 1 85=1\";\n} else{\n    msg.payload = \"gpioset 1 85=0\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 340,
        "wires": [
            [
                "9d3212892309aac7"
            ]
        ]
    },
    {
        "id": "9d3212892309aac7",
        "type": "exec",
        "z": "d2c68e9ea49e3bd9",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "GPIO Pin 33 Relay 2",
        "x": 780,
        "y": 340,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "94f92e37fdf439ab",
        "type": "function",
        "z": "d2c68e9ea49e3bd9",
        "name": "Set Pump Speed Demand",
        "func": "// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 180 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 1) {\n    // push main pump run speed\n    await delay(180000);\n    msg.payload = Buffer.from(global.get('cleanerpumpsd'), \"hex\");\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 500,
        "wires": [
            [
                "4110341e8189634f"
            ],
            [
                "5d0051521df4a70c"
            ]
        ]
    },
    {
        "id": "5d0051521df4a70c",
        "type": "function",
        "z": "d2c68e9ea49e3bd9",
        "name": "Set Pump Speed Demand bk",
        "func": "// Repeats command to insure delivery\n\n// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 120 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('cleanerpumpsd'), \"hex\");\n    await delay(2000);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 540,
        "wires": [
            [
                "4110341e8189634f"
            ]
        ]
    },
    {
        "id": "4110341e8189634f",
        "type": "link out",
        "z": "d2c68e9ea49e3bd9",
        "name": "link out cleaner",
        "mode": "link",
        "links": [
            "f3ee13354db270ee"
        ],
        "x": 695,
        "y": 500,
        "wires": []
    },
    {
        "id": "b6a49e039fe613d0",
        "type": "function",
        "z": "d2c68e9ea49e3bd9",
        "name": "Set Pump Speed Demand",
        "func": "// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 180 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 0) {\n    // push main pump run speed\n    await delay(180000);\n    msg.payload = Buffer.from(global.get('cleanerpumpsd'), \"hex\");\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 580,
        "wires": [
            [
                "4110341e8189634f"
            ],
            [
                "3a31b341bf615ff8"
            ]
        ]
    },
    {
        "id": "3a31b341bf615ff8",
        "type": "function",
        "z": "d2c68e9ea49e3bd9",
        "name": "Set Pump Speed Demand bk",
        "func": "// Repeats command to insure delivery\n\n// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 120 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 0) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('cleanerpumpsd'), \"hex\");\n    await delay(2000);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 620,
        "wires": [
            [
                "4110341e8189634f"
            ]
        ]
    },
    {
        "id": "7ca9632ee5504de5",
        "type": "comment",
        "z": "d2c68e9ea49e3bd9",
        "name": "Ramp up main pump speed with cleaner",
        "info": "",
        "x": 500,
        "y": 460,
        "wires": []
    },
    {
        "id": "3c5de81dc3401fba",
        "type": "inject",
        "z": "d2c68e9ea49e3bd9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "22b237aa6aecc47f"
            ]
        ]
    },
    {
        "id": "22b237aa6aecc47f",
        "type": "function",
        "z": "d2c68e9ea49e3bd9",
        "name": "Load Stored HOA",
        "func": "msg.payload = flow.get(\"cleanerpumphoa\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 160,
        "wires": [
            [
                "ef43362f770f0554"
            ]
        ]
    },
    {
        "id": "dc9e7159bfcdc050",
        "type": "comment",
        "z": "d2c68e9ea49e3bd9",
        "name": "GPIO can be replaced with Modbus write or get function to control remote I/O",
        "info": "",
        "x": 950,
        "y": 280,
        "wires": []
    },
    {
        "id": "ef43362f770f0554",
        "type": "ui_multistate_switch",
        "z": "d2c68e9ea49e3bd9",
        "name": "",
        "group": "a8e7f1a1d9bdecb2",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "HOA Cleaner Pump",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Auto",
                "value": "auto",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Hand",
                "value": "hand",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "e246f39b6238ecbf"
            ]
        ]
    },
    {
        "id": "8a74c2f770ea35e4",
        "type": "eztimer",
        "z": "d2c68e9ea49e3bd9",
        "name": "Run Cleaner Pool Pump",
        "debug": false,
        "autoname": "03:00 - 11:00",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "03:00",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "num",
        "onvalue": 1,
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": false,
        "offtype": "2",
        "offtimesun": "dusk",
        "offtimetod": "11:00",
        "offduration": "00:01:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "num",
        "offvalue": 0,
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": false,
        "resend": false,
        "resendInterval": "0s",
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 170,
        "y": 280,
        "wires": [
            [
                "1fbeeef41e929801",
                "4c76c80403e1877d",
                "94f92e37fdf439ab",
                "b6a49e039fe613d0"
            ]
        ]
    },
    {
        "id": "1fbeeef41e929801",
        "type": "ui_led",
        "z": "d2c68e9ea49e3bd9",
        "order": 4,
        "group": "a8e7f1a1d9bdecb2",
        "width": 0,
        "height": 0,
        "label": "Pool Cleaner Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 550,
        "y": 280,
        "wires": []
    },
    {
        "id": "72236852128f856c",
        "type": "delay",
        "z": "920459fe5b6c0979",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 880,
        "y": 220,
        "wires": [
            [
                "3dae6c09899874eb"
            ]
        ]
    },
    {
        "id": "04242e2acc0575a8",
        "type": "function",
        "z": "920459fe5b6c0979",
        "name": "Stop Pump",
        "func": "if (msg.payload === 0) {\n    global.set('counterMP',0);\n    await delay(500);\n    return [{ payload:Buffer.from(\"154220517C\",\"hex\")}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            [
                "72236852128f856c"
            ]
        ]
    },
    {
        "id": "c7baae9812a91893",
        "type": "function",
        "z": "920459fe5b6c0979",
        "name": "Run Pump",
        "func": "if (msg.payload === 1) {\n    msg.payload = Buffer.from(\"154120518C\", \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "72236852128f856c"
            ]
        ]
    },
    {
        "id": "4ecff4bf7f0bb279",
        "type": "function",
        "z": "920459fe5b6c0979",
        "name": "Set Pump Demand",
        "func": "if (global.get('counterMP') < 2) {\n    // push 2850 prime pump\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    global.set('counterMP', global.get('counterMP') + 1);\n    await delay(1500);\n    return msg;\n}\nif (global.get('counterMP') > 24 && global.get('counterMP') < 26) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('heaterpumpsd'), \"hex\");\n    global.set('counterMP', global.get('counterMP') + 1);\n    await delay(1500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 300,
        "wires": [
            [
                "72236852128f856c"
            ]
        ]
    },
    {
        "id": "a67baf38ca13625b",
        "type": "trigger",
        "z": "920459fe5b6c0979",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 260,
        "wires": [
            [
                "c7baae9812a91893",
                "4ecff4bf7f0bb279"
            ]
        ]
    },
    {
        "id": "a56b8b17f7d4a21c",
        "type": "comment",
        "z": "920459fe5b6c0979",
        "name": "Future for Heater/Cooler Pump Run",
        "info": "",
        "x": 180,
        "y": 20,
        "wires": []
    },
    {
        "id": "03dbb3d76d795e7e",
        "type": "function",
        "z": "920459fe5b6c0979",
        "name": "HOA_Convert",
        "func": "flow.set(\"heaterhoa\", msg.payload, \"storeInFile\");\n\nif(msg.payload==='on'){\n    msg.payload = 1;\n    return msg;\n}\nelse if(msg.payload==='off'){\n    msg.payload = 0;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3dae6c09899874eb",
        "type": "link out",
        "z": "920459fe5b6c0979",
        "name": "link out Heater",
        "mode": "link",
        "links": [
            "70b8d4b9e7e12cc6"
        ],
        "x": 1105,
        "y": 220,
        "wires": []
    },
    {
        "id": "fcaeb9564521538d",
        "type": "function",
        "z": "920459fe5b6c0979",
        "name": "Check Temp for Heater",
        "func": "var currentTemp = global.get('poolTemp');\n\nif(currentTemp < global.get('pool')){\n    return [{'payload':1}];\n} \nelse {\n    return [{'payload':0}];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "e737bfbbc9e4071b",
        "type": "function",
        "z": "920459fe5b6c0979",
        "name": "Set Variables",
        "func": "if (msg.topic === \"HeaterSP\") {\n    global.set('pool', msg.payload);\n    flow.set(\"heatersp\", msg.payload, \"storeInFile\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "2bcd0b949e89b7a1",
        "type": "ui_numeric",
        "z": "920459fe5b6c0979",
        "name": "",
        "label": "Heater Set Point",
        "tooltip": "",
        "group": "3c239c21fd265beb",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "HeaterSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "65",
        "max": "85",
        "step": "1",
        "className": "",
        "x": 400,
        "y": 560,
        "wires": [
            [
                "1268739da1945e40",
                "e737bfbbc9e4071b"
            ]
        ]
    },
    {
        "id": "77ab94f45987abce",
        "type": "inject",
        "z": "920459fe5b6c0979",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "d07d2a044d13e792"
            ]
        ]
    },
    {
        "id": "d07d2a044d13e792",
        "type": "function",
        "z": "920459fe5b6c0979",
        "name": "Load Stored Heater Setpoint",
        "func": "msg.payload = flow.get(\"heatersp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 560,
        "wires": [
            [
                "2bcd0b949e89b7a1"
            ]
        ]
    },
    {
        "id": "613cade8574479c4",
        "type": "inject",
        "z": "920459fe5b6c0979",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "a2f4bea7c07e01c9"
            ]
        ]
    },
    {
        "id": "a2f4bea7c07e01c9",
        "type": "function",
        "z": "920459fe5b6c0979",
        "name": "Load Stored HOA",
        "func": "msg.payload = flow.get(\"heaterhoa\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 140,
        "wires": [
            [
                "900dd6cf52e19c94"
            ]
        ]
    },
    {
        "id": "900dd6cf52e19c94",
        "type": "ui_multistate_switch",
        "z": "920459fe5b6c0979",
        "name": "",
        "group": "a8e7f1a1d9bdecb2",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Heater Control",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "On",
                "value": "on",
                "valueType": "str",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "03dbb3d76d795e7e"
            ]
        ]
    },
    {
        "id": "1268739da1945e40",
        "type": "ui_digital_display",
        "z": "920459fe5b6c0979",
        "name": "Heater Set Point",
        "group": "3c239c21fd265beb",
        "order": 1,
        "width": 0,
        "height": 0,
        "digits": "2",
        "decimals": "0",
        "x": 400,
        "y": 500,
        "wires": []
    },
    {
        "id": "07e24069e43dd42f",
        "type": "function",
        "z": "4a0a70f997c94c8e",
        "name": "Calculate Light Pulses",
        "func": "var counter = 0;\nvar numMaxPulse = 14;\n\nif(msg.payload[0] > msg.payload[1]){\n    counter = msg.payload[0] - msg.payload[1];\n}\nif(msg.payload[0] < msg.payload[1]){\n    counter = numMaxPulse - msg.payload[1];\n    counter = counter + msg.payload[0];\n}\nreturn [{'payload':counter}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "741833ea.8be7cc"
            ]
        ]
    },
    {
        "id": "b7e0ab1b05707018",
        "type": "join",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 490,
        "y": 140,
        "wires": [
            [
                "07e24069e43dd42f"
            ]
        ]
    },
    {
        "id": "7a8d1ff563d4b60b",
        "type": "delay",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 220,
        "wires": [
            [
                "b7e0ab1b05707018",
                "07d90ac4f924424d"
            ]
        ]
    },
    {
        "id": "741833ea.8be7cc",
        "type": "function",
        "z": "4a0a70f997c94c8e",
        "name": "BLINK n Times",
        "func": "\nvar o = false;\nfor (var i=0; i<(msg.payload*2); i++) {\n    node.send( {payload:+(o=!o)} )\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 200,
        "wires": [
            [
                "c79ca805.386358"
            ]
        ]
    },
    {
        "id": "c79ca805.386358",
        "type": "delay",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 200,
        "wires": [
            [
                "4ac7fb8c358aced4"
            ]
        ]
    },
    {
        "id": "5238f2066e05122c",
        "type": "delay",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1140,
        "y": 300,
        "wires": [
            [
                "4ac7fb8c358aced4"
            ]
        ]
    },
    {
        "id": "07d90ac4f924424d",
        "type": "delay",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "pauseType": "delay",
        "timeout": "28",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 260,
        "wires": [
            [
                "a1b439156cefc86e"
            ]
        ]
    },
    {
        "id": "938891f9bd890add",
        "type": "trigger",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "num",
        "op2type": "num",
        "duration": "4",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 550,
        "y": 400,
        "wires": [
            [
                "4293afec24bcb560"
            ]
        ]
    },
    {
        "id": "f7f78802b827da04",
        "type": "comment",
        "z": "4a0a70f997c94c8e",
        "name": "Shut off Lights if on Longer than 4 hours - Reads light status from remote I/O",
        "info": "",
        "x": 270,
        "y": 360,
        "wires": []
    },
    {
        "id": "7a0aa1ee3660ba8f",
        "type": "inject",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "a431f66b574ed26d"
            ]
        ]
    },
    {
        "id": "a431f66b574ed26d",
        "type": "function",
        "z": "4a0a70f997c94c8e",
        "name": "Read Light Status",
        "func": "return [{'patyload':global.get('lightStatus')}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "938891f9bd890add",
                "7cfab5f8f714e49e"
            ]
        ]
    },
    {
        "id": "8a5ebe031587648c",
        "type": "comment",
        "z": "4a0a70f997c94c8e",
        "name": "Light control flow - designed to click through Jandy colored light setup",
        "info": "",
        "x": 290,
        "y": 60,
        "wires": []
    },
    {
        "id": "a1b439156cefc86e",
        "type": "ui_button",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "group": "877ace883d8c55f8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Turn Lights On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 940,
        "y": 260,
        "wires": [
            [
                "5238f2066e05122c"
            ]
        ]
    },
    {
        "id": "4293afec24bcb560",
        "type": "ui_button",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "group": "877ace883d8c55f8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Turn Lights Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 940,
        "y": 300,
        "wires": [
            [
                "5238f2066e05122c"
            ]
        ]
    },
    {
        "id": "bf13e4ed1d796137",
        "type": "ui_dropdown",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "1",
        "group": "877ace883d8c55f8",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Alpine White",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Sky Blue",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Cobalt Blue",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Caribbean Blue",
                "value": 4,
                "type": "num"
            },
            {
                "label": "Spring Green",
                "value": 5,
                "type": "num"
            },
            {
                "label": "Emerald Green",
                "value": 6,
                "type": "num"
            },
            {
                "label": "Emerald Rose",
                "value": 7,
                "type": "num"
            },
            {
                "label": "Magenta",
                "value": 8,
                "type": "num"
            },
            {
                "label": "Violet",
                "value": 9,
                "type": "num"
            },
            {
                "label": "Slow Color Splash",
                "value": 10,
                "type": "num"
            },
            {
                "label": "Fast Color Splash",
                "value": 11,
                "type": "num"
            },
            {
                "label": "USA",
                "value": 12,
                "type": "num"
            },
            {
                "label": "Fat Tuesday",
                "value": 13,
                "type": "num"
            },
            {
                "label": "Disco Tech",
                "value": 14,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "dropdown",
        "topicType": "msg",
        "className": "",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "b7e0ab1b05707018",
                "723ed6891105215e"
            ]
        ]
    },
    {
        "id": "4ac7fb8c358aced4",
        "type": "function",
        "z": "4a0a70f997c94c8e",
        "name": "Lighting on/off Function Relay 3",
        "func": "if(msg.payload === 1){\n    msg.payload = \"gpioset 1 97=1\";\n} else{\n    msg.payload = \"gpioset 1 97=0\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 200,
        "wires": [
            [
                "a9371d181ba205b9"
            ]
        ]
    },
    {
        "id": "a9371d181ba205b9",
        "type": "exec",
        "z": "4a0a70f997c94c8e",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "GPIO Pin 31 Relay 3",
        "x": 1200,
        "y": 140,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "3320521034b4911d",
        "type": "comment",
        "z": "4a0a70f997c94c8e",
        "name": "GPIO can be replaced with Modbus write or get function to control remote I/O",
        "info": "",
        "x": 1370,
        "y": 80,
        "wires": []
    },
    {
        "id": "7cfab5f8f714e49e",
        "type": "ui_led",
        "z": "4a0a70f997c94c8e",
        "order": 1,
        "group": "877ace883d8c55f8",
        "width": 0,
        "height": 0,
        "label": "Lights On/Off Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 550,
        "y": 460,
        "wires": []
    },
    {
        "id": "723ed6891105215e",
        "type": "ui_led",
        "z": "4a0a70f997c94c8e",
        "order": 2,
        "group": "877ace883d8c55f8",
        "width": 0,
        "height": 0,
        "label": "Light Color Selected",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#fffee9",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#1799e7",
                "value": "2",
                "valueType": "num"
            },
            {
                "color": "#0047ab",
                "value": "3",
                "valueType": "num"
            },
            {
                "color": "#4c9bb0",
                "value": "4",
                "valueType": "num"
            },
            {
                "color": "#00ff7f",
                "value": "5",
                "valueType": "num"
            },
            {
                "color": "#5fbb9c",
                "value": "6",
                "valueType": "num"
            },
            {
                "color": "#50c878",
                "value": "7",
                "valueType": "num"
            },
            {
                "color": "#ff00ff",
                "value": "8",
                "valueType": "num"
            },
            {
                "color": "#000000",
                "value": "9",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "10",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "11",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "12",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "13",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "14",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 270,
        "y": 100,
        "wires": []
    },
    {
        "id": "177855e6ea2e81fd",
        "type": "function",
        "z": "13125f291573f180",
        "name": "Set Variables",
        "func": "if (msg.topic === \"FreezeSP\") {\n    global.set('freeze', msg.payload);\n    flow.set(\"freezesp\", msg.payload, \"storeInFile\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "be5e6a897a41ecb2",
        "type": "function",
        "z": "13125f291573f180",
        "name": "Check Temp for Freeze",
        "func": "var currentTemp = global.get('outsideTemp');\n\nif(currentTemp < global.get('freeze')){\n    return [{'payload':1}];\n} \nelse {\n    return [{'payload':0}];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "dfd8251fa8c435ec"
            ]
        ]
    },
    {
        "id": "dfd8251fa8c435ec",
        "type": "function",
        "z": "13125f291573f180",
        "name": "Run All Pumps",
        "func": "if (msg.payload === 1) {\n    msg.payload = { 'suspended': true };\n    msg.payload = { 'action': 'on' };\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 100,
        "wires": [
            [
                "919febfe094f2632"
            ]
        ]
    },
    {
        "id": "919febfe094f2632",
        "type": "link out",
        "z": "13125f291573f180",
        "name": "link out Freeze",
        "mode": "link",
        "links": [
            "3ccee3b8c2f18719",
            "615470b8aeecb54b",
            "5ef145ec8dcb0b8a"
        ],
        "x": 875,
        "y": 100,
        "wires": []
    },
    {
        "id": "89a47a0f4c981fb2",
        "type": "inject",
        "z": "13125f291573f180",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "be5e6a897a41ecb2"
            ]
        ]
    },
    {
        "id": "ad5310135d80b9c8",
        "type": "comment",
        "z": "13125f291573f180",
        "name": "Freeze Protection Flow - checks remote temperature and turns all pumps on if below set point temperature",
        "info": "",
        "x": 400,
        "y": 40,
        "wires": []
    },
    {
        "id": "fa2bcc65f1745358",
        "type": "ui_numeric",
        "z": "13125f291573f180",
        "name": "",
        "label": "Freeze Protection Set Point",
        "tooltip": "",
        "group": "3c239c21fd265beb",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "FreezeSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "33",
        "max": "40",
        "step": "1",
        "className": "",
        "x": 420,
        "y": 340,
        "wires": [
            [
                "e35f568f97aecc0b",
                "177855e6ea2e81fd"
            ]
        ]
    },
    {
        "id": "708d98e4af32ec36",
        "type": "inject",
        "z": "13125f291573f180",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "22888370a170de03"
            ]
        ]
    },
    {
        "id": "22888370a170de03",
        "type": "function",
        "z": "13125f291573f180",
        "name": "Load Stored Heater Setpoint",
        "func": "msg.payload = flow.get(\"freezesp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 340,
        "wires": [
            [
                "fa2bcc65f1745358"
            ]
        ]
    },
    {
        "id": "e35f568f97aecc0b",
        "type": "ui_digital_display",
        "z": "13125f291573f180",
        "name": "Freeze Set Point",
        "group": "3c239c21fd265beb",
        "order": 3,
        "width": 0,
        "height": 0,
        "digits": "2",
        "decimals": "0",
        "x": 390,
        "y": 280,
        "wires": []
    },
    {
        "id": "f5a7a70d426632cf",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Convert to eztimer",
        "func": "if(msg.topic === \"mon\"){\n    flow.set(\"mon-mp\", msg.payload, \"storeInFile\");\n    if(msg.payload){\n        msg.payload = {'mon':true};\n    } else{\n        msg.payload = {'mon':false};\n    }\n}else if(msg.topic === \"tue\"){\n    flow.set(\"tue-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'tue': true };\n    } else {\n        msg.payload = { 'tue': false };\n    }\n} else if (msg.topic === \"wed\") {\n    flow.set(\"wed-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'wed': true };\n    } else {\n        msg.payload = { 'wed': false };\n    }\n} else if (msg.topic === \"thu\") {\n    flow.set(\"thu-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'thu': true };\n    } else {\n        msg.payload = { 'thu': false };\n    }\n} else if (msg.topic === \"fri\") {\n    flow.set(\"fri-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'fri': true };\n    } else {\n        msg.payload = { 'fri': false };\n    }\n} else if (msg.topic === \"sat\") {\n    flow.set(\"sat-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sat': true };\n    } else {\n        msg.payload = { 'sat': false };\n    }\n} else if (msg.topic === \"sun\") {\n    flow.set(\"sun-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sun': true };\n    } else {\n        msg.payload = { 'sun': false };\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 80,
        "wires": [
            [
                "7cce2edea9cb0127"
            ]
        ]
    },
    {
        "id": "8d085078aa8198bd",
        "type": "comment",
        "z": "6b22b498c6292ac6",
        "name": "Main Pump Scheduling",
        "info": "",
        "x": 400,
        "y": 40,
        "wires": []
    },
    {
        "id": "57a1524f6b9ea44c",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Convert time eztimer",
        "func": "if(msg.topic === 'on'){\n    msg.payload = { 'ontime': msg.payload };\n}\nif(msg.topic === 'off'){\n    msg.payload = {'offtime': msg.payload };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 120,
        "wires": [
            [
                "7cce2edea9cb0127"
            ]
        ]
    },
    {
        "id": "7cce2edea9cb0127",
        "type": "link out",
        "z": "6b22b498c6292ac6",
        "name": "link out Schedule Main",
        "mode": "link",
        "links": [
            "dff85099e89fce57"
        ],
        "x": 1225,
        "y": 80,
        "wires": []
    },
    {
        "id": "b7d34c6520e01e4c",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Convert to eztimer",
        "func": "if (msg.topic === \"mon\") {\n    flow.set(\"mon-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'mon': true };\n    } else {\n        msg.payload = { 'mon': false };\n    }\n} else if (msg.topic === \"tue\") {\n    flow.set(\"tue-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'tue': true };\n    } else {\n        msg.payload = { 'tue': false };\n    }\n} else if (msg.topic === \"wed\") {\n    flow.set(\"wed-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'wed': true };\n    } else {\n        msg.payload = { 'wed': false };\n    }\n} else if (msg.topic === \"thu\") {\n    flow.set(\"thu-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'thu': true };\n    } else {\n        msg.payload = { 'thu': false };\n    }\n} else if (msg.topic === \"fri\") {\n    flow.set(\"fri-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'fri': true };\n    } else {\n        msg.payload = { 'fri': false };\n    }\n} else if (msg.topic === \"sat\") {\n    flow.set(\"sat-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sat': true };\n    } else {\n        msg.payload = { 'sat': false };\n    }\n} else if (msg.topic === \"sun\") {\n    flow.set(\"sun-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sun': true };\n    } else {\n        msg.payload = { 'sun': false };\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 500,
        "wires": [
            [
                "ae0293a21b79967f"
            ]
        ]
    },
    {
        "id": "8821387efb30d23d",
        "type": "comment",
        "z": "6b22b498c6292ac6",
        "name": "Waterfall Pump Scheduling",
        "info": "",
        "x": 410,
        "y": 460,
        "wires": []
    },
    {
        "id": "57a6ef5f4cff7f39",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Convert time eztimer",
        "func": "if (msg.topic === 'on') {\n    msg.payload = { 'ontime': msg.payload };\n}\nif (msg.topic === 'off') {\n    msg.payload = { 'offtime': msg.payload };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 540,
        "wires": [
            [
                "ae0293a21b79967f"
            ]
        ]
    },
    {
        "id": "33ea413e8de63a1a",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Convert to eztimer",
        "func": "if (msg.topic === \"mon\") {\n    flow.set(\"mon-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'mon': true };\n    } else {\n        msg.payload = { 'mon': false };\n    }\n} else if (msg.topic === \"tue\") {\n    flow.set(\"tue-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'tue': true };\n    } else {\n        msg.payload = { 'tue': false };\n    }\n} else if (msg.topic === \"wed\") {\n    flow.set(\"wed-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'wed': true };\n    } else {\n        msg.payload = { 'wed': false };\n    }\n} else if (msg.topic === \"thu\") {\n    flow.set(\"thu-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'thu': true };\n    } else {\n        msg.payload = { 'thu': false };\n    }\n} else if (msg.topic === \"fri\") {\n    flow.set(\"fri-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'fri': true };\n    } else {\n        msg.payload = { 'fri': false };\n    }\n} else if (msg.topic === \"sat\") {\n    flow.set(\"sat-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sat': true };\n    } else {\n        msg.payload = { 'sat': false };\n    }\n} else if (msg.topic === \"sun\") {\n    flow.set(\"sun-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sun': true };\n    } else {\n        msg.payload = { 'sun': false };\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 940,
        "wires": [
            [
                "11b5851c7c4372e7"
            ]
        ]
    },
    {
        "id": "ea8afd700a4056ff",
        "type": "comment",
        "z": "6b22b498c6292ac6",
        "name": "Cleaner Pump Scheduling",
        "info": "",
        "x": 410,
        "y": 900,
        "wires": []
    },
    {
        "id": "61d016ba3b3ff25b",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Convert time eztimer",
        "func": "if (msg.topic === 'on') {\n    msg.payload = { 'ontime': msg.payload };\n}\nif (msg.topic === 'off') {\n    msg.payload = { 'offtime': msg.payload };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 980,
        "wires": [
            [
                "11b5851c7c4372e7"
            ]
        ]
    },
    {
        "id": "ae0293a21b79967f",
        "type": "link out",
        "z": "6b22b498c6292ac6",
        "name": "link out Schedule WF",
        "mode": "link",
        "links": [
            "f10ad99fc3bf1a96"
        ],
        "x": 1205,
        "y": 500,
        "wires": []
    },
    {
        "id": "11b5851c7c4372e7",
        "type": "link out",
        "z": "6b22b498c6292ac6",
        "name": "link out Schedule Cleaner",
        "mode": "link",
        "links": [
            "a1e60eef4d7009cc"
        ],
        "x": 1205,
        "y": 940,
        "wires": []
    },
    {
        "id": "7384352b.3597a4",
        "type": "ui_text_input",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Start Time",
        "tooltip": "",
        "group": "9920c1160810f169",
        "order": 1,
        "width": "3",
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "start",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 370,
        "y": 360,
        "wires": [
            [
                "fd8c33e516fb7022",
                "1eabc0b6ccba3eb1"
            ]
        ]
    },
    {
        "id": "5d786101425d909a",
        "type": "ui_text_input",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Stop Time",
        "tooltip": "",
        "group": "9920c1160810f169",
        "order": 3,
        "width": "3",
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "stop",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 360,
        "y": 400,
        "wires": [
            [
                "3eb6caeee8c05fed",
                "49675942d37e2cbb"
            ]
        ]
    },
    {
        "id": "04738e97a0a5b0e5",
        "type": "ui_text_input",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Start Time",
        "tooltip": "",
        "group": "05c18f816c8c8a67",
        "order": 1,
        "width": "3",
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "start",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 370,
        "y": 780,
        "wires": [
            [
                "8176b247912f0722",
                "bfb1f276eec5182a"
            ]
        ]
    },
    {
        "id": "471903b44c6a0f07",
        "type": "ui_text_input",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Stop Time",
        "tooltip": "",
        "group": "05c18f816c8c8a67",
        "order": 3,
        "width": "3",
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "stop",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 360,
        "y": 820,
        "wires": [
            [
                "1790055e2fb12ff2",
                "080849ad48dc3acf"
            ]
        ]
    },
    {
        "id": "b59c22854db53e6c",
        "type": "ui_text_input",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Start Time",
        "tooltip": "",
        "group": "9e10244780a591c3",
        "order": 1,
        "width": "3",
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "start",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "cbe9fae3bae22758",
                "93d28754a72fc434"
            ]
        ]
    },
    {
        "id": "f6757cf1a1ade8d9",
        "type": "ui_text_input",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Stop Time",
        "tooltip": "",
        "group": "9e10244780a591c3",
        "order": 3,
        "width": "3",
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "stop",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 360,
        "y": 1260,
        "wires": [
            [
                "f357d9d8ce5bc855",
                "51b0520e781d92cf"
            ]
        ]
    },
    {
        "id": "a2cf16310c0abde0",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Monday",
        "tooltip": "",
        "group": "9920c1160810f169",
        "order": 5,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "mon",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "f5a7a70d426632cf"
            ]
        ]
    },
    {
        "id": "fb458b80a5a9ee21",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Tuesday",
        "tooltip": "",
        "group": "9920c1160810f169",
        "order": 6,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "tue",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 120,
        "wires": [
            [
                "f5a7a70d426632cf"
            ]
        ]
    },
    {
        "id": "92ca84c3dd6d1c24",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Wed",
        "tooltip": "",
        "group": "9920c1160810f169",
        "order": 7,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "wed",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 160,
        "wires": [
            [
                "f5a7a70d426632cf"
            ]
        ]
    },
    {
        "id": "c80218a21999f8b2",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Thursday",
        "tooltip": "",
        "group": "9920c1160810f169",
        "order": 8,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "thu",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 200,
        "wires": [
            [
                "f5a7a70d426632cf"
            ]
        ]
    },
    {
        "id": "a875e60dd1201529",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Friday",
        "tooltip": "",
        "group": "9920c1160810f169",
        "order": 9,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "fri",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 240,
        "wires": [
            [
                "f5a7a70d426632cf"
            ]
        ]
    },
    {
        "id": "f4c2c446184f0643",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Saturday",
        "tooltip": "",
        "group": "9920c1160810f169",
        "order": 10,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sat",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 280,
        "wires": [
            [
                "f5a7a70d426632cf"
            ]
        ]
    },
    {
        "id": "d8eb6fcf909d25d7",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Sunday",
        "tooltip": "",
        "group": "9920c1160810f169",
        "order": 11,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sun",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "f5a7a70d426632cf"
            ]
        ]
    },
    {
        "id": "84079873d1ad3076",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Monday",
        "tooltip": "",
        "group": "05c18f816c8c8a67",
        "order": 5,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "mon",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 500,
        "wires": [
            [
                "b7d34c6520e01e4c"
            ]
        ]
    },
    {
        "id": "94d3c9c1e5b54416",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Tuesday",
        "tooltip": "",
        "group": "05c18f816c8c8a67",
        "order": 6,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "tue",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 540,
        "wires": [
            [
                "b7d34c6520e01e4c"
            ]
        ]
    },
    {
        "id": "518834109e2133d8",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Wed",
        "tooltip": "",
        "group": "05c18f816c8c8a67",
        "order": 7,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "wed",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 580,
        "wires": [
            [
                "b7d34c6520e01e4c"
            ]
        ]
    },
    {
        "id": "d87d844e814632ad",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Thursday",
        "tooltip": "",
        "group": "05c18f816c8c8a67",
        "order": 8,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "thu",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 620,
        "wires": [
            [
                "b7d34c6520e01e4c"
            ]
        ]
    },
    {
        "id": "a555e104ee2b84f7",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Friday",
        "tooltip": "",
        "group": "05c18f816c8c8a67",
        "order": 9,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "fri",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 660,
        "wires": [
            [
                "b7d34c6520e01e4c"
            ]
        ]
    },
    {
        "id": "fc018a2e5e42e7af",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Saturday",
        "tooltip": "",
        "group": "05c18f816c8c8a67",
        "order": 10,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sat",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 700,
        "wires": [
            [
                "b7d34c6520e01e4c"
            ]
        ]
    },
    {
        "id": "c21d4114e6ec07f7",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Sunday",
        "tooltip": "",
        "group": "05c18f816c8c8a67",
        "order": 11,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sun",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 740,
        "wires": [
            [
                "b7d34c6520e01e4c"
            ]
        ]
    },
    {
        "id": "172ac3b33dc8403e",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Monday",
        "tooltip": "",
        "group": "9e10244780a591c3",
        "order": 5,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "mon",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 940,
        "wires": [
            [
                "33ea413e8de63a1a"
            ]
        ]
    },
    {
        "id": "1ef9197a8a72c3cb",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Tuesday",
        "tooltip": "",
        "group": "9e10244780a591c3",
        "order": 6,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "tue",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 980,
        "wires": [
            [
                "33ea413e8de63a1a"
            ]
        ]
    },
    {
        "id": "d7e9f3dda67798de",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Wed",
        "tooltip": "",
        "group": "9e10244780a591c3",
        "order": 7,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "wed",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 1020,
        "wires": [
            [
                "33ea413e8de63a1a"
            ]
        ]
    },
    {
        "id": "8e676aadcbf0ab48",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Thursday",
        "tooltip": "",
        "group": "9e10244780a591c3",
        "order": 8,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "thu",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 1060,
        "wires": [
            [
                "33ea413e8de63a1a"
            ]
        ]
    },
    {
        "id": "302de734e4bdcd38",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Friday",
        "tooltip": "",
        "group": "9e10244780a591c3",
        "order": 9,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "fri",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 1100,
        "wires": [
            [
                "33ea413e8de63a1a"
            ]
        ]
    },
    {
        "id": "514d899c6f9846a5",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Saturday",
        "tooltip": "",
        "group": "9e10244780a591c3",
        "order": 10,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sat",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 1140,
        "wires": [
            [
                "33ea413e8de63a1a"
            ]
        ]
    },
    {
        "id": "be76a3ab70bdc556",
        "type": "ui_switch",
        "z": "6b22b498c6292ac6",
        "name": "",
        "label": "Sunday",
        "tooltip": "",
        "group": "9e10244780a591c3",
        "order": 11,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sun",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 1180,
        "wires": [
            [
                "33ea413e8de63a1a"
            ]
        ]
    },
    {
        "id": "991368d65b6dd9ea",
        "type": "ui_text",
        "z": "6b22b498c6292ac6",
        "group": "9920c1160810f169",
        "order": 2,
        "width": "3",
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 360,
        "wires": []
    },
    {
        "id": "59ec2eb2409221cb",
        "type": "ui_text",
        "z": "6b22b498c6292ac6",
        "group": "9920c1160810f169",
        "order": 4,
        "width": "3",
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 400,
        "wires": []
    },
    {
        "id": "507041ec1307b379",
        "type": "ui_text",
        "z": "6b22b498c6292ac6",
        "group": "05c18f816c8c8a67",
        "order": 2,
        "width": "3",
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 780,
        "wires": []
    },
    {
        "id": "16468c36fa5b44ce",
        "type": "ui_text",
        "z": "6b22b498c6292ac6",
        "group": "05c18f816c8c8a67",
        "order": 4,
        "width": "3",
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 820,
        "wires": []
    },
    {
        "id": "427a516a62911c5d",
        "type": "ui_text",
        "z": "6b22b498c6292ac6",
        "group": "9e10244780a591c3",
        "order": 2,
        "width": "3",
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 1220,
        "wires": []
    },
    {
        "id": "e8b4c06136c35fbd",
        "type": "ui_text",
        "z": "6b22b498c6292ac6",
        "group": "9e10244780a591c3",
        "order": 4,
        "width": "3",
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 1260,
        "wires": []
    },
    {
        "id": "955c2add0ed51abb",
        "type": "inject",
        "z": "6b22b498c6292ac6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "1cdc5b1b2e08d78e",
                "946eb864b21e02db",
                "5cc23c0cd913f94e",
                "d8a720da920a996e",
                "20bc03630be3860a",
                "9a948760e11c4179",
                "66517b02b1e657ee",
                "bea1c13ad5a05f2f",
                "6fa245a5b6402ef8"
            ]
        ]
    },
    {
        "id": "1cdc5b1b2e08d78e",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"mon-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 80,
        "wires": [
            [
                "a2cf16310c0abde0"
            ]
        ]
    },
    {
        "id": "946eb864b21e02db",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"tue-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 120,
        "wires": [
            [
                "fb458b80a5a9ee21"
            ]
        ]
    },
    {
        "id": "5cc23c0cd913f94e",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"wed-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 160,
        "wires": [
            [
                "92ca84c3dd6d1c24"
            ]
        ]
    },
    {
        "id": "d8a720da920a996e",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"thu-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 200,
        "wires": [
            [
                "c80218a21999f8b2"
            ]
        ]
    },
    {
        "id": "20bc03630be3860a",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"fri-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 240,
        "wires": [
            [
                "a875e60dd1201529"
            ]
        ]
    },
    {
        "id": "9a948760e11c4179",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sat-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 280,
        "wires": [
            [
                "f4c2c446184f0643"
            ]
        ]
    },
    {
        "id": "66517b02b1e657ee",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sun-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 320,
        "wires": [
            [
                "d8eb6fcf909d25d7"
            ]
        ]
    },
    {
        "id": "1eabc0b6ccba3eb1",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Save Start Time",
        "func": "flow.set(\"starttime-mp\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "e6b1f8b5.ac6328"
            ]
        ]
    },
    {
        "id": "49675942d37e2cbb",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Save Stop Time",
        "func": "flow.set(\"stoptime-mp\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "6450c41e653cd0c8"
            ]
        ]
    },
    {
        "id": "bea1c13ad5a05f2f",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"starttime-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 360,
        "wires": [
            [
                "7384352b.3597a4"
            ]
        ]
    },
    {
        "id": "6fa245a5b6402ef8",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"stoptime-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 400,
        "wires": [
            [
                "5d786101425d909a"
            ]
        ]
    },
    {
        "id": "55b15381978b8a94",
        "type": "inject",
        "z": "6b22b498c6292ac6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 460,
        "wires": [
            [
                "f52c8643af449eba",
                "91c54275809cfe93",
                "153f58941d86af52",
                "0667144e55a7fdd3",
                "e44ea43f1a7615d7",
                "7c0c643bcbaf4fee",
                "ddbc6a229b6018c9",
                "8c2203f5f7c9de82",
                "3ff488278809e8c9"
            ]
        ]
    },
    {
        "id": "f52c8643af449eba",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"mon-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 500,
        "wires": [
            [
                "84079873d1ad3076"
            ]
        ]
    },
    {
        "id": "91c54275809cfe93",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"tue-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 540,
        "wires": [
            [
                "94d3c9c1e5b54416"
            ]
        ]
    },
    {
        "id": "153f58941d86af52",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"wed-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 580,
        "wires": [
            [
                "518834109e2133d8"
            ]
        ]
    },
    {
        "id": "0667144e55a7fdd3",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"thu-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 620,
        "wires": [
            [
                "d87d844e814632ad"
            ]
        ]
    },
    {
        "id": "e44ea43f1a7615d7",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"fri-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 660,
        "wires": [
            [
                "a555e104ee2b84f7"
            ]
        ]
    },
    {
        "id": "7c0c643bcbaf4fee",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sat-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 700,
        "wires": [
            [
                "fc018a2e5e42e7af"
            ]
        ]
    },
    {
        "id": "ddbc6a229b6018c9",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sun-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 740,
        "wires": [
            [
                "c21d4114e6ec07f7"
            ]
        ]
    },
    {
        "id": "8c2203f5f7c9de82",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"starttime-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 780,
        "wires": [
            [
                "04738e97a0a5b0e5"
            ]
        ]
    },
    {
        "id": "3ff488278809e8c9",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"stoptime-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 820,
        "wires": [
            [
                "471903b44c6a0f07"
            ]
        ]
    },
    {
        "id": "bfb1f276eec5182a",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Save Start Time",
        "func": "flow.set(\"starttime-wf\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 700,
        "wires": [
            [
                "a46750cf7a6dfd67"
            ]
        ]
    },
    {
        "id": "080849ad48dc3acf",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Save Stop Time",
        "func": "flow.set(\"stoptime-wf\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 740,
        "wires": [
            [
                "ee5471a65a367935"
            ]
        ]
    },
    {
        "id": "33bf15056892af8e",
        "type": "inject",
        "z": "6b22b498c6292ac6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 900,
        "wires": [
            [
                "bcff5659ea795bed",
                "4fbcb76aa68ce4da",
                "820fd5274e7fbbc1",
                "cf2ed9b0cef1d926",
                "d15f5aba1ed7b5d0",
                "a0dd4d89e5b7c6f0",
                "1a60e3d923f550a4",
                "2d5558771f4f539c",
                "cf63ce7aae36f0f3"
            ]
        ]
    },
    {
        "id": "bcff5659ea795bed",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"mon-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 940,
        "wires": [
            [
                "172ac3b33dc8403e"
            ]
        ]
    },
    {
        "id": "4fbcb76aa68ce4da",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"tue-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 980,
        "wires": [
            [
                "1ef9197a8a72c3cb"
            ]
        ]
    },
    {
        "id": "820fd5274e7fbbc1",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"wed-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1020,
        "wires": [
            [
                "d7e9f3dda67798de"
            ]
        ]
    },
    {
        "id": "cf2ed9b0cef1d926",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"thu-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "8e676aadcbf0ab48"
            ]
        ]
    },
    {
        "id": "d15f5aba1ed7b5d0",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"fri-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1100,
        "wires": [
            [
                "302de734e4bdcd38"
            ]
        ]
    },
    {
        "id": "a0dd4d89e5b7c6f0",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sat-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1140,
        "wires": [
            [
                "514d899c6f9846a5"
            ]
        ]
    },
    {
        "id": "1a60e3d923f550a4",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sun-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1180,
        "wires": [
            [
                "be76a3ab70bdc556"
            ]
        ]
    },
    {
        "id": "2d5558771f4f539c",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"starttime-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1220,
        "wires": [
            [
                "b59c22854db53e6c"
            ]
        ]
    },
    {
        "id": "cf63ce7aae36f0f3",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"stoptime-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1260,
        "wires": [
            [
                "f6757cf1a1ade8d9"
            ]
        ]
    },
    {
        "id": "93d28754a72fc434",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Save Start Time",
        "func": "flow.set(\"starttime-cn\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1140,
        "wires": [
            [
                "1a2ac76c380b1eaf"
            ]
        ]
    },
    {
        "id": "51b0520e781d92cf",
        "type": "function",
        "z": "6b22b498c6292ac6",
        "name": "Save Stop Time",
        "func": "flow.set(\"stoptime-cn\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1180,
        "wires": [
            [
                "5632295aedc184d5"
            ]
        ]
    },
    {
        "id": "e6b1f8b5.ac6328",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "on",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 280,
        "wires": [
            [
                "57a1524f6b9ea44c"
            ]
        ]
    },
    {
        "id": "6450c41e653cd0c8",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "off",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 320,
        "wires": [
            [
                "57a1524f6b9ea44c"
            ]
        ]
    },
    {
        "id": "a46750cf7a6dfd67",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "on",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 700,
        "wires": [
            [
                "57a6ef5f4cff7f39"
            ]
        ]
    },
    {
        "id": "ee5471a65a367935",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "off",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 740,
        "wires": [
            [
                "57a6ef5f4cff7f39"
            ]
        ]
    },
    {
        "id": "1a2ac76c380b1eaf",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "on",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 1140,
        "wires": [
            [
                "61d016ba3b3ff25b"
            ]
        ]
    },
    {
        "id": "5632295aedc184d5",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "off",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 1180,
        "wires": [
            [
                "61d016ba3b3ff25b"
            ]
        ]
    },
    {
        "id": "fd8c33e516fb7022",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 360,
        "wires": [
            [
                "991368d65b6dd9ea"
            ]
        ]
    },
    {
        "id": "3eb6caeee8c05fed",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 400,
        "wires": [
            [
                "59ec2eb2409221cb"
            ]
        ]
    },
    {
        "id": "8176b247912f0722",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 780,
        "wires": [
            [
                "507041ec1307b379"
            ]
        ]
    },
    {
        "id": "1790055e2fb12ff2",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 820,
        "wires": [
            [
                "16468c36fa5b44ce"
            ]
        ]
    },
    {
        "id": "cbe9fae3bae22758",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 1220,
        "wires": [
            [
                "427a516a62911c5d"
            ]
        ]
    },
    {
        "id": "f357d9d8ce5bc855",
        "type": "moment",
        "z": "6b22b498c6292ac6",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 1260,
        "wires": [
            [
                "e8b4c06136c35fbd"
            ]
        ]
    },
    {
        "id": "2409167426ecb1e0",
        "type": "function",
        "z": "d6e03a16f09c42f2",
        "name": "Set Read Global Variables",
        "func": "var outsideTemp = msg.payload[\"/dev/i2c-1\"].ads1115[\"0x49\"].singleEnded.channel_1.miliVolts;\n\noutsideTemp = 0.02066 * outsideTemp - 58;\n\nglobal.set('outsideTemp', msg.payload);\nmsg.payload = outsideTemp;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 100,
        "wires": [
            [
                "8f1e889448869a6e",
                "46f760b3eef1041a",
                "3e16abc41de1f9ec"
            ]
        ]
    },
    {
        "id": "06be766ad7bcfc6a",
        "type": "function",
        "z": "d6e03a16f09c42f2",
        "name": "Set Read Global Variables",
        "func": "var poolTemp = msg.payload[\"/dev/i2c-1\"].ads1115[\"0x49\"].singleEnded.channel_2.miliVolts;\n\npoolTemp = 0.02066 * poolTemp - 58;\n\nglobal.set('poolTemp', msg.payload);\nmsg.payload = poolTemp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 160,
        "wires": [
            [
                "70386d63f8a547e6",
                "97e31d814deb66c6",
                "31a841255513dee6"
            ]
        ]
    },
    {
        "id": "8f1e889448869a6e",
        "type": "ui_text",
        "z": "d6e03a16f09c42f2",
        "group": "a8e7f1a1d9bdecb2",
        "order": 7,
        "width": 3,
        "height": "2",
        "name": "",
        "label": "",
        "format": "{{msg.payload.toFixed(1)}}",
        "layout": "row-center",
        "className": "tempTxt",
        "x": 970,
        "y": 100,
        "wires": []
    },
    {
        "id": "97e31d814deb66c6",
        "type": "ui_text",
        "z": "d6e03a16f09c42f2",
        "group": "a8e7f1a1d9bdecb2",
        "order": 8,
        "width": 3,
        "height": "2",
        "name": "",
        "label": "",
        "format": "{{msg.payload.toFixed(1)}}",
        "layout": "row-center",
        "className": "tempTxt",
        "x": 970,
        "y": 180,
        "wires": []
    },
    {
        "id": "46f760b3eef1041a",
        "type": "ui_text",
        "z": "d6e03a16f09c42f2",
        "group": "a8e7f1a1d9bdecb2",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Air Temp (F):",
        "format": "",
        "layout": "row-spread",
        "className": "labelTxt",
        "x": 990,
        "y": 60,
        "wires": []
    },
    {
        "id": "70386d63f8a547e6",
        "type": "ui_text",
        "z": "d6e03a16f09c42f2",
        "group": "a8e7f1a1d9bdecb2",
        "order": 6,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Pool Temp (F):",
        "format": "",
        "layout": "row-spread",
        "className": "labelTxt",
        "x": 1000,
        "y": 140,
        "wires": []
    },
    {
        "id": "42c10fc146da2286",
        "type": "ui_template",
        "z": "d6e03a16f09c42f2",
        "group": "a8e7f1a1d9bdecb2",
        "name": "",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>\n\n<style>\n    .tempTxt p {\n    font-size:250%;\n    }\n</style>\n\n<style>\n    .labelTxt p {\n        font-size: 115%;\n    }\n</style>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d0bd23c8a03f73b4",
        "type": "inject",
        "z": "d6e03a16f09c42f2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "51d75af7c98c4c77"
            ]
        ]
    },
    {
        "id": "55faf3973a26e7c5",
        "type": "debug",
        "z": "d6e03a16f09c42f2",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 580,
        "y": 240,
        "wires": []
    },
    {
        "id": "ecb0010acd6bdb0d",
        "type": "comment",
        "z": "d6e03a16f09c42f2",
        "name": "i2c can be replaced with Modbus Read or other method for remote Analog circuit",
        "info": "",
        "x": 300,
        "y": 60,
        "wires": []
    },
    {
        "id": "3e16abc41de1f9ec",
        "type": "ui_chart",
        "z": "d6e03a16f09c42f2",
        "name": "",
        "group": "d0f277a26b640484",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Outside Temp",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-60",
        "ymax": "110",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1000,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "31a841255513dee6",
        "type": "ui_chart",
        "z": "d6e03a16f09c42f2",
        "name": "",
        "group": "d0f277a26b640484",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Pool Temp",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "5",
        "ymax": "110",
        "removeOlder": "-60",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 990,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "51d75af7c98c4c77",
        "type": "ads1x15_i2c",
        "z": "d6e03a16f09c42f2",
        "property": "payload",
        "name": "",
        "i2c_device_number": "1",
        "chip": "0x01",
        "i2c_address": "0x49",
        "inputsForChannel": "singleEnded",
        "singleEndedChannel0": true,
        "singleEndedChannel1": true,
        "singleEndedChannel2": true,
        "singleEndedChannel3": true,
        "differentialChannel0_1": true,
        "differentialChannel0_3": false,
        "differentialChannel1_3": false,
        "differentialChannel2_3": true,
        "samplesPerSecond0": "920",
        "samplesPerSecond1": "860",
        "progGainAmp": "2048",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "2409167426ecb1e0",
                "06be766ad7bcfc6a",
                "55faf3973a26e7c5"
            ]
        ]
    }
]