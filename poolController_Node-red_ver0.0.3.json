[
    {
        "id": "fc862c76013511be",
        "type": "tab",
        "label": "Main Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "858ef5bc19b0331b",
        "type": "tab",
        "label": "Waterfall Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1cd40c5c330699d1",
        "type": "tab",
        "label": "Cleaner Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "11549a536db24124",
        "type": "tab",
        "label": "Heater",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4bc6f781bd269603",
        "type": "tab",
        "label": "Lighting Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "026c205e3a5666cc",
        "type": "tab",
        "label": "Freeze Protection",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e02a1f223ce42270",
        "type": "tab",
        "label": "Schedule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8f3ccf6cb8724135",
        "type": "tab",
        "label": "Remote IO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d6d2155704172bed",
        "type": "tab",
        "label": "PC Controls",
        "disabled": false,
        "info": ""
    },
    {
        "id": "25c6fe1eed10f361",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "15",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "100"
    },
    {
        "id": "eafeda6c925d16dc",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "15",
        "bin": "bin",
        "out": "interbyte",
        "addchar": "",
        "responsetimeout": "100"
    },
    {
        "id": "9cdce304f6571f02",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "poolController-Node-red",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "MM/DD/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "fec5d0ef82d11202",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6b1816eb6b29a73a",
        "type": "ui_group",
        "name": "Main Pump",
        "tab": "fec5d0ef82d11202",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "251749e4ada3b1f9",
        "type": "ui_group",
        "name": "Waterfall Pump",
        "tab": "fec5d0ef82d11202",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9d5f082422dbdebe",
        "type": "ui_group",
        "name": "Aux Equipment",
        "tab": "fec5d0ef82d11202",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "285434a850121b93",
        "type": "ui_group",
        "name": "Temp Trends",
        "tab": "fec5d0ef82d11202",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "066a21337234b47a",
        "type": "ui_tab",
        "name": "Light Control",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0445cad617fe0ccb",
        "type": "ui_tab",
        "name": "Runtime Schedule",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "39acbe81a22bf80e",
        "type": "ui_group",
        "name": "Main Pump",
        "tab": "0445cad617fe0ccb",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e3e0e5c332e9618c",
        "type": "ui_group",
        "name": "Waterfall Pump",
        "tab": "0445cad617fe0ccb",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "37cbc9f43274594d",
        "type": "ui_group",
        "name": "Cleaner Pump",
        "tab": "0445cad617fe0ccb",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4ea8c703ae32cbf1",
        "type": "ui_tab",
        "name": "Set Points",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0ad4b2d3d483cbb8",
        "type": "ui_group",
        "name": "Temp Setpoints",
        "tab": "4ea8c703ae32cbf1",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bc3794c2c01be789",
        "type": "ui_group",
        "name": "Pump Setpoints",
        "tab": "4ea8c703ae32cbf1",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c278999ad1b0f8cf",
        "type": "ui_group",
        "name": "Ramp Up Setpoints",
        "tab": "4ea8c703ae32cbf1",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "96dcd9d92e4bf294",
        "type": "ui_tab",
        "name": "PC Controls",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "25a4fee4fe7fedea",
        "type": "ui_group",
        "name": "Col1",
        "tab": "96dcd9d92e4bf294",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "248a3e4f25993b9c",
        "type": "ui_group",
        "name": "Col2",
        "tab": "96dcd9d92e4bf294",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "36f48cd0ba5a1f91",
        "type": "ui_group",
        "name": "Col3",
        "tab": "96dcd9d92e4bf294",
        "order": 3,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6d24f07d21175af6",
        "type": "ui_group",
        "name": "Col4",
        "tab": "96dcd9d92e4bf294",
        "order": 4,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "59874744e0bb0b76",
        "type": "ui_spacer",
        "z": "fc862c76013511be",
        "name": "spacer",
        "group": "39acbe81a22bf80e",
        "order": 12,
        "width": 3,
        "height": 1
    },
    {
        "id": "ca399de32656939b",
        "type": "ui_spacer",
        "z": "fc862c76013511be",
        "name": "spacer",
        "group": "39acbe81a22bf80e",
        "order": 13,
        "width": 3,
        "height": 1
    },
    {
        "id": "0feff56cd811069e",
        "type": "ui_spacer",
        "z": "fc862c76013511be",
        "name": "spacer",
        "group": "e3e0e5c332e9618c",
        "order": 12,
        "width": 3,
        "height": 1
    },
    {
        "id": "6dceef1de19f9f18",
        "type": "ui_spacer",
        "z": "fc862c76013511be",
        "name": "spacer",
        "group": "e3e0e5c332e9618c",
        "order": 13,
        "width": 3,
        "height": 1
    },
    {
        "id": "1a9d4d6f07ac90f6",
        "type": "ui_spacer",
        "z": "fc862c76013511be",
        "name": "spacer",
        "group": "37cbc9f43274594d",
        "order": 12,
        "width": 3,
        "height": 1
    },
    {
        "id": "24c5cb3614738685",
        "type": "ui_spacer",
        "z": "fc862c76013511be",
        "name": "spacer",
        "group": "37cbc9f43274594d",
        "order": 13,
        "width": 3,
        "height": 1
    },
    {
        "id": "e8e8563c05d751a2",
        "type": "ui_spacer",
        "z": "fc862c76013511be",
        "name": "spacer",
        "group": "6b1816eb6b29a73a",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "6e8ea74eaf2b3598",
        "type": "ui_spacer",
        "z": "fc862c76013511be",
        "name": "spacer",
        "group": "251749e4ada3b1f9",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "0f5b86a0058e1927",
        "type": "ui_spacer",
        "z": "fc862c76013511be",
        "name": "spacer",
        "group": "9d5f082422dbdebe",
        "order": 7,
        "width": 3,
        "height": 1
    },
    {
        "id": "5a361090d336a38a",
        "type": "ui_spacer",
        "z": "fc862c76013511be",
        "name": "spacer",
        "group": "9d5f082422dbdebe",
        "order": 10,
        "width": 3,
        "height": 1
    },
    {
        "id": "6ff31242.c8bfbc",
        "type": "ui_group",
        "name": "Actions",
        "tab": "96dcd9d92e4bf294",
        "order": 5,
        "disp": true,
        "width": "6"
    },
    {
        "id": "55aec98c4f8831bd",
        "type": "ui_group",
        "name": "Light Control Panel",
        "tab": "d652aefcd0c04a11",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d652aefcd0c04a11",
        "type": "ui_tab",
        "name": "Light Control ",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "54f2045ef21b4429",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Run Pump",
        "func": "// Pump Run node creates the hex command for running\n// the pump before sending it to the pump.  The command\n// must be sent in intervals to the pump not to exceed \n// 1 minute or the pump will stop running.  \n\n// 15 address\n// 41 function\n// 20 ack\n// 518C CRC16 modbus\n\nif (msg.payload === 1) {\n    msg.payload = Buffer.from(\"154120518C\", \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "1d87faf5f9b19cd2"
            ]
        ]
    },
    {
        "id": "fd61f2e31beb8db1",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Stop Pump",
        "func": "// Pump Stop node creates the hex command for stopping\n// the pump before sending it to the pump\n// 15 address\n// 42 function\n// 20 ack\n// 517C CRC16 modbus\n\nif (msg.payload === 0) {\n    await delay(500);\n    return [{ payload:Buffer.from(\"154220517C\",\"hex\")}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 460,
        "wires": [
            [
                "1d87faf5f9b19cd2"
            ]
        ]
    },
    {
        "id": "b1687b75a4994a1c",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Set Variables",
        "func": "if (msg.topic === \"MainPumpSP\") {\n    global.set('mainpumpsd', msg.payload);\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\nif (msg.topic === \"PrimePumpSP\") {\n    global.set('primepumpsd', msg.payload);\n}\nif (msg.topic === \"MainPumpHeaterSP\") {\n    global.set('heaterpumpsd', msg.payload);\n}\nif (msg.topic === \"MainPumpCleanerSP\") {\n    global.set('cleanerpumpsd', msg.payload);\n}\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 740,
        "wires": [
            [
                "1d87faf5f9b19cd2"
            ]
        ]
    },
    {
        "id": "fed9eca8c115f8f7",
        "type": "tcp request",
        "z": "fc862c76013511be",
        "name": "",
        "server": "127.0.0.1",
        "port": "23",
        "out": "sit",
        "ret": "buffer",
        "splitc": " ",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1140,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "99e32416bf897a48",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Pump Status",
        "func": "// Pump status node creates the hex command for pump run \n// status before sending it to the pump\n// 15 address\n// 43 function\n// 20 ack\n// 50EC CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump status\n    msg.payload=Buffer.from(\"15432050EC\",\"hex\");\n    await delay(600);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 280,
        "wires": [
            [
                "1d87faf5f9b19cd2"
            ]
        ]
    },
    {
        "id": "d1221a66dc5a0d51",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Pump Status",
        "func": "var msg2 = 0;\n\nif(msg.payload[1] === 67 && msg.payload[0] === 21) {\n    if(msg.payload[3] === 0) { msg.payload=0 }\n    if(msg.payload[3] === 11) { msg.payload=1}\n    if(msg.payload[3] === 32) { msg.payload=2}\n    global.set('mainpump', msg.payload);\n    \n    if(msg.payload === 1){\n        msg2 = 1;\n    }\n    else {\n        msg2 =0;\n    }\n    return [msg, {'payload':msg2}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 500,
        "wires": [
            [
                "f62b243a212c101c"
            ],
            [
                "3503504d9c75cee0"
            ]
        ]
    },
    {
        "id": "381fa309b423e163",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Pump Speed",
        "func": "// Pump speed node creates the hex command for pump RPM\n// status before sending it to the pump\n// 15 address\n// 45 function\n// 20 ack\n// 00 Page\n// 00 register address\n// 3D05 CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump speed\n    msg.payload=Buffer.from(\"15452000003D05\",\"hex\");\n    await delay(700);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 320,
        "wires": [
            [
                "1d87faf5f9b19cd2"
            ]
        ]
    },
    {
        "id": "6f3a4ba666f30cee",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Pump Speed",
        "func": "var buff = Buffer.from(msg.payload);\n\nif (msg.payload[3] === 0 && msg.payload[4] === 0 && msg.payload[0] === 21 && buff.length === 9) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 540,
        "wires": [
            [
                "53828d7666db70e3"
            ]
        ]
    },
    {
        "id": "b39ea996281f73fe",
        "type": "trigger",
        "z": "fc862c76013511be",
        "name": "Keep Alive Pulse",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "54f2045ef21b4429",
                "dac0c790b85e1543",
                "da5cb178b77403da",
                "cb3a4990c9aa0728"
            ]
        ]
    },
    {
        "id": "56aba5a761473227",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "HOA_Convert",
        "func": "// HOA_Convert takes the output from the HOA multi-switch\n// and adds payload and commands the eztimer node can use.\n\nflow.set(\"mainpumphoa\", msg.payload, \"storeInFile\");\n\nif(msg.payload==='hand'){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload==='auto'){\n    msg.payload = {'suspended':false};\n    msg.payload = { 'action': 'off' };\n    return msg;\n}\nelse{\n    msg.payload = {'suspended':false};\n    msg.payload = {'action':'off'};\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "cad1af8e0fe2527b"
            ]
        ]
    },
    {
        "id": "cc9b88399e9227d7",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload, 'hex');\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = msg.payload + crcValue;\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 750,
        "y": 780,
        "wires": [
            [
                "b1687b75a4994a1c"
            ]
        ]
    },
    {
        "id": "4fed9c652367c596",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nflow.set(\"mainpumpsp\", msg.payload, \"storeInFile\");\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 820,
        "wires": [
            [
                "cc9b88399e9227d7"
            ]
        ]
    },
    {
        "id": "9b001c7ea7237b0e",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nflow.set(\"primepumpsp\", msg.payload, \"storeInFile\");\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 920,
        "wires": [
            [
                "abb70e0f5644a501"
            ]
        ]
    },
    {
        "id": "f3be368bc5f39a2b",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Pump Watts",
        "func": "var buff = Buffer.from(msg.payload);\n\nif(msg.payload[4] === 1 && msg.payload[0] === 21 && buff.length === 9) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 580,
        "wires": [
            [
                "e1730c723a4aa78b"
            ]
        ]
    },
    {
        "id": "98ae4be973a1cae5",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Pump Amp",
        "func": "// Pump Amp node creates the hex command for pump Amp\n// status before sending it to the pump\n// 15 address\n// 45 function\n// 20 ack\n// 00 Page\n// 01 register address\n// FCC5 CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump amp's\n    msg.payload=Buffer.from(\"1545200001FCC5\",\"hex\");\n    await delay(800);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            [
                "1d87faf5f9b19cd2"
            ]
        ]
    },
    {
        "id": "1d87faf5f9b19cd2",
        "type": "delay",
        "z": "fc862c76013511be",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 900,
        "y": 440,
        "wires": [
            [
                "05fee72ff3039b7c"
            ]
        ]
    },
    {
        "id": "f3a7cc05e7f79a7d",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Set Pump Prime Demand",
        "func": "// Set Pump Prime Demand node creates the hex command \n// for setting pump rpm to prime rpm to starting pump\n// global variables 'primepumpsd' holds the hex command\n// for demand set prime speed\n\nif (msg.payload === 1) {\n    // push prime speed to pump\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(500);\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "1d87faf5f9b19cd2"
            ],
            [
                "c78b3dfd1fe3af5c"
            ]
        ]
    },
    {
        "id": "0188d50db743c20b",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nflow.set(\"heaterpumpsp\", msg.payload, \"storeInFile\");\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1020,
        "wires": [
            [
                "f4047df56e90574e"
            ]
        ]
    },
    {
        "id": "c78b3dfd1fe3af5c",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Set Pump Prime Demand bk",
        "func": "//  Repeats to inusre command makes it to pump.  \n\n// Set Pump Prime Demand node creates the hex command\n// for setting pump rpm to prime rpm to starting pump\n// global variables 'primepumpsd' holds the hex command\n// for demand set prime speed\n\nif (msg.payload === 1) {\n    // push prime speed to pump\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(2000);\n    return [msg, {'payload':1}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 540,
        "wires": [
            [
                "1d87faf5f9b19cd2"
            ],
            [
                "933e80425f88262c"
            ]
        ]
    },
    {
        "id": "933e80425f88262c",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Set Pump Speed Demand",
        "func": "// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 180 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 1) {\n    // push main pump run speed\n    await delay(180000);\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 580,
        "wires": [
            [
                "1d87faf5f9b19cd2"
            ],
            [
                "cf94c8e8475240dd"
            ]
        ]
    },
    {
        "id": "cf94c8e8475240dd",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Set Pump Speed Demand bk",
        "func": "// Repeats command to insure delivery\n\n// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 120 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(2000);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 620,
        "wires": [
            [
                "1d87faf5f9b19cd2"
            ]
        ]
    },
    {
        "id": "3503504d9c75cee0",
        "type": "rbe",
        "z": "fc862c76013511be",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1890,
        "y": 500,
        "wires": [
            [
                "65306905959da81f",
                "49d892ae11e8ab3f"
            ]
        ]
    },
    {
        "id": "30ec39b47e8c8226",
        "type": "link in",
        "z": "fc862c76013511be",
        "name": "link in Freeze MP",
        "links": [
            "66ad04de210bc6da"
        ],
        "x": 205,
        "y": 300,
        "wires": [
            [
                "cad1af8e0fe2527b"
            ]
        ]
    },
    {
        "id": "43c45eb211db33f7",
        "type": "link in",
        "z": "fc862c76013511be",
        "name": "link in Schedule Main",
        "links": [
            "384508808597f11d",
            "eda800d7f3e0a0c5",
            "17cb870608287ede"
        ],
        "x": 205,
        "y": 260,
        "wires": [
            [
                "cad1af8e0fe2527b"
            ]
        ]
    },
    {
        "id": "6107b8eef3365990",
        "type": "comment",
        "z": "fc862c76013511be",
        "name": "Pump #1 control flow",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "ba90b7fd04c89f45",
        "type": "comment",
        "z": "fc862c76013511be",
        "name": "tcp out can be replaced with rtu out if using attached /dev/tty",
        "info": "",
        "x": 1240,
        "y": 400,
        "wires": []
    },
    {
        "id": "5d07bbc04a846472",
        "type": "comment",
        "z": "fc862c76013511be",
        "name": "Interface to adjust pump speeds, converts number into hex, adds pump specific commands and CRC16",
        "info": "",
        "x": 370,
        "y": 700,
        "wires": []
    },
    {
        "id": "7194d7ab1524f75b",
        "type": "trigger",
        "z": "fc862c76013511be",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "num",
        "op2type": "num",
        "duration": "12",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "b5bf345c13d39f87"
            ]
        ]
    },
    {
        "id": "b5bf345c13d39f87",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "HOA Reset",
        "func": "if(msg.payload===1){\n    msg.payload = 'auto';\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            [
                "16e47b9d69ddf5a2"
            ]
        ]
    },
    {
        "id": "8d78cb4c9dec96c2",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Delay Shutoff Timer",
        "func": "if (msg.payload === 'hand') {\n    msg.payload = 1;\n    return msg;\n}\nelse if (msg.payload === 'auto') {\n    msg.payload = 0;\n    return msg;\n}\nelse {\n    msg.payload = 0;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 140,
        "wires": [
            [
                "7194d7ab1524f75b"
            ]
        ]
    },
    {
        "id": "ca79d15095133f74",
        "type": "comment",
        "z": "fc862c76013511be",
        "name": "Pump #1 control flow, stops if left in hand for more than 12 hours",
        "info": "",
        "x": 530,
        "y": 100,
        "wires": []
    },
    {
        "id": "fbd3234cfb524ca2",
        "type": "link in",
        "z": "fc862c76013511be",
        "name": "link in Heater",
        "links": [
            "84ca9cfaa478d24e"
        ],
        "x": 1005,
        "y": 560,
        "wires": [
            [
                "05fee72ff3039b7c"
            ]
        ]
    },
    {
        "id": "b3bf917771922917",
        "type": "comment",
        "z": "fc862c76013511be",
        "name": "Heater Flow Speed Injection",
        "info": "",
        "x": 900,
        "y": 520,
        "wires": []
    },
    {
        "id": "213c29338fd15526",
        "type": "delay",
        "z": "fc862c76013511be",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1380,
        "y": 440,
        "wires": [
            [
                "e354c5c43897fa30"
            ]
        ]
    },
    {
        "id": "e354c5c43897fa30",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Strip CRC from Msg",
        "func": "var recMsg = msg.payload.slice(0, msg.payload.length - 2).toString('hex');\nvar compareMsg = msg.payload.toString('hex').toUpperCase();\n\nmsg.payload = {\n    'lessCRC': recMsg.toString('hex'),\n    'compare': compareMsg.toString('hex').toUpperCase(), \n    'original': msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 500,
        "wires": [
            [
                "c9685539835fef9b"
            ]
        ]
    },
    {
        "id": "c9685539835fef9b",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload.lessCRC, 'hex');\n\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = {\n    'msgCal': msg.payload.lessCRC + crcValue,\n    'compare': msg.payload.compare,\n    'original': msg.payload.original\n};\n\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 1430,
        "y": 540,
        "wires": [
            [
                "b5ddbc8db125a119"
            ]
        ]
    },
    {
        "id": "b5ddbc8db125a119",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Check Original CRC vs Cal CRC",
        "func": "var goodMsg = msg.payload.original;\n\nif ((msg.payload.compare).toUpperCase() === (msg.payload.msgCal).toUpperCase()){\n    return { 'payload': goodMsg};\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 580,
        "wires": [
            [
                "d1221a66dc5a0d51",
                "6f3a4ba666f30cee",
                "f3be368bc5f39a2b"
            ]
        ]
    },
    {
        "id": "928f8984d4ecb436",
        "type": "ui_numeric",
        "z": "fc862c76013511be",
        "name": "",
        "label": "Main Pump Speed",
        "tooltip": "",
        "group": "bc3794c2c01be789",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "MainPumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 430,
        "y": 820,
        "wires": [
            [
                "4fed9c652367c596",
                "0b30c28091104ab6"
            ]
        ]
    },
    {
        "id": "f61ec7973ee38753",
        "type": "ui_numeric",
        "z": "fc862c76013511be",
        "name": "",
        "label": "Prime Pump Speed",
        "tooltip": "",
        "group": "c278999ad1b0f8cf",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "PrimePumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "2500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 430,
        "y": 920,
        "wires": [
            [
                "9b001c7ea7237b0e",
                "6377659631d17adf"
            ]
        ]
    },
    {
        "id": "9531733f5c7bfba7",
        "type": "ui_numeric",
        "z": "fc862c76013511be",
        "name": "",
        "label": "Main Pump Heater Speed",
        "tooltip": "",
        "group": "c278999ad1b0f8cf",
        "order": 5,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "MainPumpHeaterSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "0188d50db743c20b",
                "2da59222b6fa27e9"
            ]
        ]
    },
    {
        "id": "42ca8e2859a1082b",
        "type": "ui_text",
        "z": "fc862c76013511be",
        "group": "6b1816eb6b29a73a",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Power (watts):",
        "format": "{{value/1000}}",
        "layout": "row-spread",
        "className": "wattMPTxt",
        "x": 2100,
        "y": 580,
        "wires": []
    },
    {
        "id": "a75528bc3069b521",
        "type": "ui_gauge",
        "z": "fc862c76013511be",
        "name": "",
        "group": "6b1816eb6b29a73a",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Main Pump Speed",
        "label": "RPM",
        "format": "{{value}}",
        "min": 0,
        "max": "3600",
        "colors": [
            "#ca3838",
            "#ffff00",
            "#00b500"
        ],
        "seg1": "600",
        "seg2": "1800",
        "diff": false,
        "className": "",
        "x": 2110,
        "y": 540,
        "wires": []
    },
    {
        "id": "a8ab80e7a94f08fd",
        "type": "ui_template",
        "z": "fc862c76013511be",
        "group": "6b1816eb6b29a73a",
        "name": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>\n\n<style>\n    .wattMPTxt p {\n    font-size:150%;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2080,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "05fee72ff3039b7c",
        "type": "serial request",
        "z": "fc862c76013511be",
        "name": "Main_Pump",
        "serial": "25c6fe1eed10f361",
        "x": 1130,
        "y": 440,
        "wires": [
            [
                "213c29338fd15526"
            ]
        ]
    },
    {
        "id": "49d892ae11e8ab3f",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Ozone Start Function Relay 1",
        "func": "if(msg.payload === 1){\n    msg.payload = \"gpioset 1 86=1\";\n} else{\n    msg.payload = \"gpioset 1 86=0\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 440,
        "wires": [
            [
                "3ea60d2f4b6ae4fd"
            ]
        ]
    },
    {
        "id": "3ea60d2f4b6ae4fd",
        "type": "exec",
        "z": "fc862c76013511be",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "GPIO Pin 35 Relay 1",
        "x": 2100,
        "y": 380,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "abb70e0f5644a501",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload, 'hex');\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = msg.payload + crcValue;\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 750,
        "y": 880,
        "wires": [
            [
                "b1687b75a4994a1c"
            ]
        ]
    },
    {
        "id": "f4047df56e90574e",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload, 'hex');\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = msg.payload + crcValue;\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 750,
        "y": 980,
        "wires": [
            [
                "b1687b75a4994a1c"
            ]
        ]
    },
    {
        "id": "1a1f3a7a4959116d",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nflow.set(\"cleanerpumpsp\", msg.payload, \"storeInFile\");\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1120,
        "wires": [
            [
                "0ca9085ce10ea93f"
            ]
        ]
    },
    {
        "id": "c306e9b5223d0c0f",
        "type": "ui_numeric",
        "z": "fc862c76013511be",
        "name": "",
        "label": "Main Pump Cleaner Speed",
        "tooltip": "",
        "group": "c278999ad1b0f8cf",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "MainPumpCleanerSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 460,
        "y": 1120,
        "wires": [
            [
                "1a1f3a7a4959116d",
                "4a3ae77e4735a6c2"
            ]
        ]
    },
    {
        "id": "0ca9085ce10ea93f",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload, 'hex');\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = msg.payload + crcValue;\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 750,
        "y": 1080,
        "wires": [
            [
                "b1687b75a4994a1c"
            ]
        ]
    },
    {
        "id": "5cda93a2be5f7137",
        "type": "link in",
        "z": "fc862c76013511be",
        "name": "link in cleaner",
        "links": [
            "318278b259db31f7"
        ],
        "x": 1005,
        "y": 660,
        "wires": [
            [
                "05fee72ff3039b7c"
            ]
        ]
    },
    {
        "id": "3d6dedd1e5ddf1a4",
        "type": "comment",
        "z": "fc862c76013511be",
        "name": "Cleaner Speed Ramp Up",
        "info": "",
        "x": 910,
        "y": 620,
        "wires": []
    },
    {
        "id": "5769d5eebbc2f208",
        "type": "inject",
        "z": "fc862c76013511be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "b0ddddba092efbd3",
                "678c85f482c74e66",
                "63ace2c6d42c1f67",
                "fd1a54701e88aef6"
            ]
        ]
    },
    {
        "id": "b0ddddba092efbd3",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Load Stored Main Pump Speed",
        "func": "msg.payload = flow.get(\"mainpumpsp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 820,
        "wires": [
            [
                "928f8984d4ecb436"
            ]
        ]
    },
    {
        "id": "678c85f482c74e66",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Load Stored Prime Pump Speed",
        "func": "msg.payload = flow.get(\"primepumpsp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 920,
        "wires": [
            [
                "f61ec7973ee38753"
            ]
        ]
    },
    {
        "id": "63ace2c6d42c1f67",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Load Stored Main Heater Speed",
        "func": "msg.payload = flow.get(\"heaterpumpsp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1020,
        "wires": [
            [
                "9531733f5c7bfba7"
            ]
        ]
    },
    {
        "id": "fd1a54701e88aef6",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Load Stored Main Cleaner Speed",
        "func": "msg.payload = flow.get(\"cleanerpumpsp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "c306e9b5223d0c0f"
            ]
        ]
    },
    {
        "id": "d9ca4102405b89c7",
        "type": "inject",
        "z": "fc862c76013511be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "0b3f77c49aab5480"
            ]
        ]
    },
    {
        "id": "0b3f77c49aab5480",
        "type": "function",
        "z": "fc862c76013511be",
        "name": "Load Stored HOA",
        "func": "msg.payload = flow.get(\"mainpumphoa\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 140,
        "wires": [
            [
                "16e47b9d69ddf5a2"
            ]
        ]
    },
    {
        "id": "f67e5ee737f62f24",
        "type": "comment",
        "z": "fc862c76013511be",
        "name": "GPIO can be replaced with Modbus write or get function to control remote I/O",
        "info": "",
        "x": 1910,
        "y": 320,
        "wires": []
    },
    {
        "id": "16e47b9d69ddf5a2",
        "type": "ui_multistate_switch",
        "z": "fc862c76013511be",
        "name": "",
        "group": "6b1816eb6b29a73a",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "HOA Main Pump",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Auto",
                "value": "auto",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Hand",
                "value": "hand",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 390,
        "y": 280,
        "wires": [
            [
                "56aba5a761473227",
                "8d78cb4c9dec96c2"
            ]
        ]
    },
    {
        "id": "cad1af8e0fe2527b",
        "type": "eztimer",
        "z": "fc862c76013511be",
        "name": "Run Main Pool Pump",
        "debug": false,
        "autoname": "04:00:00 - 22:00:00",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "04:00:00",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "num",
        "onvalue": 1,
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": false,
        "offtype": "2",
        "offtimesun": "dusk",
        "offtimetod": "22:00:00",
        "offduration": "00:01:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "num",
        "offvalue": 0,
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": false,
        "resend": false,
        "resendInterval": "0s",
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 140,
        "y": 400,
        "wires": [
            [
                "fd61f2e31beb8db1",
                "b39ea996281f73fe",
                "f3a7cc05e7f79a7d"
            ]
        ]
    },
    {
        "id": "0b30c28091104ab6",
        "type": "ui_digital_display",
        "z": "fc862c76013511be",
        "name": "Main Pump RPM Set",
        "group": "bc3794c2c01be789",
        "order": 2,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 440,
        "y": 780,
        "wires": []
    },
    {
        "id": "6377659631d17adf",
        "type": "ui_digital_display",
        "z": "fc862c76013511be",
        "name": "Prime RPM Set",
        "group": "c278999ad1b0f8cf",
        "order": 4,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 420,
        "y": 880,
        "wires": []
    },
    {
        "id": "2da59222b6fa27e9",
        "type": "ui_digital_display",
        "z": "fc862c76013511be",
        "name": "Main Pump Heater RPM Set",
        "group": "c278999ad1b0f8cf",
        "order": 6,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 460,
        "y": 980,
        "wires": []
    },
    {
        "id": "4a3ae77e4735a6c2",
        "type": "ui_digital_display",
        "z": "fc862c76013511be",
        "name": "Main Pump Cleaner RPM Set",
        "group": "c278999ad1b0f8cf",
        "order": 2,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 460,
        "y": 1080,
        "wires": []
    },
    {
        "id": "f62b243a212c101c",
        "type": "ui_led",
        "z": "fc862c76013511be",
        "order": 4,
        "group": "6b1816eb6b29a73a",
        "width": 0,
        "height": 0,
        "label": "Main Pump Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ffff00",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 1750,
        "y": 440,
        "wires": []
    },
    {
        "id": "65306905959da81f",
        "type": "ui_led",
        "z": "fc862c76013511be",
        "order": 4,
        "group": "9d5f082422dbdebe",
        "width": 0,
        "height": 0,
        "label": "O3 Generator Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 2070,
        "y": 500,
        "wires": []
    },
    {
        "id": "53828d7666db70e3",
        "type": "buffer-parser",
        "z": "fc862c76013511be",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16le",
                "name": "RPM",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "/4",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1910,
        "y": 540,
        "wires": [
            [
                "a75528bc3069b521"
            ]
        ]
    },
    {
        "id": "e1730c723a4aa78b",
        "type": "buffer-parser",
        "z": "fc862c76013511be",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16le",
                "name": "Watts",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "*240",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1910,
        "y": 580,
        "wires": [
            [
                "42ca8e2859a1082b"
            ]
        ]
    },
    {
        "id": "b1c7cf869a9522db",
        "type": "link in",
        "z": "fc862c76013511be",
        "name": "link in Heater Run",
        "links": [
            "743445375384a6ab"
        ],
        "x": 205,
        "y": 500,
        "wires": [
            [
                "cad1af8e0fe2527b"
            ]
        ]
    },
    {
        "id": "7c6bf0833073533a",
        "type": "comment",
        "z": "fc862c76013511be",
        "name": "Heater Start Pump",
        "info": "",
        "x": 90,
        "y": 540,
        "wires": []
    },
    {
        "id": "9aa0d3ec36865d6b",
        "type": "inject",
        "z": "fc862c76013511be",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 40,
        "wires": [
            [
                "7ecc4f8a534011be"
            ]
        ]
    },
    {
        "id": "165e9e0e1f500231",
        "type": "ui_text",
        "z": "fc862c76013511be",
        "group": "285434a850121b93",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 870,
        "y": 40,
        "wires": []
    },
    {
        "id": "7ecc4f8a534011be",
        "type": "moment",
        "z": "fc862c76013511be",
        "name": "",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "America/Chicago",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm a  --  MM/DD/YYYY",
        "locale": "en-US",
        "output": "",
        "outputType": "msg",
        "outTz": "America/Chicago",
        "x": 600,
        "y": 40,
        "wires": [
            [
                "165e9e0e1f500231"
            ]
        ]
    },
    {
        "id": "dac0c790b85e1543",
        "type": "delay",
        "z": "fc862c76013511be",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 360,
        "wires": [
            [
                "98ae4be973a1cae5"
            ]
        ]
    },
    {
        "id": "da5cb178b77403da",
        "type": "delay",
        "z": "fc862c76013511be",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 320,
        "wires": [
            [
                "381fa309b423e163"
            ]
        ]
    },
    {
        "id": "cb3a4990c9aa0728",
        "type": "delay",
        "z": "fc862c76013511be",
        "name": "",
        "pauseType": "delay",
        "timeout": "700",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 280,
        "wires": [
            [
                "99e32416bf897a48"
            ]
        ]
    },
    {
        "id": "e683b82fdda0c206",
        "type": "inject",
        "z": "fc862c76013511be",
        "name": "Poll Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 650,
        "y": 240,
        "wires": [
            [
                "cb3a4990c9aa0728",
                "da5cb178b77403da",
                "dac0c790b85e1543"
            ]
        ]
    },
    {
        "id": "b860ab8510bb2d12",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload, 'hex');\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = msg.payload + crcValue;\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 770,
        "y": 800,
        "wires": [
            [
                "d0dd9ac8b3a648a5"
            ]
        ]
    },
    {
        "id": "530ec8b3a86c0d3d",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nflow.set(\"wfpumpsp\", msg.payload, \"storeInFile\");\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 840,
        "wires": [
            [
                "b860ab8510bb2d12"
            ]
        ]
    },
    {
        "id": "019c5a29ed7cbc21",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Run Pump",
        "func": "if (msg.payload === 1) {\n    // run pump command\n    msg.payload = Buffer.from(\"154120518C\", \"hex\");\n    await delay(500);\n    return msg;\n}\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "d121a68409061fff"
            ]
        ]
    },
    {
        "id": "e4a81ea3be64d3ee",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Stop Pump",
        "func": "if (msg.payload === 0) {\n    await delay(500);\n    return [{ payload:Buffer.from(\"154220517C\",\"hex\")}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 440,
        "wires": [
            [
                "d121a68409061fff"
            ]
        ]
    },
    {
        "id": "9a0a9048b3dd7db5",
        "type": "tcp request",
        "z": "858ef5bc19b0331b",
        "name": "",
        "server": "127.0.0.1",
        "port": "23",
        "out": "sit",
        "ret": "buffer",
        "splitc": " ",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1100,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c323fbfb0df78347",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Pump Status",
        "func": "// Pump status node creates the hex command for pump run\n// status before sending it to the pump\n// 15 address\n// 43 function\n// 20 ack\n// 50EC CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump status\n    msg.payload=Buffer.from(\"15432050EC\",\"hex\");\n    await delay(600);\n    return msg;\n}\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 260,
        "wires": [
            [
                "d121a68409061fff"
            ]
        ]
    },
    {
        "id": "4dcbde94f8dc57d4",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Pump Status",
        "func": "var msg2 = 0;\n\nif (msg.payload[1] === 67 && msg.payload[0] === 21) {\n    if (msg.payload[3] === 0) { msg.payload = 0 }\n    if (msg.payload[3] === 11) { msg.payload = 1 }\n    if (msg.payload[3] === 32) { msg.payload = 2 }\n    global.set('waterfallpump', msg.payload);\n    \n    if (msg.payload === 1) {\n        msg2 = 1;\n    }\n    else {\n        msg2 = 0;\n    }\n    return [msg, { 'payload': msg2 }];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 500,
        "wires": [
            [
                "5058b0dbbbd7d58e"
            ],
            []
        ]
    },
    {
        "id": "da977d0c427b64fb",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Pump Speed",
        "func": "// Pump speed node creates the hex command for pump RPM\n// status before sending it to the pump\n// 15 address\n// 45 function\n// 20 ack\n// 00 Page\n// 00 register address\n// 3D05 CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump rpm\n    msg.payload=Buffer.from(\"15452000003D05\",\"hex\");\n    await delay(700);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 300,
        "wires": [
            [
                "d121a68409061fff"
            ]
        ]
    },
    {
        "id": "fea706a5144fab95",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Pump Speed",
        "func": "var buff = Buffer.from(msg.payload);\n\nif (msg.payload[3] === 0 && msg.payload[4] === 0 && msg.payload[0] === 21 && buff.length === 9) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 540,
        "wires": [
            [
                "04e1771223409b9f"
            ]
        ]
    },
    {
        "id": "6258f1c553174d16",
        "type": "trigger",
        "z": "858ef5bc19b0331b",
        "name": "Keep Alive Pulse",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 410,
        "y": 380,
        "wires": [
            [
                "019c5a29ed7cbc21",
                "a5f3248b6d483250",
                "3f4547d716732ca8",
                "d3fb0387daf83b2b"
            ]
        ]
    },
    {
        "id": "23d694a92ee7000c",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "HOA_Convert",
        "func": "flow.set(\"wfpumphoa\", msg.payload, \"storeInFile\");\n\nif(msg.payload==='hand'){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload==='auto'){\n    msg.payload = {'suspended':false};\n    msg.payload = { 'action': 'off' };\n    return msg;\n}\nelse{\n    msg.payload = {'suspended':false};\n    msg.payload = {'action':'off'};\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 260,
        "wires": [
            [
                "68a582e9d8b9a8c7"
            ]
        ]
    },
    {
        "id": "d0dd9ac8b3a648a5",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Set Variables",
        "func": "if (msg.topic === \"WFPumpSP\") {\n    global.set('wfpumpsd', msg.payload);\n    // push waterfall pump run speed\n    msg.payload = Buffer.from(global.get('wfpumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 760,
        "wires": [
            [
                "d121a68409061fff"
            ]
        ]
    },
    {
        "id": "919f7a901c3b711d",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Pump Amp",
        "func": "// Pump Amp node creates the hex command for pump Amp\n// status before sending it to the pump\n// 15 address\n// 45 function\n// 20 ack\n// 00 Page\n// 01 register address\n// FCC5 CRC16 modbus\n\nif(msg.payload === 1) {\n    // check pump amp's\n    msg.payload=Buffer.from(\"1545200001FCC5\",\"hex\");\n    await delay(800);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            [
                "d121a68409061fff"
            ]
        ]
    },
    {
        "id": "c0a6b1333cf19b58",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Pump Watts",
        "func": "var buff = Buffer.from(msg.payload);\n\nif (msg.payload[4] === 1 && msg.payload[0] === 21 && buff.length === 9) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 580,
        "wires": [
            [
                "3e36177fc4f83ff6"
            ]
        ]
    },
    {
        "id": "97339987aef959db",
        "type": "trigger",
        "z": "858ef5bc19b0331b",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "num",
        "op2type": "num",
        "duration": "4",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "1afb688403f2c447"
            ]
        ]
    },
    {
        "id": "43493c2dead567f4",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Delay Shutoff Timer",
        "func": "if (msg.payload === 'hand') {\n    msg.payload = 1;\n    return msg;\n}\nelse if (msg.payload === 'auto') {\n    msg.payload = 0;\n    return msg;\n}\nelse {\n    msg.payload = 0;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "97339987aef959db"
            ]
        ]
    },
    {
        "id": "1afb688403f2c447",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "HOA Reset",
        "func": "if(msg.payload===1){\n    msg.payload = 'auto';\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            [
                "100481a05f303c1d"
            ]
        ]
    },
    {
        "id": "a56fcd4b2c46eb0b",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Set Pump Prime Demand",
        "func": "if (msg.payload === 1) {\n    // push prime pump speed\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(500);\n    return [msg,{'payload':1}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 500,
        "wires": [
            [
                "d121a68409061fff"
            ],
            [
                "5e3b84b2b2d7e11c"
            ]
        ]
    },
    {
        "id": "d121a68409061fff",
        "type": "delay",
        "z": "858ef5bc19b0331b",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 880,
        "y": 440,
        "wires": [
            [
                "65f9fc883ab5cfb3"
            ]
        ]
    },
    {
        "id": "5e3b84b2b2d7e11c",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Set Pump Prime Demand bk",
        "func": "if (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(2000);\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 540,
        "wires": [
            [
                "d121a68409061fff"
            ],
            [
                "f2624d6d3efa71aa"
            ]
        ]
    },
    {
        "id": "f2624d6d3efa71aa",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Set Pump Speed Demand",
        "func": "if (msg.payload === 1) {\n    // push waterfall pump run speed\n    await delay(180000);\n    msg.payload = Buffer.from(global.get('wfpumpsd'), \"hex\");\n    return [msg,{'payload':1}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 580,
        "wires": [
            [
                "d121a68409061fff"
            ],
            [
                "ce334addbfcd64ce"
            ]
        ]
    },
    {
        "id": "ce334addbfcd64ce",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Set Pump Prime Demand bk",
        "func": "if (msg.payload === 1) {\n    // push waterfall pump run speed\n    msg.payload = Buffer.from(global.get('wfpumpsd'), \"hex\");\n    await delay(2000);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 620,
        "wires": [
            [
                "d121a68409061fff"
            ]
        ]
    },
    {
        "id": "4789b7aa78ca9a05",
        "type": "link in",
        "z": "858ef5bc19b0331b",
        "name": "link in Freeze WF",
        "links": [
            "9c69d0f7a4b8bab2"
        ],
        "x": 215,
        "y": 460,
        "wires": [
            [
                "68a582e9d8b9a8c7"
            ]
        ]
    },
    {
        "id": "6165c76b8de1a8fe",
        "type": "link in",
        "z": "858ef5bc19b0331b",
        "name": "link in Schedule WF",
        "links": [
            "241a6fe3e6227270"
        ],
        "x": 215,
        "y": 520,
        "wires": [
            [
                "68a582e9d8b9a8c7"
            ]
        ]
    },
    {
        "id": "4e72f76c1731df0f",
        "type": "comment",
        "z": "858ef5bc19b0331b",
        "name": "Pump #2 control flow, stops if left in hand for more than 4 hours",
        "info": "",
        "x": 550,
        "y": 80,
        "wires": []
    },
    {
        "id": "4fcffab69ce86c78",
        "type": "comment",
        "z": "858ef5bc19b0331b",
        "name": "Interface to adjust pump speeds, converts number into hex, adds pump specific commands and CRC16",
        "info": "",
        "x": 350,
        "y": 720,
        "wires": []
    },
    {
        "id": "0c2872e08b3cf05e",
        "type": "comment",
        "z": "858ef5bc19b0331b",
        "name": "tcp out can be replaced with rtu out if using attached /dev/tty",
        "info": "",
        "x": 1240,
        "y": 300,
        "wires": []
    },
    {
        "id": "28205eb50f91f486",
        "type": "delay",
        "z": "858ef5bc19b0331b",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1360,
        "y": 440,
        "wires": [
            [
                "e7c23294e99c2a9a"
            ]
        ]
    },
    {
        "id": "e7c23294e99c2a9a",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Strip CRC from Msg",
        "func": "var recMsg = msg.payload.slice(0, msg.payload.length - 2).toString('hex');\nvar compareMsg = msg.payload.toString('hex').toUpperCase();\n\nmsg.payload = {\n    'lessCRC': recMsg.toString('hex'),\n    'compare': compareMsg.toString('hex').toUpperCase(),\n    'original': msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 500,
        "wires": [
            [
                "15b3b90337824ebb"
            ]
        ]
    },
    {
        "id": "15b3b90337824ebb",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "CRC16_Modbus Least Bit to Most Bit",
        "func": "var buff = Buffer.from(msg.payload.lessCRC, 'hex');\n\nvar crcValue = (dec2hexUi8Arr(CRC.crc16modbus(buff))).toUpperCase();\n\nmsg.payload = {\n    'msgCal': msg.payload.lessCRC + crcValue,\n    'compare': msg.payload.compare,\n    'original': msg.payload.original\n};\n\nreturn msg;\n\nfunction dec2hexUi8Arr(n) {\n    var hex = (n).toString(16);\n    var padLen = hex.length + (hex.length % 2);\n    var hexPad = hex.padStart(Math.max(padLen, 2), '0');\n    var pairs = (Buffer.from(hexPad.match(/../g).reverse().map(p => parseInt(p, 16)))).toString('hex');\n    return pairs;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "CRC",
                "module": "crc"
            }
        ],
        "x": 1410,
        "y": 540,
        "wires": [
            [
                "a13788ca93e059d0"
            ]
        ]
    },
    {
        "id": "a13788ca93e059d0",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Check Original CRC vs Cal CRC",
        "func": "var goodMsg = msg.payload.original;\n\nif ((msg.payload.compare).toUpperCase() === (msg.payload.msgCal).toUpperCase()) {\n    return { 'payload': goodMsg };\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 580,
        "wires": [
            [
                "4dcbde94f8dc57d4",
                "fea706a5144fab95",
                "c0a6b1333cf19b58"
            ]
        ]
    },
    {
        "id": "c939e5afa9f370af",
        "type": "ui_numeric",
        "z": "858ef5bc19b0331b",
        "name": "",
        "label": "Waterfall Pump Speed",
        "tooltip": "",
        "group": "bc3794c2c01be789",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "WFPumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "2000",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 440,
        "y": 840,
        "wires": [
            [
                "530ec8b3a86c0d3d",
                "3ed9c3139c75b1e0"
            ]
        ]
    },
    {
        "id": "13cd477496a5be5e",
        "type": "ui_text",
        "z": "858ef5bc19b0331b",
        "group": "251749e4ada3b1f9",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Power (watts):",
        "format": "{{value/1000}}",
        "layout": "row-spread",
        "className": "wattWFTxt",
        "x": 2040,
        "y": 580,
        "wires": []
    },
    {
        "id": "71e4fdb4c2c5278c",
        "type": "ui_gauge",
        "z": "858ef5bc19b0331b",
        "name": "",
        "group": "251749e4ada3b1f9",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Waterfall Pump Speed",
        "label": "RPM",
        "format": "{{value}}",
        "min": 0,
        "max": "3600",
        "colors": [
            "#ca3838",
            "#ffff00",
            "#00b500"
        ],
        "seg1": "600",
        "seg2": "1800",
        "diff": false,
        "className": "",
        "x": 2060,
        "y": 540,
        "wires": []
    },
    {
        "id": "d2c0c2380d478410",
        "type": "ui_template",
        "z": "858ef5bc19b0331b",
        "group": "251749e4ada3b1f9",
        "name": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>\n\n<style>\n    .wattWFTxt p {\n    font-size:150%;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2020,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "65f9fc883ab5cfb3",
        "type": "serial request",
        "z": "858ef5bc19b0331b",
        "name": "Waterfall_Pump",
        "serial": "eafeda6c925d16dc",
        "x": 1100,
        "y": 440,
        "wires": [
            [
                "28205eb50f91f486"
            ]
        ]
    },
    {
        "id": "c2bb88f74e69a89f",
        "type": "inject",
        "z": "858ef5bc19b0331b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 780,
        "wires": [
            [
                "dc6027debf84f7ee"
            ]
        ]
    },
    {
        "id": "dc6027debf84f7ee",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Load Stored Waterfall Pump Speed",
        "func": "msg.payload = flow.get(\"wfpumpsp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 840,
        "wires": [
            [
                "c939e5afa9f370af"
            ]
        ]
    },
    {
        "id": "135ca53dd4c46636",
        "type": "inject",
        "z": "858ef5bc19b0331b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "2eefd7160ffb284e"
            ]
        ]
    },
    {
        "id": "2eefd7160ffb284e",
        "type": "function",
        "z": "858ef5bc19b0331b",
        "name": "Load Stored HOA",
        "func": "msg.payload = flow.get(\"wfpumphoa\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 140,
        "wires": [
            [
                "100481a05f303c1d"
            ]
        ]
    },
    {
        "id": "100481a05f303c1d",
        "type": "ui_multistate_switch",
        "z": "858ef5bc19b0331b",
        "name": "",
        "group": "251749e4ada3b1f9",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "HOA Waterfall Pump",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Auto",
                "value": "auto",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Hand",
                "value": "hand",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "23d694a92ee7000c",
                "43493c2dead567f4"
            ]
        ]
    },
    {
        "id": "68a582e9d8b9a8c7",
        "type": "eztimer",
        "z": "858ef5bc19b0331b",
        "name": "Run Waterfall Pool Pump",
        "debug": false,
        "autoname": "12:30:00 - 13:30:00",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "12:30:00",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "num",
        "onvalue": 1,
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": false,
        "offtype": "2",
        "offtimesun": "dusk",
        "offtimetod": "13:30:00",
        "offduration": "00:01:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "num",
        "offvalue": 0,
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": false,
        "resend": false,
        "resendInterval": "0s",
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": true,
        "sun": true,
        "x": 150,
        "y": 380,
        "wires": [
            [
                "e4a81ea3be64d3ee",
                "6258f1c553174d16",
                "a56fcd4b2c46eb0b"
            ]
        ]
    },
    {
        "id": "3ed9c3139c75b1e0",
        "type": "ui_digital_display",
        "z": "858ef5bc19b0331b",
        "name": "Waterfall RPM Set",
        "group": "bc3794c2c01be789",
        "order": 4,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 430,
        "y": 800,
        "wires": []
    },
    {
        "id": "5058b0dbbbd7d58e",
        "type": "ui_led",
        "z": "858ef5bc19b0331b",
        "order": 4,
        "group": "251749e4ada3b1f9",
        "width": 0,
        "height": 0,
        "label": "Waterfall Pump Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ffff00",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 1850,
        "y": 500,
        "wires": []
    },
    {
        "id": "04e1771223409b9f",
        "type": "buffer-parser",
        "z": "858ef5bc19b0331b",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16le",
                "name": "RPM",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "/4",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1870,
        "y": 540,
        "wires": [
            [
                "71e4fdb4c2c5278c"
            ]
        ]
    },
    {
        "id": "3e36177fc4f83ff6",
        "type": "buffer-parser",
        "z": "858ef5bc19b0331b",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16le",
                "name": "Watts",
                "offset": 5,
                "length": 1,
                "offsetbit": 0,
                "scale": "*240",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "return",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 1870,
        "y": 580,
        "wires": [
            [
                "13cd477496a5be5e"
            ]
        ]
    },
    {
        "id": "a5f3248b6d483250",
        "type": "delay",
        "z": "858ef5bc19b0331b",
        "name": "",
        "pauseType": "delay",
        "timeout": "300",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 340,
        "wires": [
            [
                "919f7a901c3b711d"
            ]
        ]
    },
    {
        "id": "3f4547d716732ca8",
        "type": "delay",
        "z": "858ef5bc19b0331b",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 300,
        "wires": [
            [
                "da977d0c427b64fb"
            ]
        ]
    },
    {
        "id": "d3fb0387daf83b2b",
        "type": "delay",
        "z": "858ef5bc19b0331b",
        "name": "",
        "pauseType": "delay",
        "timeout": "700",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 260,
        "wires": [
            [
                "c323fbfb0df78347"
            ]
        ]
    },
    {
        "id": "ffd5df44547603cc",
        "type": "inject",
        "z": "858ef5bc19b0331b",
        "name": "Poll Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 390,
        "y": 340,
        "wires": [
            [
                "d3fb0387daf83b2b",
                "3f4547d716732ca8",
                "a5f3248b6d483250"
            ]
        ]
    },
    {
        "id": "ae3635bc55df903d",
        "type": "function",
        "z": "1cd40c5c330699d1",
        "name": "HOA_Convert",
        "func": "flow.set(\"cleanerpumphoa\", msg.payload, \"storeInFile\");\n\nif(msg.payload==='hand'){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload==='auto'){\n    msg.payload = {'suspended':false};\n    return msg;\n}\nelse{\n    msg.payload = {'suspended':false};\n    msg.payload = {'action':'off'};\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            [
                "ee2a17fae19cae3e"
            ]
        ]
    },
    {
        "id": "4b0f39bc3d215c7d",
        "type": "link in",
        "z": "1cd40c5c330699d1",
        "name": "link in Freeze Cleaner",
        "links": [
            "2d08c84ad095b3de"
        ],
        "x": 225,
        "y": 220,
        "wires": [
            [
                "ee2a17fae19cae3e"
            ]
        ]
    },
    {
        "id": "f19810f8e9081743",
        "type": "link in",
        "z": "1cd40c5c330699d1",
        "name": "link in Schedule Cleaner",
        "links": [
            "5a0de2675ec29e48"
        ],
        "x": 225,
        "y": 260,
        "wires": [
            [
                "ee2a17fae19cae3e"
            ]
        ]
    },
    {
        "id": "f61fca8e6a4d6001",
        "type": "comment",
        "z": "1cd40c5c330699d1",
        "name": "Pool Cleaner Flow - Controls relay through Relay",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "4b08b2a9cecff14a",
        "type": "function",
        "z": "1cd40c5c330699d1",
        "name": "Cleaner Start Function Relay 2",
        "func": "if(msg.payload === 1){\n    global.set('cleanerpump', msg.payload);\n    msg.payload = \"gpioset 1 85=1\";\n} else{\n    global.set('cleanerpump', msg.payload);\n    msg.payload = \"gpioset 1 85=0\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 280,
        "wires": [
            [
                "f49537cfe67883a5"
            ]
        ]
    },
    {
        "id": "f49537cfe67883a5",
        "type": "exec",
        "z": "1cd40c5c330699d1",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "GPIO Pin 33 Relay 2",
        "x": 1020,
        "y": 280,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "f40b58c464ff0e92",
        "type": "function",
        "z": "1cd40c5c330699d1",
        "name": "Set Pump Speed Demand",
        "func": "// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 180 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 1) {\n    // push main pump run speed\n    await delay(180000);\n    msg.payload = Buffer.from(global.get('cleanerpumpsd'), \"hex\");\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 440,
        "wires": [
            [
                "318278b259db31f7"
            ],
            [
                "ad85b3b77e82f65a"
            ]
        ]
    },
    {
        "id": "ad85b3b77e82f65a",
        "type": "function",
        "z": "1cd40c5c330699d1",
        "name": "Set Pump Speed Demand bk",
        "func": "// Repeats command to insure delivery\n\n// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 120 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('cleanerpumpsd'), \"hex\");\n    await delay(2000);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 480,
        "wires": [
            [
                "318278b259db31f7"
            ]
        ]
    },
    {
        "id": "318278b259db31f7",
        "type": "link out",
        "z": "1cd40c5c330699d1",
        "name": "link out cleaner",
        "mode": "link",
        "links": [
            "5cda93a2be5f7137"
        ],
        "x": 935,
        "y": 440,
        "wires": []
    },
    {
        "id": "50f8c9736e830f9c",
        "type": "function",
        "z": "1cd40c5c330699d1",
        "name": "Set Pump Speed Demand",
        "func": "// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 180 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 0) {\n    // push main pump run speed\n    await delay(180000);\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 520,
        "wires": [
            [
                "318278b259db31f7"
            ],
            [
                "728be8eddeefc174"
            ]
        ]
    },
    {
        "id": "728be8eddeefc174",
        "type": "function",
        "z": "1cd40c5c330699d1",
        "name": "Set Pump Speed Demand bk",
        "func": "// Repeats command to insure delivery\n\n// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 120 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 0) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(2000);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 560,
        "wires": [
            [
                "318278b259db31f7"
            ]
        ]
    },
    {
        "id": "d985ff26f0381369",
        "type": "comment",
        "z": "1cd40c5c330699d1",
        "name": "Ramp up main pump speed with cleaner",
        "info": "",
        "x": 740,
        "y": 400,
        "wires": []
    },
    {
        "id": "5b74d577eaecd25e",
        "type": "inject",
        "z": "1cd40c5c330699d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "92dd48293b75669f"
            ]
        ]
    },
    {
        "id": "92dd48293b75669f",
        "type": "function",
        "z": "1cd40c5c330699d1",
        "name": "Load Stored HOA",
        "func": "msg.payload = flow.get(\"cleanerpumphoa\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 160,
        "wires": [
            [
                "926fba7a6463eb30"
            ]
        ]
    },
    {
        "id": "ee575b126ecc57a3",
        "type": "comment",
        "z": "1cd40c5c330699d1",
        "name": "GPIO can be replaced with Modbus write or get function to control remote I/O",
        "info": "",
        "x": 1190,
        "y": 220,
        "wires": []
    },
    {
        "id": "926fba7a6463eb30",
        "type": "ui_multistate_switch",
        "z": "1cd40c5c330699d1",
        "name": "",
        "group": "9d5f082422dbdebe",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "HOA Cleaner Pump",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Auto",
                "value": "auto",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Hand",
                "value": "hand",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "ae3635bc55df903d"
            ]
        ]
    },
    {
        "id": "ee2a17fae19cae3e",
        "type": "eztimer",
        "z": "1cd40c5c330699d1",
        "name": "Run Cleaner Pool Pump",
        "debug": false,
        "autoname": "04:30:00 - 11:00:00",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "04:30:00",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "num",
        "onvalue": 1,
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": false,
        "offtype": "2",
        "offtimesun": "dusk",
        "offtimetod": "11:00:00",
        "offduration": "00:01:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "num",
        "offvalue": 0,
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": false,
        "resend": false,
        "resendInterval": "0s",
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 410,
        "y": 220,
        "wires": [
            [
                "ef4d5857c6dea225",
                "4b08b2a9cecff14a",
                "f40b58c464ff0e92",
                "50f8c9736e830f9c"
            ]
        ]
    },
    {
        "id": "ef4d5857c6dea225",
        "type": "ui_led",
        "z": "1cd40c5c330699d1",
        "order": 3,
        "group": "9d5f082422dbdebe",
        "width": 0,
        "height": 0,
        "label": "Pool Cleaner Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 630,
        "y": 220,
        "wires": []
    },
    {
        "id": "287f3b1be8437fec",
        "type": "comment",
        "z": "11549a536db24124",
        "name": "Future for Heater/Cooler Pump Run",
        "info": "",
        "x": 180,
        "y": 20,
        "wires": []
    },
    {
        "id": "84ca9cfaa478d24e",
        "type": "link out",
        "z": "11549a536db24124",
        "name": "link out Heater",
        "mode": "link",
        "links": [
            "fbd3234cfb524ca2"
        ],
        "x": 1175,
        "y": 260,
        "wires": []
    },
    {
        "id": "a8ab0b76b7a0a69e",
        "type": "function",
        "z": "11549a536db24124",
        "name": "Set Variables",
        "func": "if (msg.topic === \"HeaterSP\") {\n    global.set('poolTempSP', msg.payload);\n    flow.set(\"heatersp\", msg.payload, \"storeInFile\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "c8f0fd221b4f5faa",
        "type": "ui_numeric",
        "z": "11549a536db24124",
        "name": "",
        "label": "Heater Set Point",
        "tooltip": "",
        "group": "0ad4b2d3d483cbb8",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "HeaterSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "65",
        "max": "85",
        "step": "1",
        "className": "",
        "x": 420,
        "y": 560,
        "wires": [
            [
                "d1c097958f69c96e",
                "a8ab0b76b7a0a69e"
            ]
        ]
    },
    {
        "id": "08643e682528106b",
        "type": "inject",
        "z": "11549a536db24124",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "0aaebc6af24b3823"
            ]
        ]
    },
    {
        "id": "0aaebc6af24b3823",
        "type": "function",
        "z": "11549a536db24124",
        "name": "Load Stored Heater Setpoint",
        "func": "msg.payload = flow.get(\"heatersp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 560,
        "wires": [
            [
                "c8f0fd221b4f5faa"
            ]
        ]
    },
    {
        "id": "bcb7e3481f970592",
        "type": "inject",
        "z": "11549a536db24124",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "0a4e6f97cf0640c3"
            ]
        ]
    },
    {
        "id": "0a4e6f97cf0640c3",
        "type": "function",
        "z": "11549a536db24124",
        "name": "Load Stored HOA",
        "func": "msg.payload = flow.get(\"heaterhoa\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 140,
        "wires": [
            [
                "6ea7d8541c176943"
            ]
        ]
    },
    {
        "id": "6ea7d8541c176943",
        "type": "ui_multistate_switch",
        "z": "11549a536db24124",
        "name": "",
        "group": "9d5f082422dbdebe",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Heater Control",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "On",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "603ecda815baac31"
            ]
        ]
    },
    {
        "id": "d1c097958f69c96e",
        "type": "ui_digital_display",
        "z": "11549a536db24124",
        "name": "Heater Set Point",
        "group": "0ad4b2d3d483cbb8",
        "order": 2,
        "width": 0,
        "height": 0,
        "digits": "2",
        "decimals": "0",
        "x": 420,
        "y": 500,
        "wires": []
    },
    {
        "id": "603ecda815baac31",
        "type": "trigger",
        "z": "11549a536db24124",
        "name": "Keep Alive Pulse",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 180,
        "y": 260,
        "wires": [
            [
                "657b777878dfbd29"
            ]
        ]
    },
    {
        "id": "657b777878dfbd29",
        "type": "function",
        "z": "11549a536db24124",
        "name": "Check Temp for Heater",
        "func": "var currentTemp = global.get('poolTempSP');\n\nif(currentTemp < global.get('poolTemp')){\n    return [{'payload':1}];\n} \nelse {\n    return [{'payload':0}];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 260,
        "wires": [
            [
                "7125d9a61179e933",
                "5888b99e96efe498",
                "6ca274158f27f682"
            ]
        ]
    },
    {
        "id": "7125d9a61179e933",
        "type": "function",
        "z": "11549a536db24124",
        "name": "HOA_Convert",
        "func": "// HOA_Convert takes the output from the HOA multi-switch\n// and adds payload and commands the eztimer node can use.\n\nif(msg.payload===1){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload===0){\n    msg.payload = {'suspended':false};\n    // msg.payload = { 'action': 'off' };\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 320,
        "wires": [
            [
                "743445375384a6ab"
            ]
        ]
    },
    {
        "id": "5888b99e96efe498",
        "type": "function",
        "z": "11549a536db24124",
        "name": "Turn on Heater",
        "func": "if (msg.payload === 1) {\n    msg.payload = \"gpioset 1 96=1\";\n} else {\n    msg.payload = \"gpioset 1 96=0\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 200,
        "wires": [
            [
                "0abcca7efe0ad1fe"
            ]
        ]
    },
    {
        "id": "7dfd52f0d9fadc0f",
        "type": "function",
        "z": "11549a536db24124",
        "name": "Set Pump Speed Demand",
        "func": "// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 180 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 1) {\n    // push main pump run speed\n    await delay(180000);\n    msg.payload = Buffer.from(global.get('heaterpumpsd'), \"hex\");\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 260,
        "wires": [
            [
                "84ca9cfaa478d24e"
            ],
            [
                "4a90a8b28f8dc143"
            ]
        ]
    },
    {
        "id": "4a90a8b28f8dc143",
        "type": "function",
        "z": "11549a536db24124",
        "name": "Set Pump Speed Demand",
        "func": "// Repeats command to insure delivery\n\n// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 120 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('heaterpumpsd'), \"hex\");\n    await delay(2000);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 300,
        "wires": [
            [
                "84ca9cfaa478d24e"
            ]
        ]
    },
    {
        "id": "971a5754acdd4b7e",
        "type": "function",
        "z": "11549a536db24124",
        "name": "Set Pump Speed Demand",
        "func": "// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 180 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 0) {\n    // push main pump run speed\n    await delay(180000);\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 340,
        "wires": [
            [
                "84ca9cfaa478d24e"
            ],
            [
                "b586bfe0e2f4be83"
            ]
        ]
    },
    {
        "id": "b586bfe0e2f4be83",
        "type": "function",
        "z": "11549a536db24124",
        "name": "Set Pump Speed Demand bk",
        "func": "// Repeats command to insure delivery\n\n// Set Pump Speed Demand node creates the hex command\n// for setting pump rpm to normal speed after 120 seconds\n\n// global variables 'mainpumpsd' holds the hex command\n// for demand set speed\n\nif (msg.payload === 0) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(2000);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "84ca9cfaa478d24e"
            ]
        ]
    },
    {
        "id": "743445375384a6ab",
        "type": "link out",
        "z": "11549a536db24124",
        "name": "link out Heater Run",
        "mode": "link",
        "links": [
            "b1c7cf869a9522db"
        ],
        "x": 365,
        "y": 380,
        "wires": []
    },
    {
        "id": "6ca274158f27f682",
        "type": "rbe",
        "z": "11549a536db24124",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 710,
        "y": 340,
        "wires": [
            [
                "971a5754acdd4b7e"
            ]
        ]
    },
    {
        "id": "0abcca7efe0ad1fe",
        "type": "exec",
        "z": "11549a536db24124",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "GPIO Pin 29 Relay 4",
        "x": 960,
        "y": 200,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "520a59c97cc4fc68",
        "type": "function",
        "z": "4bc6f781bd269603",
        "name": "Lighting on/off Function Relay 3",
        "func": "if(msg.payload === 1){\n    msg.payload = \"gpioset 1 97=1\";\n    global.set('lightStatus', 1);\n} else{\n    msg.payload = \"gpioset 1 97=0\"\n    global.set('lightstatus', 0);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 200,
        "wires": [
            [
                "4cc192507daa3c07"
            ]
        ]
    },
    {
        "id": "4cc192507daa3c07",
        "type": "exec",
        "z": "4bc6f781bd269603",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "GPIO Pin 31 Relay 3",
        "x": 1520,
        "y": 200,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "515302d17d25f128",
        "type": "comment",
        "z": "4bc6f781bd269603",
        "name": "GPIO can be replaced with Modbus write or get function to control remote I/O",
        "info": "",
        "x": 1370,
        "y": 80,
        "wires": []
    },
    {
        "id": "3673cb1518bdd94a",
        "type": "function",
        "z": "4bc6f781bd269603",
        "name": "Calculate Light Pulses",
        "func": "var counter = 0;\nvar numMaxPulse = 14;\n\nif(msg.payload > global.get('pastLight')){\n    counter = msg.payload - global.get('pastLight');\n}\nif (msg.payload < global.get('pastLight')){\n    counter = numMaxPulse - global.get('pastLight');\n    counter = counter + msg.payload;\n}\nif(global.get('lightstatus') === 0){\n    counter = counter + 1;\n}\n\nglobal.set('pastLight',msg.payload);\nflow.set('lightColor', msg.payload, \"storeInFile\");\nreturn [{'payload':counter}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "6ba7dc6493111da1"
            ]
        ]
    },
    {
        "id": "6ba7dc6493111da1",
        "type": "function",
        "z": "4bc6f781bd269603",
        "name": "BLINK n Times",
        "func": "\nvar o = false;\nfor (var i=0; i<(msg.payload*2); i++) {\n    node.send( {payload:+(o=!o)} )\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 160,
        "wires": [
            [
                "628579bfd3d1bfc0"
            ]
        ]
    },
    {
        "id": "628579bfd3d1bfc0",
        "type": "delay",
        "z": "4bc6f781bd269603",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 160,
        "wires": [
            [
                "520a59c97cc4fc68"
            ]
        ]
    },
    {
        "id": "66eca0266687a6b4",
        "type": "delay",
        "z": "4bc6f781bd269603",
        "name": "",
        "pauseType": "delay",
        "timeout": "25",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 260,
        "wires": [
            [
                "520a59c97cc4fc68"
            ]
        ]
    },
    {
        "id": "ca9dba47f9058a14",
        "type": "trigger",
        "z": "4bc6f781bd269603",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "num",
        "duration": "4",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 400,
        "wires": [
            [
                "66eca0266687a6b4"
            ]
        ]
    },
    {
        "id": "138758391f67abe2",
        "type": "comment",
        "z": "4bc6f781bd269603",
        "name": "Shut off Lights if on Longer than 4 hours - Reads light status from remote I/O",
        "info": "",
        "x": 790,
        "y": 340,
        "wires": []
    },
    {
        "id": "e5c6a9370ec7bdc7",
        "type": "comment",
        "z": "4bc6f781bd269603",
        "name": "Light control flow - designed to click through Jandy colored light setup",
        "info": "",
        "x": 330,
        "y": 80,
        "wires": []
    },
    {
        "id": "705f07cbb7237635",
        "type": "ui_button",
        "z": "4bc6f781bd269603",
        "name": "",
        "group": "55aec98c4f8831bd",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Turn Lights On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 600,
        "y": 220,
        "wires": [
            [
                "66eca0266687a6b4"
            ]
        ]
    },
    {
        "id": "086779cca0578d8b",
        "type": "ui_button",
        "z": "4bc6f781bd269603",
        "name": "",
        "group": "55aec98c4f8831bd",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Turn Lights Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 600,
        "y": 280,
        "wires": [
            [
                "66eca0266687a6b4"
            ]
        ]
    },
    {
        "id": "8abc27da8a32c123",
        "type": "ui_dropdown",
        "z": "4bc6f781bd269603",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "1",
        "group": "55aec98c4f8831bd",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Alpine White",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Sky Blue",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Cobalt Blue",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Caribbean Blue",
                "value": 4,
                "type": "num"
            },
            {
                "label": "Spring Green",
                "value": 5,
                "type": "num"
            },
            {
                "label": "Emerald Green",
                "value": 6,
                "type": "num"
            },
            {
                "label": "Emerald Rose",
                "value": 7,
                "type": "num"
            },
            {
                "label": "Magenta",
                "value": 8,
                "type": "num"
            },
            {
                "label": "Violet",
                "value": 9,
                "type": "num"
            },
            {
                "label": "Slow Color Splash",
                "value": 10,
                "type": "num"
            },
            {
                "label": "Fast Color Splash",
                "value": 11,
                "type": "num"
            },
            {
                "label": "USA",
                "value": 12,
                "type": "num"
            },
            {
                "label": "Fat Tuesday",
                "value": 13,
                "type": "num"
            },
            {
                "label": "Disco Tech",
                "value": 14,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "dropdown",
        "topicType": "msg",
        "className": "",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "e7fe28b8a061cde6",
                "3673cb1518bdd94a"
            ]
        ]
    },
    {
        "id": "0ef0ea420d7867a5",
        "type": "ui_led",
        "z": "4bc6f781bd269603",
        "order": 5,
        "group": "55aec98c4f8831bd",
        "width": 0,
        "height": 0,
        "label": "Lights On/Off Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 810,
        "y": 440,
        "wires": []
    },
    {
        "id": "e7fe28b8a061cde6",
        "type": "ui_led",
        "z": "4bc6f781bd269603",
        "order": 1,
        "group": "55aec98c4f8831bd",
        "width": 0,
        "height": 0,
        "label": "Light Color Selected",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#fffee9",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#1799e7",
                "value": "2",
                "valueType": "num"
            },
            {
                "color": "#0047ab",
                "value": "3",
                "valueType": "num"
            },
            {
                "color": "#4c9bb0",
                "value": "4",
                "valueType": "num"
            },
            {
                "color": "#00ff7f",
                "value": "5",
                "valueType": "num"
            },
            {
                "color": "#5fbb9c",
                "value": "6",
                "valueType": "num"
            },
            {
                "color": "#50c878",
                "value": "7",
                "valueType": "num"
            },
            {
                "color": "#ff00ff",
                "value": "8",
                "valueType": "num"
            },
            {
                "color": "#000000",
                "value": "9",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "10",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "11",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "12",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "13",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "14",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 310,
        "y": 120,
        "wires": []
    },
    {
        "id": "a347241bcccf9cfb",
        "type": "function",
        "z": "4bc6f781bd269603",
        "name": "Get Lights On Status",
        "func": "msg.payload = global.get('lightstatus');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e760b40c8ddd9b4c",
        "type": "function",
        "z": "4bc6f781bd269603",
        "name": "Load Light Color",
        "func": "msg.payload = flow.get(\"lightColor\", \"storeInFile\") || 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 220,
        "wires": [
            [
                "8abc27da8a32c123"
            ]
        ]
    },
    {
        "id": "f65c00b1dc3e07e7",
        "type": "inject",
        "z": "4bc6f781bd269603",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "e760b40c8ddd9b4c"
            ]
        ]
    },
    {
        "id": "bc8d05302163d95e",
        "type": "inject",
        "z": "4bc6f781bd269603",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "13f4b895ad5bfe70"
            ]
        ]
    },
    {
        "id": "13f4b895ad5bfe70",
        "type": "exec",
        "z": "4bc6f781bd269603",
        "command": "gpioget 1 97",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "name": "Light Status",
        "x": 330,
        "y": 400,
        "wires": [
            [
                "9d79aca76e7bd221"
            ],
            [],
            []
        ]
    },
    {
        "id": "9d79aca76e7bd221",
        "type": "function",
        "z": "4bc6f781bd269603",
        "name": "Convert to Int",
        "func": "msg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 400,
        "wires": [
            [
                "ca9dba47f9058a14",
                "0ef0ea420d7867a5"
            ]
        ]
    },
    {
        "id": "dac86bd1224ff44c",
        "type": "function",
        "z": "026c205e3a5666cc",
        "name": "Set Variables",
        "func": "if (msg.topic === \"FreezeSP\") {\n    global.set('freeze', msg.payload);\n    flow.set(\"freezesp\", msg.payload, \"storeInFile\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "4a1146722cfb0b59",
        "type": "function",
        "z": "026c205e3a5666cc",
        "name": "Check Temp for Freeze",
        "func": "var currentTemp = global.get('outsideTemp');\n\nif(currentTemp < global.get('freeze')){\n    return [{'payload':1}];\n} \nelse {\n    return [{ 'payload': 0}];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 140,
        "wires": [
            [
                "0397b9cef5b05322",
                "c46fad2a14e4281e",
                "59faae97af54269a",
                "4b497f6235ae3e8a"
            ]
        ]
    },
    {
        "id": "ddee46238ba675e3",
        "type": "function",
        "z": "026c205e3a5666cc",
        "name": "Run Main Pump",
        "func": "if (msg.payload === 1) {\n    msg.payload = { 'suspended': true };\n    msg.payload = { 'action': 'on' };\n    return msg;\n}\nelse {\n    msg.payload = { 'suspended': false };\n    msg.payload = { 'action': 'off' };\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 60,
        "wires": [
            [
                "66ad04de210bc6da"
            ]
        ]
    },
    {
        "id": "66ad04de210bc6da",
        "type": "link out",
        "z": "026c205e3a5666cc",
        "name": "link out Freeze MP",
        "mode": "link",
        "links": [
            "30ec39b47e8c8226"
        ],
        "x": 1275,
        "y": 60,
        "wires": []
    },
    {
        "id": "76730dd58ae7ff19",
        "type": "inject",
        "z": "026c205e3a5666cc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "4a1146722cfb0b59"
            ]
        ]
    },
    {
        "id": "2d5880f2fd0cd6ae",
        "type": "comment",
        "z": "026c205e3a5666cc",
        "name": "Freeze Protection Flow - checks remote temperature and turns all pumps on if below set point temperature",
        "info": "",
        "x": 400,
        "y": 40,
        "wires": []
    },
    {
        "id": "112cb636e3250d39",
        "type": "ui_numeric",
        "z": "026c205e3a5666cc",
        "name": "",
        "label": "Freeze Protection Set Point",
        "tooltip": "",
        "group": "0ad4b2d3d483cbb8",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "FreezeSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "33",
        "max": "40",
        "step": "1",
        "className": "",
        "x": 440,
        "y": 380,
        "wires": [
            [
                "ea6ad7d8a065a6f7",
                "dac86bd1224ff44c"
            ]
        ]
    },
    {
        "id": "ee678fc88a1ce96a",
        "type": "inject",
        "z": "026c205e3a5666cc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "19bd51fafa36ae0f"
            ]
        ]
    },
    {
        "id": "19bd51fafa36ae0f",
        "type": "function",
        "z": "026c205e3a5666cc",
        "name": "Load Stored Heater Setpoint",
        "func": "msg.payload = flow.get(\"freezesp\", \"storeInFile\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 380,
        "wires": [
            [
                "112cb636e3250d39"
            ]
        ]
    },
    {
        "id": "ea6ad7d8a065a6f7",
        "type": "ui_digital_display",
        "z": "026c205e3a5666cc",
        "name": "Freeze Set Point",
        "group": "0ad4b2d3d483cbb8",
        "order": 4,
        "width": 0,
        "height": 0,
        "digits": "2",
        "decimals": "0",
        "x": 410,
        "y": 320,
        "wires": []
    },
    {
        "id": "0397b9cef5b05322",
        "type": "rbe",
        "z": "026c205e3a5666cc",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 650,
        "y": 140,
        "wires": [
            [
                "ddee46238ba675e3",
                "f52845a18f9dcbf1",
                "de7c15a1db6579c3"
            ]
        ]
    },
    {
        "id": "c46fad2a14e4281e",
        "type": "function",
        "z": "026c205e3a5666cc",
        "name": "Restart MP Pump below freeze if turned off",
        "func": "// Restart pump if they are off line\n//\n\nif(msg.payload === 1 && global.get('mainpump') === 0){\n    return [{ 'payload': 1 }];\n}\n\n// Try to restart pump if they go into error mode\n//\n\nif (msg.payload === 1 && global.get('mainpump') === 2) {\n    return [{ 'payload': 1 }];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 180,
        "wires": [
            [
                "ddee46238ba675e3"
            ]
        ]
    },
    {
        "id": "f52845a18f9dcbf1",
        "type": "function",
        "z": "026c205e3a5666cc",
        "name": "Run WF Pump",
        "func": "if (msg.payload === 1) {\n    msg.payload = { 'suspended': true };\n    msg.payload = { 'action': 'on' };\n    return msg;\n}\nelse {\n    msg.payload = { 'suspended': false };\n    msg.payload = { 'action': 'off' };\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 100,
        "wires": [
            [
                "9c69d0f7a4b8bab2"
            ]
        ]
    },
    {
        "id": "de7c15a1db6579c3",
        "type": "function",
        "z": "026c205e3a5666cc",
        "name": "Run Cleaner Pump",
        "func": "if (msg.payload === 1) {\n    msg.payload = { 'suspended': true };\n    msg.payload = { 'action': 'on' };\n    return msg;\n}\nelse {\n    msg.payload = { 'suspended': false };\n    msg.payload = { 'action': 'off' };\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 140,
        "wires": [
            [
                "2d08c84ad095b3de"
            ]
        ]
    },
    {
        "id": "59faae97af54269a",
        "type": "function",
        "z": "026c205e3a5666cc",
        "name": "Restart WF Pump below freeze if turned off",
        "func": "// Restart pumps if they are off line\n//\n\nif (msg.payload === 1 && global.get('waterfallpump') === 0) {\n    return [{ 'payload': 1 }];\n}\n\n\n// Try to restart pumps if they go into error mode\n//\n\nif (msg.payload === 1 && global.get('waterfallpump') === 2) {\n    return [{ 'payload': 1 }];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 220,
        "wires": [
            [
                "f52845a18f9dcbf1"
            ]
        ]
    },
    {
        "id": "4b497f6235ae3e8a",
        "type": "function",
        "z": "026c205e3a5666cc",
        "name": "Restart Cleaner Pump below freeze if turned off",
        "func": "// Restart pump if they are off line\n//\n\nif (msg.payload === 1 && global.get('cleanerpump') === 0) {\n    return [{ 'payload': 1 }];\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 260,
        "wires": [
            [
                "de7c15a1db6579c3"
            ]
        ]
    },
    {
        "id": "9c69d0f7a4b8bab2",
        "type": "link out",
        "z": "026c205e3a5666cc",
        "name": "link out Freeze WF",
        "mode": "link",
        "links": [
            "4789b7aa78ca9a05"
        ],
        "x": 1275,
        "y": 100,
        "wires": []
    },
    {
        "id": "2d08c84ad095b3de",
        "type": "link out",
        "z": "026c205e3a5666cc",
        "name": "link out Freeze Cleaner",
        "mode": "link",
        "links": [
            "4b0f39bc3d215c7d"
        ],
        "x": 1275,
        "y": 140,
        "wires": []
    },
    {
        "id": "da5b373d9149c3fd",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Convert to eztimer",
        "func": "if(msg.topic === \"mon\"){\n    flow.set(\"mon-mp\", msg.payload, \"storeInFile\");\n    if(msg.payload){\n        msg.payload = {'mon':true};\n    } else{\n        msg.payload = {'mon':false};\n    }\n}else if(msg.topic === \"tue\"){\n    flow.set(\"tue-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'tue': true };\n    } else {\n        msg.payload = { 'tue': false };\n    }\n} else if (msg.topic === \"wed\") {\n    flow.set(\"wed-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'wed': true };\n    } else {\n        msg.payload = { 'wed': false };\n    }\n} else if (msg.topic === \"thu\") {\n    flow.set(\"thu-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'thu': true };\n    } else {\n        msg.payload = { 'thu': false };\n    }\n} else if (msg.topic === \"fri\") {\n    flow.set(\"fri-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'fri': true };\n    } else {\n        msg.payload = { 'fri': false };\n    }\n} else if (msg.topic === \"sat\") {\n    flow.set(\"sat-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sat': true };\n    } else {\n        msg.payload = { 'sat': false };\n    }\n} else if (msg.topic === \"sun\") {\n    flow.set(\"sun-mp\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sun': true };\n    } else {\n        msg.payload = { 'sun': false };\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 80,
        "wires": [
            [
                "384508808597f11d"
            ]
        ]
    },
    {
        "id": "76deaf7448187666",
        "type": "comment",
        "z": "e02a1f223ce42270",
        "name": "Main Pump Scheduling",
        "info": "",
        "x": 400,
        "y": 40,
        "wires": []
    },
    {
        "id": "f493f4424d06aaee",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Convert time eztimer",
        "func": "if(msg.topic === 'on'){\n    msg.payload = { 'ontime': msg.payload };\n}\nif(msg.topic === 'off'){\n    msg.payload = {'offtime': msg.payload };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 120,
        "wires": [
            [
                "384508808597f11d"
            ]
        ]
    },
    {
        "id": "384508808597f11d",
        "type": "link out",
        "z": "e02a1f223ce42270",
        "name": "link out Schedule Main",
        "mode": "link",
        "links": [
            "43c45eb211db33f7"
        ],
        "x": 1225,
        "y": 80,
        "wires": []
    },
    {
        "id": "e240726f5404b908",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Convert to eztimer",
        "func": "if (msg.topic === \"mon\") {\n    flow.set(\"mon-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'mon': true };\n    } else {\n        msg.payload = { 'mon': false };\n    }\n} else if (msg.topic === \"tue\") {\n    flow.set(\"tue-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'tue': true };\n    } else {\n        msg.payload = { 'tue': false };\n    }\n} else if (msg.topic === \"wed\") {\n    flow.set(\"wed-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'wed': true };\n    } else {\n        msg.payload = { 'wed': false };\n    }\n} else if (msg.topic === \"thu\") {\n    flow.set(\"thu-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'thu': true };\n    } else {\n        msg.payload = { 'thu': false };\n    }\n} else if (msg.topic === \"fri\") {\n    flow.set(\"fri-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'fri': true };\n    } else {\n        msg.payload = { 'fri': false };\n    }\n} else if (msg.topic === \"sat\") {\n    flow.set(\"sat-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sat': true };\n    } else {\n        msg.payload = { 'sat': false };\n    }\n} else if (msg.topic === \"sun\") {\n    flow.set(\"sun-wf\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sun': true };\n    } else {\n        msg.payload = { 'sun': false };\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 500,
        "wires": [
            [
                "241a6fe3e6227270"
            ]
        ]
    },
    {
        "id": "7a867f6a7615585f",
        "type": "comment",
        "z": "e02a1f223ce42270",
        "name": "Waterfall Pump Scheduling",
        "info": "",
        "x": 410,
        "y": 460,
        "wires": []
    },
    {
        "id": "2fa5ada15a47d0bd",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Convert time eztimer",
        "func": "if (msg.topic === 'on') {\n    msg.payload = { 'ontime': msg.payload };\n}\nif (msg.topic === 'off') {\n    msg.payload = { 'offtime': msg.payload };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 540,
        "wires": [
            [
                "241a6fe3e6227270"
            ]
        ]
    },
    {
        "id": "8ba7bb2d08d8b7bd",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Convert to eztimer",
        "func": "if (msg.topic === \"mon\") {\n    flow.set(\"mon-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'mon': true };\n    } else {\n        msg.payload = { 'mon': false };\n    }\n} else if (msg.topic === \"tue\") {\n    flow.set(\"tue-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'tue': true };\n    } else {\n        msg.payload = { 'tue': false };\n    }\n} else if (msg.topic === \"wed\") {\n    flow.set(\"wed-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'wed': true };\n    } else {\n        msg.payload = { 'wed': false };\n    }\n} else if (msg.topic === \"thu\") {\n    flow.set(\"thu-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'thu': true };\n    } else {\n        msg.payload = { 'thu': false };\n    }\n} else if (msg.topic === \"fri\") {\n    flow.set(\"fri-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'fri': true };\n    } else {\n        msg.payload = { 'fri': false };\n    }\n} else if (msg.topic === \"sat\") {\n    flow.set(\"sat-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sat': true };\n    } else {\n        msg.payload = { 'sat': false };\n    }\n} else if (msg.topic === \"sun\") {\n    flow.set(\"sun-cn\", msg.payload, \"storeInFile\");\n    if (msg.payload) {\n        msg.payload = { 'sun': true };\n    } else {\n        msg.payload = { 'sun': false };\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 940,
        "wires": [
            [
                "5a0de2675ec29e48"
            ]
        ]
    },
    {
        "id": "40e56ae86f3fbf67",
        "type": "comment",
        "z": "e02a1f223ce42270",
        "name": "Cleaner Pump Scheduling",
        "info": "",
        "x": 410,
        "y": 900,
        "wires": []
    },
    {
        "id": "da73674b971c9064",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Convert time eztimer",
        "func": "if (msg.topic === 'on') {\n    msg.payload = { 'ontime': msg.payload };\n}\nif (msg.topic === 'off') {\n    msg.payload = { 'offtime': msg.payload };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 980,
        "wires": [
            [
                "5a0de2675ec29e48"
            ]
        ]
    },
    {
        "id": "241a6fe3e6227270",
        "type": "link out",
        "z": "e02a1f223ce42270",
        "name": "link out Schedule WF",
        "mode": "link",
        "links": [
            "6165c76b8de1a8fe"
        ],
        "x": 1205,
        "y": 500,
        "wires": []
    },
    {
        "id": "5a0de2675ec29e48",
        "type": "link out",
        "z": "e02a1f223ce42270",
        "name": "link out Schedule Cleaner",
        "mode": "link",
        "links": [
            "f19810f8e9081743"
        ],
        "x": 1205,
        "y": 940,
        "wires": []
    },
    {
        "id": "47be7e82e3de6749",
        "type": "ui_text_input",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Start Time",
        "tooltip": "",
        "group": "39acbe81a22bf80e",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "start",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 370,
        "y": 360,
        "wires": [
            [
                "74ee550b61c359e4",
                "d21a9c4b70c681b4"
            ]
        ]
    },
    {
        "id": "f46fea5c72407701",
        "type": "ui_text_input",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Stop Time",
        "tooltip": "",
        "group": "39acbe81a22bf80e",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "stop",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 360,
        "y": 400,
        "wires": [
            [
                "fc6d21810a1885c1",
                "fa2047f483fcd641"
            ]
        ]
    },
    {
        "id": "2d65de4b179ea7c3",
        "type": "ui_text_input",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Start Time",
        "tooltip": "",
        "group": "e3e0e5c332e9618c",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "start",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 370,
        "y": 780,
        "wires": [
            [
                "34af1d8610b8fddd",
                "fd041504b224630e"
            ]
        ]
    },
    {
        "id": "9e2580b506a75cef",
        "type": "ui_text_input",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Stop Time",
        "tooltip": "",
        "group": "e3e0e5c332e9618c",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "stop",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 360,
        "y": 820,
        "wires": [
            [
                "acccd89a3e6bd961",
                "358a6df7a978b86f"
            ]
        ]
    },
    {
        "id": "cb4d05f288a221d9",
        "type": "ui_text_input",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Start Time",
        "tooltip": "",
        "group": "37cbc9f43274594d",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "start",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "ba51fc26baab81f8",
                "321219de7c3ef6a2"
            ]
        ]
    },
    {
        "id": "f16acb72ce545685",
        "type": "ui_text_input",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Stop Time",
        "tooltip": "",
        "group": "37cbc9f43274594d",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": "5000",
        "topic": "stop",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 360,
        "y": 1260,
        "wires": [
            [
                "68b6194ac5b0d1a6",
                "aa26114fc88f37e6"
            ]
        ]
    },
    {
        "id": "01e1b1e7b05cfbd0",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Monday",
        "tooltip": "",
        "group": "39acbe81a22bf80e",
        "order": 5,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "mon",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 80,
        "wires": [
            [
                "da5b373d9149c3fd"
            ]
        ]
    },
    {
        "id": "f746b651745b6757",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Tuesday",
        "tooltip": "",
        "group": "39acbe81a22bf80e",
        "order": 6,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "tue",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 120,
        "wires": [
            [
                "da5b373d9149c3fd"
            ]
        ]
    },
    {
        "id": "8383858d7f1153ee",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Wed",
        "tooltip": "",
        "group": "39acbe81a22bf80e",
        "order": 7,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "wed",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 160,
        "wires": [
            [
                "da5b373d9149c3fd"
            ]
        ]
    },
    {
        "id": "d15beeb933e7f47a",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Thursday",
        "tooltip": "",
        "group": "39acbe81a22bf80e",
        "order": 8,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "thu",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 200,
        "wires": [
            [
                "da5b373d9149c3fd"
            ]
        ]
    },
    {
        "id": "8671879697d33de4",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Friday",
        "tooltip": "",
        "group": "39acbe81a22bf80e",
        "order": 9,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "fri",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 240,
        "wires": [
            [
                "da5b373d9149c3fd"
            ]
        ]
    },
    {
        "id": "245076985264ec2c",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Saturday",
        "tooltip": "",
        "group": "39acbe81a22bf80e",
        "order": 10,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sat",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 280,
        "wires": [
            [
                "da5b373d9149c3fd"
            ]
        ]
    },
    {
        "id": "09c3c4c1b272d392",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Sunday",
        "tooltip": "",
        "group": "39acbe81a22bf80e",
        "order": 11,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sun",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "da5b373d9149c3fd"
            ]
        ]
    },
    {
        "id": "e74b2207598581be",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Monday",
        "tooltip": "",
        "group": "e3e0e5c332e9618c",
        "order": 5,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "mon",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 500,
        "wires": [
            [
                "e240726f5404b908"
            ]
        ]
    },
    {
        "id": "7b859d56b8b23a82",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Tuesday",
        "tooltip": "",
        "group": "e3e0e5c332e9618c",
        "order": 6,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "tue",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 540,
        "wires": [
            [
                "e240726f5404b908"
            ]
        ]
    },
    {
        "id": "c62fc1f71dee312f",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Wed",
        "tooltip": "",
        "group": "e3e0e5c332e9618c",
        "order": 7,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "wed",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 580,
        "wires": [
            [
                "e240726f5404b908"
            ]
        ]
    },
    {
        "id": "d0a019dc85303e5d",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Thursday",
        "tooltip": "",
        "group": "e3e0e5c332e9618c",
        "order": 8,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "thu",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 620,
        "wires": [
            [
                "e240726f5404b908"
            ]
        ]
    },
    {
        "id": "99c2c1cc9a58a1af",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Friday",
        "tooltip": "",
        "group": "e3e0e5c332e9618c",
        "order": 9,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "fri",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 660,
        "wires": [
            [
                "e240726f5404b908"
            ]
        ]
    },
    {
        "id": "3ca3a3055066d230",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Saturday",
        "tooltip": "",
        "group": "e3e0e5c332e9618c",
        "order": 10,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sat",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 700,
        "wires": [
            [
                "e240726f5404b908"
            ]
        ]
    },
    {
        "id": "afea6bd4fb786194",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Sunday",
        "tooltip": "",
        "group": "e3e0e5c332e9618c",
        "order": 11,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sun",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 740,
        "wires": [
            [
                "e240726f5404b908"
            ]
        ]
    },
    {
        "id": "4e2d38ba83b3c7ae",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Monday",
        "tooltip": "",
        "group": "37cbc9f43274594d",
        "order": 5,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "mon",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 940,
        "wires": [
            [
                "8ba7bb2d08d8b7bd"
            ]
        ]
    },
    {
        "id": "225eeff74ea179f9",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Tuesday",
        "tooltip": "",
        "group": "37cbc9f43274594d",
        "order": 6,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "tue",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 980,
        "wires": [
            [
                "8ba7bb2d08d8b7bd"
            ]
        ]
    },
    {
        "id": "ebd3ecb02345fea9",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Wed",
        "tooltip": "",
        "group": "37cbc9f43274594d",
        "order": 7,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "wed",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 1020,
        "wires": [
            [
                "8ba7bb2d08d8b7bd"
            ]
        ]
    },
    {
        "id": "55dd4ab2e4c3b7a8",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Thursday",
        "tooltip": "",
        "group": "37cbc9f43274594d",
        "order": 8,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "thu",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 1060,
        "wires": [
            [
                "8ba7bb2d08d8b7bd"
            ]
        ]
    },
    {
        "id": "1146120b05c0a250",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Friday",
        "tooltip": "",
        "group": "37cbc9f43274594d",
        "order": 9,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "fri",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 1100,
        "wires": [
            [
                "8ba7bb2d08d8b7bd"
            ]
        ]
    },
    {
        "id": "2d7f320f370b803d",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Saturday",
        "tooltip": "",
        "group": "37cbc9f43274594d",
        "order": 10,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sat",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 1140,
        "wires": [
            [
                "8ba7bb2d08d8b7bd"
            ]
        ]
    },
    {
        "id": "aeefeee34cbb0916",
        "type": "ui_switch",
        "z": "e02a1f223ce42270",
        "name": "",
        "label": "Sunday",
        "tooltip": "",
        "group": "37cbc9f43274594d",
        "order": 11,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "sun",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 1180,
        "wires": [
            [
                "8ba7bb2d08d8b7bd"
            ]
        ]
    },
    {
        "id": "32553d5614c16be0",
        "type": "ui_text",
        "z": "e02a1f223ce42270",
        "group": "39acbe81a22bf80e",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 360,
        "wires": []
    },
    {
        "id": "56787b83dfc2c789",
        "type": "ui_text",
        "z": "e02a1f223ce42270",
        "group": "39acbe81a22bf80e",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 400,
        "wires": []
    },
    {
        "id": "d0a978ecb745d293",
        "type": "ui_text",
        "z": "e02a1f223ce42270",
        "group": "e3e0e5c332e9618c",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 780,
        "wires": []
    },
    {
        "id": "ada4dec27315f22a",
        "type": "ui_text",
        "z": "e02a1f223ce42270",
        "group": "e3e0e5c332e9618c",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 820,
        "wires": []
    },
    {
        "id": "0e3b1a8f60e4cd84",
        "type": "ui_text",
        "z": "e02a1f223ce42270",
        "group": "37cbc9f43274594d",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 1220,
        "wires": []
    },
    {
        "id": "36f5c9fe18a67b97",
        "type": "ui_text",
        "z": "e02a1f223ce42270",
        "group": "37cbc9f43274594d",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 1260,
        "wires": []
    },
    {
        "id": "60a9bc7d4b734ffd",
        "type": "inject",
        "z": "e02a1f223ce42270",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "086dac05eadb471b",
                "781b9c2a8156f454",
                "c686769a923c3302",
                "e7997471b405746f",
                "f0f913f67f253700",
                "8944ac815c57846b",
                "02a4d5489c4ff201",
                "9e9154e6cfe344f5",
                "a4357af022536ee4"
            ]
        ]
    },
    {
        "id": "086dac05eadb471b",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"mon-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 80,
        "wires": [
            [
                "01e1b1e7b05cfbd0"
            ]
        ]
    },
    {
        "id": "781b9c2a8156f454",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"tue-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 120,
        "wires": [
            [
                "f746b651745b6757"
            ]
        ]
    },
    {
        "id": "c686769a923c3302",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"wed-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 160,
        "wires": [
            [
                "8383858d7f1153ee"
            ]
        ]
    },
    {
        "id": "e7997471b405746f",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"thu-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 200,
        "wires": [
            [
                "d15beeb933e7f47a"
            ]
        ]
    },
    {
        "id": "f0f913f67f253700",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"fri-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 240,
        "wires": [
            [
                "8671879697d33de4"
            ]
        ]
    },
    {
        "id": "8944ac815c57846b",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sat-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 280,
        "wires": [
            [
                "245076985264ec2c"
            ]
        ]
    },
    {
        "id": "02a4d5489c4ff201",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sun-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 320,
        "wires": [
            [
                "09c3c4c1b272d392"
            ]
        ]
    },
    {
        "id": "d21a9c4b70c681b4",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Save Start Time",
        "func": "flow.set(\"starttime-mp\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "c828e2a8193e0914"
            ]
        ]
    },
    {
        "id": "fa2047f483fcd641",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Save Stop Time",
        "func": "flow.set(\"stoptime-mp\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "dca3e242e374be09"
            ]
        ]
    },
    {
        "id": "9e9154e6cfe344f5",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"starttime-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 360,
        "wires": [
            [
                "47be7e82e3de6749"
            ]
        ]
    },
    {
        "id": "a4357af022536ee4",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"stoptime-mp\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 400,
        "wires": [
            [
                "f46fea5c72407701"
            ]
        ]
    },
    {
        "id": "232af87cbdb77cde",
        "type": "inject",
        "z": "e02a1f223ce42270",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 460,
        "wires": [
            [
                "b71e9364a798878d",
                "b7c5d795ade94292",
                "15b0770972cca4bb",
                "8b696c039d3e117c",
                "4856a71b1fda4504",
                "e0994d887be6fcd5",
                "c131c9088739c4d7",
                "387351adfa75107e",
                "b2810c330ab39087"
            ]
        ]
    },
    {
        "id": "b71e9364a798878d",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"mon-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 500,
        "wires": [
            [
                "e74b2207598581be"
            ]
        ]
    },
    {
        "id": "b7c5d795ade94292",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"tue-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 540,
        "wires": [
            [
                "7b859d56b8b23a82"
            ]
        ]
    },
    {
        "id": "15b0770972cca4bb",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"wed-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 580,
        "wires": [
            [
                "c62fc1f71dee312f"
            ]
        ]
    },
    {
        "id": "8b696c039d3e117c",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"thu-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 620,
        "wires": [
            [
                "d0a019dc85303e5d"
            ]
        ]
    },
    {
        "id": "4856a71b1fda4504",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"fri-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 660,
        "wires": [
            [
                "99c2c1cc9a58a1af"
            ]
        ]
    },
    {
        "id": "e0994d887be6fcd5",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sat-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 700,
        "wires": [
            [
                "3ca3a3055066d230"
            ]
        ]
    },
    {
        "id": "c131c9088739c4d7",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sun-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 740,
        "wires": [
            [
                "afea6bd4fb786194"
            ]
        ]
    },
    {
        "id": "387351adfa75107e",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"starttime-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 780,
        "wires": [
            [
                "2d65de4b179ea7c3"
            ]
        ]
    },
    {
        "id": "b2810c330ab39087",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"stoptime-wf\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 820,
        "wires": [
            [
                "9e2580b506a75cef"
            ]
        ]
    },
    {
        "id": "fd041504b224630e",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Save Start Time",
        "func": "flow.set(\"starttime-wf\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 700,
        "wires": [
            [
                "fe74e4a918738b79"
            ]
        ]
    },
    {
        "id": "358a6df7a978b86f",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Save Stop Time",
        "func": "flow.set(\"stoptime-wf\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 740,
        "wires": [
            [
                "3139845c463ac09f"
            ]
        ]
    },
    {
        "id": "ccd1c6d0c3d058ab",
        "type": "inject",
        "z": "e02a1f223ce42270",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 900,
        "wires": [
            [
                "94820d7835bfdd80",
                "b70a4882fd9efb43",
                "85f5eda219efe842",
                "ee093da4828ed9d2",
                "d0c21d6f361f40b4",
                "f82007b605f693e5",
                "2408386c7fdb6c2b",
                "f218841a28048bb9",
                "c3af851567c49d0d"
            ]
        ]
    },
    {
        "id": "94820d7835bfdd80",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"mon-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 940,
        "wires": [
            [
                "4e2d38ba83b3c7ae"
            ]
        ]
    },
    {
        "id": "b70a4882fd9efb43",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"tue-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 980,
        "wires": [
            [
                "225eeff74ea179f9"
            ]
        ]
    },
    {
        "id": "85f5eda219efe842",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"wed-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1020,
        "wires": [
            [
                "ebd3ecb02345fea9"
            ]
        ]
    },
    {
        "id": "ee093da4828ed9d2",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"thu-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "55dd4ab2e4c3b7a8"
            ]
        ]
    },
    {
        "id": "d0c21d6f361f40b4",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"fri-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1100,
        "wires": [
            [
                "1146120b05c0a250"
            ]
        ]
    },
    {
        "id": "f82007b605f693e5",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sat-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1140,
        "wires": [
            [
                "2d7f320f370b803d"
            ]
        ]
    },
    {
        "id": "2408386c7fdb6c2b",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored Day Status",
        "func": "msg.payload = flow.get(\"sun-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1180,
        "wires": [
            [
                "aeefeee34cbb0916"
            ]
        ]
    },
    {
        "id": "f218841a28048bb9",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"starttime-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1220,
        "wires": [
            [
                "cb4d05f288a221d9"
            ]
        ]
    },
    {
        "id": "c3af851567c49d0d",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Load Stored time Status",
        "func": "msg.payload = flow.get(\"stoptime-cn\", \"storeInFile\") || false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1260,
        "wires": [
            [
                "f16acb72ce545685"
            ]
        ]
    },
    {
        "id": "321219de7c3ef6a2",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Save Start Time",
        "func": "flow.set(\"starttime-cn\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1140,
        "wires": [
            [
                "8c8d8090dd152fd6"
            ]
        ]
    },
    {
        "id": "aa26114fc88f37e6",
        "type": "function",
        "z": "e02a1f223ce42270",
        "name": "Save Stop Time",
        "func": "flow.set(\"stoptime-cn\", msg.payload, \"storeInFile\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1180,
        "wires": [
            [
                "3a5d95392275c44c"
            ]
        ]
    },
    {
        "id": "c828e2a8193e0914",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "on",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 280,
        "wires": [
            [
                "f493f4424d06aaee"
            ]
        ]
    },
    {
        "id": "dca3e242e374be09",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "off",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 320,
        "wires": [
            [
                "f493f4424d06aaee"
            ]
        ]
    },
    {
        "id": "fe74e4a918738b79",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "on",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 700,
        "wires": [
            [
                "2fa5ada15a47d0bd"
            ]
        ]
    },
    {
        "id": "3139845c463ac09f",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "off",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 740,
        "wires": [
            [
                "2fa5ada15a47d0bd"
            ]
        ]
    },
    {
        "id": "8c8d8090dd152fd6",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "on",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 1140,
        "wires": [
            [
                "da73674b971c9064"
            ]
        ]
    },
    {
        "id": "3a5d95392275c44c",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "off",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "HH:mm:ss",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 810,
        "y": 1180,
        "wires": [
            [
                "da73674b971c9064"
            ]
        ]
    },
    {
        "id": "74ee550b61c359e4",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 360,
        "wires": [
            [
                "32553d5614c16be0"
            ]
        ]
    },
    {
        "id": "fc6d21810a1885c1",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 400,
        "wires": [
            [
                "56787b83dfc2c789"
            ]
        ]
    },
    {
        "id": "34af1d8610b8fddd",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 780,
        "wires": [
            [
                "d0a978ecb745d293"
            ]
        ]
    },
    {
        "id": "acccd89a3e6bd961",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 820,
        "wires": [
            [
                "ada4dec27315f22a"
            ]
        ]
    },
    {
        "id": "ba51fc26baab81f8",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 1220,
        "wires": [
            [
                "0e3b1a8f60e4cd84"
            ]
        ]
    },
    {
        "id": "68b6194ac5b0d1a6",
        "type": "moment",
        "z": "e02a1f223ce42270",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "ETC/GMT",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "hh:mm A",
        "locale": "en_GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 880,
        "y": 1260,
        "wires": [
            [
                "36f5c9fe18a67b97"
            ]
        ]
    },
    {
        "id": "15efc36a27983083",
        "type": "function",
        "z": "8f3ccf6cb8724135",
        "name": "Set Read Global Variables",
        "func": "var outsideTemp = msg.payload; //[\"/dev/i2c-1\"].ads1115[\"0x49\"].singleEnded.channel_1.miliVolts;\n\noutsideTemp = 0.10909091 * outsideTemp - 58;\n\nglobal.set('outsideTemp', outsideTemp);\nmsg.payload = outsideTemp;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 180,
        "wires": [
            [
                "655c027b683db5b9",
                "d8eeb7da542ba658",
                "7a06491e50eea3d3"
            ]
        ]
    },
    {
        "id": "0b974e744896e44f",
        "type": "function",
        "z": "8f3ccf6cb8724135",
        "name": "Set Read Global Variables",
        "func": "var poolTemp = msg.payload; // [\"/dev/i2c-1\"].ads1115[\"0x49\"].singleEnded.channel_2.miliVolts;\n\npoolTemp = 0.10909091 * poolTemp - 58;\n\n//  global.set('poolTemp', msg.payload); Move to after deadband for heater\nmsg.payload = poolTemp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 300,
        "wires": [
            [
                "2c26b1406f79ed4c",
                "3ce344b67528331f",
                "f1d83838589f4945",
                "47e4a9a5d2ba2495"
            ]
        ]
    },
    {
        "id": "655c027b683db5b9",
        "type": "ui_text",
        "z": "8f3ccf6cb8724135",
        "group": "9d5f082422dbdebe",
        "order": 6,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "format": "{{msg.payload.toFixed(1)}}",
        "layout": "row-center",
        "className": "tempTxt",
        "x": 750,
        "y": 140,
        "wires": []
    },
    {
        "id": "3ce344b67528331f",
        "type": "ui_text",
        "z": "8f3ccf6cb8724135",
        "group": "9d5f082422dbdebe",
        "order": 9,
        "width": 3,
        "height": 2,
        "name": "",
        "label": "",
        "format": "{{msg.payload.toFixed(1)}}",
        "layout": "row-center",
        "className": "tempTxt",
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "d8eeb7da542ba658",
        "type": "ui_text",
        "z": "8f3ccf6cb8724135",
        "group": "9d5f082422dbdebe",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Air Temp (F):",
        "format": "",
        "layout": "row-spread",
        "className": "labelTxt",
        "x": 770,
        "y": 100,
        "wires": []
    },
    {
        "id": "2c26b1406f79ed4c",
        "type": "ui_text",
        "z": "8f3ccf6cb8724135",
        "group": "9d5f082422dbdebe",
        "order": 8,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Pool Temp (F):",
        "format": "",
        "layout": "row-spread",
        "className": "labelTxt",
        "x": 780,
        "y": 300,
        "wires": []
    },
    {
        "id": "539a01bab6c8beea",
        "type": "ui_template",
        "z": "8f3ccf6cb8724135",
        "group": "9d5f082422dbdebe",
        "name": "",
        "order": 11,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>\n\n<style>\n    .tempTxt p {\n    font-size:250%;\n    }\n</style>\n\n<style>\n    .labelTxt p {\n        font-size: 115%;\n    }\n</style>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 760,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "619c7a8d6a681f1b",
        "type": "inject",
        "z": "8f3ccf6cb8724135",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "ba38438967db466d"
            ]
        ]
    },
    {
        "id": "cc5bb448d3b01948",
        "type": "comment",
        "z": "8f3ccf6cb8724135",
        "name": "i2c can be replaced with Modbus Read or other method for remote Analog circuit",
        "info": "",
        "x": 300,
        "y": 60,
        "wires": []
    },
    {
        "id": "7a06491e50eea3d3",
        "type": "ui_chart",
        "z": "8f3ccf6cb8724135",
        "name": "",
        "group": "285434a850121b93",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Outside Temp",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "15",
        "ymax": "110",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f1d83838589f4945",
        "type": "ui_chart",
        "z": "8f3ccf6cb8724135",
        "name": "",
        "group": "285434a850121b93",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Pool Temp",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "45",
        "ymax": "110",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 770,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "ba38438967db466d",
        "type": "ads1x15_i2c",
        "z": "8f3ccf6cb8724135",
        "property": "payload",
        "name": "",
        "i2c_device_number": "1",
        "chip": "0x01",
        "i2c_address": "0x49",
        "inputsForChannel": "singleEnded",
        "singleEndedChannel0": true,
        "singleEndedChannel1": true,
        "singleEndedChannel2": true,
        "singleEndedChannel3": true,
        "differentialChannel0_1": true,
        "differentialChannel0_3": false,
        "differentialChannel1_3": false,
        "differentialChannel2_3": true,
        "samplesPerSecond0": "920",
        "samplesPerSecond1": "860",
        "progGainAmp": "2048",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "39596bb942e38cfb",
                "a343c09f087db210"
            ]
        ]
    },
    {
        "id": "47e4a9a5d2ba2495",
        "type": "rbe",
        "z": "8f3ccf6cb8724135",
        "name": "",
        "func": "deadbandEq",
        "gap": "1.0",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 760,
        "y": 460,
        "wires": [
            [
                "695ca511a0ead76c"
            ]
        ]
    },
    {
        "id": "695ca511a0ead76c",
        "type": "function",
        "z": "8f3ccf6cb8724135",
        "name": "Set Pool Temp for Heater",
        "func": "global.set('poolTemp', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "39596bb942e38cfb",
        "type": "function",
        "z": "8f3ccf6cb8724135",
        "name": "Pull Pool Temp",
        "func": "msg.payload = msg.payload[\"/dev/i2c-1\"].ads1115[\"0x49\"].singleEnded.channel_2.miliVolts;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "c4bc8cc24d351e98"
            ]
        ]
    },
    {
        "id": "c4bc8cc24d351e98",
        "type": "smooth",
        "z": "8f3ccf6cb8724135",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "10",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 360,
        "y": 260,
        "wires": [
            [
                "0b974e744896e44f"
            ]
        ]
    },
    {
        "id": "813568794da07533",
        "type": "smooth",
        "z": "8f3ccf6cb8724135",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "10",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 360,
        "y": 140,
        "wires": [
            [
                "15efc36a27983083"
            ]
        ]
    },
    {
        "id": "a343c09f087db210",
        "type": "function",
        "z": "8f3ccf6cb8724135",
        "name": "Pull Air Temp",
        "func": "msg.payload = msg.payload[\"/dev/i2c-1\"].ads1115[\"0x49\"].singleEnded.channel_1.miliVolts;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            [
                "813568794da07533"
            ]
        ]
    },
    {
        "id": "c281e3066d56b669",
        "type": "inject",
        "z": "d6d2155704172bed",
        "name": "",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "0cf65f38c5f0e18b",
                "63f7e626087159dc",
                "cba16174a688e521"
            ]
        ]
    },
    {
        "id": "0c27b5551e02ad29",
        "type": "ui_button",
        "z": "d6d2155704172bed",
        "name": "",
        "group": "6ff31242.c8bfbc",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 180,
        "y": 440,
        "wires": [
            [
                "9593a4d8b7a551a4"
            ]
        ]
    },
    {
        "id": "9593a4d8b7a551a4",
        "type": "exec",
        "z": "d6d2155704172bed",
        "command": "sudo shutdown -r now",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "winHide": false,
        "name": "Reboot",
        "x": 380,
        "y": 440,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "0cf65f38c5f0e18b",
        "type": "exec",
        "z": "d6d2155704172bed",
        "command": "top -d 0.5 -b -n2 | grep \"Cpu(s)\"|tail -n 1 | awk '{print $2 + $4}'",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "winHide": false,
        "name": "CPU Load",
        "x": 390,
        "y": 140,
        "wires": [
            [
                "a9e2d531b3dd694f"
            ],
            [],
            []
        ]
    },
    {
        "id": "63f7e626087159dc",
        "type": "exec",
        "z": "d6d2155704172bed",
        "command": "free | grep Mem | awk '{print $3/$2*100}'",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "winHide": false,
        "name": "Free Memory",
        "x": 390,
        "y": 220,
        "wires": [
            [
                "750c5c0ab3335ed3"
            ],
            [],
            []
        ]
    },
    {
        "id": "a9e2d531b3dd694f",
        "type": "ui_gauge",
        "z": "d6d2155704172bed",
        "name": "",
        "group": "25a4fee4fe7fedea",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Processor",
        "label": "CPU",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 560,
        "y": 140,
        "wires": []
    },
    {
        "id": "750c5c0ab3335ed3",
        "type": "ui_gauge",
        "z": "d6d2155704172bed",
        "name": "",
        "group": "248a3e4f25993b9c",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "% Memory Used",
        "label": "RAM",
        "format": "{{value | number:1}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "70",
        "seg2": "90",
        "diff": false,
        "className": "",
        "x": 580,
        "y": 220,
        "wires": []
    },
    {
        "id": "d5fd73b18acf7c06",
        "type": "exec",
        "z": "d6d2155704172bed",
        "command": "df -h",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Disk Usage",
        "x": 390,
        "y": 300,
        "wires": [
            [
                "49525cc82248b5e9"
            ],
            [],
            []
        ]
    },
    {
        "id": "cd5b70f8b6e8e639",
        "type": "ui_gauge",
        "z": "d6d2155704172bed",
        "name": "",
        "group": "36f48cd0ba5a1f91",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "% Disk Used",
        "label": "Usage",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "80",
        "diff": false,
        "className": "",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "49525cc82248b5e9",
        "type": "function",
        "z": "d6d2155704172bed",
        "name": "",
        "func": "var re = /([0-9]{2})%/\nvar idx = msg.payload.search(re);\nvar str = msg.payload;\nif (idx >=0) {\n str = msg.payload.substring(idx, idx + 2);\n}\nmsg.payload = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 300,
        "wires": [
            [
                "cd5b70f8b6e8e639"
            ]
        ]
    },
    {
        "id": "6c8130a93d9dff8d",
        "type": "inject",
        "z": "d6d2155704172bed",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "d5fd73b18acf7c06"
            ]
        ]
    },
    {
        "id": "cba16174a688e521",
        "type": "exec",
        "z": "d6d2155704172bed",
        "command": "cat /sys/class/thermal/thermal_zone*/temp",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "CPU Temperature",
        "x": 410,
        "y": 60,
        "wires": [
            [
                "e9479d5330019570"
            ],
            [],
            []
        ]
    },
    {
        "id": "d5c265fb1a085454",
        "type": "ui_chart",
        "z": "d6d2155704172bed",
        "name": "",
        "group": "6d24f07d21175af6",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "CPU Temp (C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "e9479d5330019570",
        "type": "function",
        "z": "d6d2155704172bed",
        "name": "div 1000",
        "func": "msg.payload = msg.payload/1000;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 60,
        "wires": [
            [
                "d5c265fb1a085454"
            ]
        ]
    },
    {
        "id": "060f2f261fc01d18",
        "type": "ui_button",
        "z": "d6d2155704172bed",
        "name": "",
        "group": "6ff31242.c8bfbc",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Shutdown",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "c4dde8e23e0bda91"
            ]
        ]
    },
    {
        "id": "c4dde8e23e0bda91",
        "type": "exec",
        "z": "d6d2155704172bed",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Shutdown",
        "x": 379.5,
        "y": 522.25,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "213c40b9302ffa3e",
        "type": "ui_button",
        "z": "d6d2155704172bed",
        "name": "",
        "group": "6ff31242.c8bfbc",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Clear Cache",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 180,
        "y": 600,
        "wires": [
            [
                "f07ca685fb4a4080"
            ]
        ]
    },
    {
        "id": "f07ca685fb4a4080",
        "type": "exec",
        "z": "d6d2155704172bed",
        "command": "sudo sh -c \"sync; echo 3 > /proc/sys/vm/drop_caches\"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Clear Cache",
        "x": 390,
        "y": 600,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "8e662cfa4a893ef1",
        "type": "inject",
        "z": "d6d2155704172bed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 640,
        "wires": [
            [
                "f07ca685fb4a4080"
            ]
        ]
    }
]
