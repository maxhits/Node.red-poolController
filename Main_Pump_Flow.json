[
    {
        "id": "eec921f299f35505",
        "type": "tab",
        "label": "Main Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b1476d4d493c883a",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Run Pump",
        "func": "if (msg.payload === 1) {\n    msg.payload = Buffer.from(\"154120518C\", \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 260,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "ab0565353a45f0a1",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Stop Pump",
        "func": "if (msg.payload === 0) {\n    global.set('counterMP',0);\n    await delay(500);\n    return [{ payload:Buffer.from(\"154220517C\",\"hex\")}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 200,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "551b272b5a604b1f",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Variables",
        "func": "if (msg.payload === 1) {\n    global.set('counterMP', 0);\n}\nif (msg.topic === \"MainPumpSP\") {\n    global.set('mainpumpsd', msg.payload);\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\nif (msg.topic === \"PrimePumpSP\") {\n    global.set('primepumpsd', msg.payload);\n}\nif (msg.topic === \"MainPumpHeaterSP\") {\n    global.set('heaterpumpsd', msg.payload);\n}\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 340,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "73bca259cb8c16b9",
        "type": "tcp request",
        "z": "eec921f299f35505",
        "name": "",
        "server": "192.168.100.39",
        "port": "23",
        "out": "sit",
        "ret": "buffer",
        "splitc": " ",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1140,
        "y": 280,
        "wires": [
            [
                "49e2f19cb910415c",
                "f4a719a49190f362",
                "9bfc70496b295092"
            ]
        ]
    },
    {
        "id": "33add2c41c2970b7",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Status",
        "func": "if(msg.payload === 1) {\n    // check pump status\n    msg.payload=Buffer.from(\"15432050EC\",\"hex\");\n    await delay(600);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 40,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "49e2f19cb910415c",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Status",
        "func": "if(msg.payload[1] === 67 && msg.payload[0] === 21) {\n    if(msg.payload[3] === 0) { msg.payload=0 }\n    if(msg.payload[3] === 11) { msg.payload=1}\n    if(msg.payload[3] === 32) { msg.payload=2}\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 340,
        "wires": [
            [
                "2927fbe8a0310aec"
            ]
        ]
    },
    {
        "id": "2718e1e0c9e7f20c",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Speed",
        "func": "if(msg.payload === 1) {\n    // check pump speed\n    msg.payload=Buffer.from(\"15452000003D05\",\"hex\");\n    await delay(700);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 80,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "43211d4ac3eb7fc8",
        "type": "ui_gauge",
        "z": "eec921f299f35505",
        "name": "",
        "group": "96ba6156ddf227ae",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Main Pump Speed",
        "label": "RPM",
        "format": "{{value}}",
        "min": 0,
        "max": "3600",
        "colors": [
            "#ca3838",
            "#ffff00",
            "#00b500"
        ],
        "seg1": "600",
        "seg2": "1800",
        "diff": false,
        "className": "",
        "x": 1350,
        "y": 380,
        "wires": []
    },
    {
        "id": "f4a719a49190f362",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Speed",
        "func": "var buff = Buffer.from(msg.payload);\n\nif(msg.payload[4] === 0 && msg.payload[0] === 21 && buff.length === 9) {\n    var msgOutput = msg.payload[6].toString(16) + msg.payload[5].toString(16);\n    var msgSpeed = parseInt(msgOutput, 16)/4; \n    return [{'payload':msgSpeed},{'payload':buff.length}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 380,
        "wires": [
            [
                "43211d4ac3eb7fc8"
            ],
            []
        ]
    },
    {
        "id": "496789266ceaeeab",
        "type": "inject",
        "z": "eec921f299f35505",
        "name": "Poll Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2.25",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 630,
        "y": 40,
        "wires": [
            [
                "33add2c41c2970b7",
                "2718e1e0c9e7f20c",
                "43d36b99e31ae928"
            ]
        ]
    },
    {
        "id": "200db0e3ae1fcc66",
        "type": "trigger",
        "z": "eec921f299f35505",
        "name": "Keep Alive Pulse",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 410,
        "y": 260,
        "wires": [
            [
                "b1476d4d493c883a",
                "653cb24a711109d8"
            ]
        ]
    },
    {
        "id": "1484636c17e0f109",
        "type": "eztimer",
        "z": "eec921f299f35505",
        "name": "Run Main Pool Pump",
        "debug": false,
        "autoname": "02:00 - 14:00",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "02:00",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "num",
        "onvalue": 1,
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": false,
        "offtype": "2",
        "offtimesun": "dusk",
        "offtimetod": "14:00",
        "offduration": "00:01:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "num",
        "offvalue": 0,
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": false,
        "resend": false,
        "resendInterval": "0s",
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 120,
        "y": 200,
        "wires": [
            [
                "ab0565353a45f0a1",
                "551b272b5a604b1f",
                "200db0e3ae1fcc66"
            ]
        ]
    },
    {
        "id": "2927fbe8a0310aec",
        "type": "ui_led",
        "z": "eec921f299f35505",
        "order": 2,
        "group": "96ba6156ddf227ae",
        "width": 0,
        "height": 0,
        "label": "Main Pump Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ffff00",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 1310,
        "y": 340,
        "wires": []
    },
    {
        "id": "bd40abea2ab33676",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "HOA_Convert",
        "func": "if(msg.payload==='hand'){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload==='auto'){\n    msg.payload = {'suspended':false};\n    msg.payload = { 'action': 'off' };\n    return msg;\n}\nelse{\n    msg.payload = {'suspended':false};\n    msg.payload = {'action':'off'};\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "1484636c17e0f109"
            ]
        ]
    },
    {
        "id": "9782788f893f3ff0",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16-modbus",
        "func": "var CRCMaster = {\n    StringToCheck: \"\",\n    CleanedString: \"\",\n    CRCTableDNP: [],\n    init: function() {\n        this.CRCDNPInit();\n    },\n    CleanString: function(inputType) {\n        if (inputType == \"ASCII\") {\n            this.CleanedString = this.StringToCheck;\n        } else {\n            if (this.StringToCheck.match(/^[0-9A-F \\t]+$/gi) !== null) {\n                this.CleanedString = this._hexStringToString(this.StringToCheck.toUpperCase().replace(/[\\t ]/g, ''));\n            } else {\n                //window.alert(\"String doesn't seem to be a valid Hex input.\");\n                return false;\n            }\n        }\n        return true;\n    },\n    CRCDNPInit: function() {\n        var i, j, crc, c;\n        for (i = 0; i < 256; i++) {\n            crc = 0;\n            c = i;\n            for (j = 0; j < 8; j++) {\n                if ((crc ^ c) & 0x0001) crc = (crc >> 1) ^ 0xA6BC;\n                else crc = crc >> 1;\n                c = c >> 1;\n            }\n            this.CRCTableDNP[i] = crc;\n        }\n    },\n    CRC16Modbus: function() {\n        var crc = 0xFFFF;\n        var str = this.CleanedString;\n        for (var pos = 0; pos < str.length; pos++) {\n            crc ^= str.charCodeAt(pos);\n            for (var i = 8; i !== 0; i--) {\n                if ((crc & 0x0001) !== 0) {\n                    crc >>= 1;\n                    crc ^= 0xA001;\n                } else\n                    crc >>= 1;\n            }\n        }\n        return crc;\n    },\n    _stringToBytes: function(str) {\n        var ch, st, re = [];\n        for (var i = 0; i < str.length; i++) {\n            ch = str.charCodeAt(i); // get char\n            st = []; // set up \"stack\"\n            do {\n                st.push(ch & 0xFF); // push byte to stack\n                ch = ch >> 8; // shift value down by 1 byte\n            }\n            while (ch);\n            // add stack contents to result\n            // done because chars have \"wrong\" endianness\n            re = re.concat(st.reverse());\n        }\n        // return an array of bytes\n        return re;\n    },\n    _hexStringToString: function(inputstr) {\n        var hex = inputstr.toString(); //force conversion\n        var str = '';\n        for (var i = 0; i < hex.length; i += 2)\n            str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n        return str;\n    },\n    Calculate: function(str, inputType) {\n        this.StringToCheck = str;\n        if (this.CleanString(inputType)) {\n            crcinputcrc16modbus=this.CRC16Modbus().toString(16).toUpperCase();\n            crcinputcrc16modbus=crcinputcrc16modbus.substr(2) + crcinputcrc16modbus.substr(0, 2); //swap bytes\n   \n        }\n    }\n};\n\nCRCMaster.init();\n\nvar inputType = \"HEX\";\nvar crcinputcrc16modbus;\nvar crcinput = msg.payload;\n\nCRCMaster.Calculate(crcinput, inputType);\n\nmsg.payload = crcinput + crcinputcrc16modbus;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 500,
        "wires": [
            [
                "551b272b5a604b1f"
            ]
        ]
    },
    {
        "id": "7ffed07792ea384f",
        "type": "ui_numeric",
        "z": "eec921f299f35505",
        "name": "",
        "label": "Main Pump Speed",
        "tooltip": "",
        "group": "7692346a821a947a",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "MainPumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "14122a40fc60c7d3",
                "80352435c1688ede"
            ]
        ]
    },
    {
        "id": "14122a40fc60c7d3",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 500,
        "wires": [
            [
                "9782788f893f3ff0"
            ]
        ]
    },
    {
        "id": "fee2937ab82e9596",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16-modbus",
        "func": "var CRCMaster = {\n    StringToCheck: \"\",\n    CleanedString: \"\",\n    CRCTableDNP: [],\n    init: function() {\n        this.CRCDNPInit();\n    },\n    CleanString: function(inputType) {\n        if (inputType == \"ASCII\") {\n            this.CleanedString = this.StringToCheck;\n        } else {\n            if (this.StringToCheck.match(/^[0-9A-F \\t]+$/gi) !== null) {\n                this.CleanedString = this._hexStringToString(this.StringToCheck.toUpperCase().replace(/[\\t ]/g, ''));\n            } else {\n                //window.alert(\"String doesn't seem to be a valid Hex input.\");\n                return false;\n            }\n        }\n        return true;\n    },\n    CRCDNPInit: function() {\n        var i, j, crc, c;\n        for (i = 0; i < 256; i++) {\n            crc = 0;\n            c = i;\n            for (j = 0; j < 8; j++) {\n                if ((crc ^ c) & 0x0001) crc = (crc >> 1) ^ 0xA6BC;\n                else crc = crc >> 1;\n                c = c >> 1;\n            }\n            this.CRCTableDNP[i] = crc;\n        }\n    },\n    CRC16Modbus: function() {\n        var crc = 0xFFFF;\n        var str = this.CleanedString;\n        for (var pos = 0; pos < str.length; pos++) {\n            crc ^= str.charCodeAt(pos);\n            for (var i = 8; i !== 0; i--) {\n                if ((crc & 0x0001) !== 0) {\n                    crc >>= 1;\n                    crc ^= 0xA001;\n                } else\n                    crc >>= 1;\n            }\n        }\n        return crc;\n    },\n    _stringToBytes: function(str) {\n        var ch, st, re = [];\n        for (var i = 0; i < str.length; i++) {\n            ch = str.charCodeAt(i); // get char\n            st = []; // set up \"stack\"\n            do {\n                st.push(ch & 0xFF); // push byte to stack\n                ch = ch >> 8; // shift value down by 1 byte\n            }\n            while (ch);\n            // add stack contents to result\n            // done because chars have \"wrong\" endianness\n            re = re.concat(st.reverse());\n        }\n        // return an array of bytes\n        return re;\n    },\n    _hexStringToString: function(inputstr) {\n        var hex = inputstr.toString(); //force conversion\n        var str = '';\n        for (var i = 0; i < hex.length; i += 2)\n            str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n        return str;\n    },\n    Calculate: function(str, inputType) {\n        this.StringToCheck = str;\n        if (this.CleanString(inputType)) {\n            crcinputcrc16modbus=this.CRC16Modbus().toString(16).toUpperCase();\n            crcinputcrc16modbus=crcinputcrc16modbus.substr(2) + crcinputcrc16modbus.substr(0, 2); //swap bytes\n   \n        }\n    }\n};\n\nCRCMaster.init();\n\nvar inputType = \"HEX\";\nvar crcinputcrc16modbus;\nvar crcinput = msg.payload;\n\nCRCMaster.Calculate(crcinput, inputType);\n\nmsg.payload = crcinput + crcinputcrc16modbus;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 600,
        "wires": [
            [
                "551b272b5a604b1f"
            ]
        ]
    },
    {
        "id": "bf605c77f42e33d8",
        "type": "ui_numeric",
        "z": "eec921f299f35505",
        "name": "",
        "label": "Prime Pump Speed",
        "tooltip": "",
        "group": "7692346a821a947a",
        "order": 7,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "PrimePumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "2500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "573da8a7d97c15c8",
                "6ecd92d4e80384fe"
            ]
        ]
    },
    {
        "id": "573da8a7d97c15c8",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 600,
        "wires": [
            [
                "fee2937ab82e9596"
            ]
        ]
    },
    {
        "id": "9bfc70496b295092",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Watts",
        "func": "var buff = Buffer.from(msg.payload);\n\nif(msg.payload[4] === 1 && msg.payload[0] === 21 && buff.length === 9) {\n    var msgOutput = msg.payload[6].toString(16) + msg.payload[5].toString(16);\n    var msgSpeed = parseInt(msgOutput, 16) * 240; // Convert Amps to est. Watts\n    msgSpeed = msgSpeed/1000;  //scaling\n    return [{'payload':msgSpeed},{'payload':msgOutput}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 420,
        "wires": [
            [
                "557db108d3b0abaa"
            ],
            []
        ]
    },
    {
        "id": "43d36b99e31ae928",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Amp",
        "func": "if(msg.payload === 1) {\n    // check pump amp's\n    msg.payload=Buffer.from(\"1545200001FCC5\",\"hex\");\n    await delay(800);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 120,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "557db108d3b0abaa",
        "type": "ui_text",
        "z": "eec921f299f35505",
        "group": "96ba6156ddf227ae",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Watt's",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1310,
        "y": 420,
        "wires": []
    },
    {
        "id": "fbdd1ffcffc672ed",
        "type": "ui_multistate_switch",
        "z": "eec921f299f35505",
        "name": "",
        "group": "96ba6156ddf227ae",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "HOA Main Pump",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Auto",
                "value": "auto",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Hand",
                "value": "hand",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "bd40abea2ab33676"
            ]
        ]
    },
    {
        "id": "80352435c1688ede",
        "type": "ui_digital_display",
        "z": "eec921f299f35505",
        "name": "Main Pump RPM Set",
        "group": "7692346a821a947a",
        "order": 2,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 400,
        "y": 440,
        "wires": []
    },
    {
        "id": "6ecd92d4e80384fe",
        "type": "ui_digital_display",
        "z": "eec921f299f35505",
        "name": "Prime RPM Set",
        "group": "7692346a821a947a",
        "order": 8,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 380,
        "y": 540,
        "wires": []
    },
    {
        "id": "df2407ff92c84021",
        "type": "delay",
        "z": "eec921f299f35505",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1140,
        "y": 200,
        "wires": [
            [
                "73bca259cb8c16b9"
            ]
        ]
    },
    {
        "id": "653cb24a711109d8",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Demand",
        "func": "if (global.get('counterMP') < 2) {\n    // push 2850 prime pump\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    global.set('counterMP', global.get('counterMP') + 1);\n    await delay(1500);\n    return msg;\n}\nif (global.get('counterMP') > 24 && global.get('counterMP') < 26) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    global.set('counterMP', global.get('counterMP') + 1);\n    await delay(1500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 300,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "1c13a9ea6fd77d08",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16-modbus",
        "func": "var CRCMaster = {\n    StringToCheck: \"\",\n    CleanedString: \"\",\n    CRCTableDNP: [],\n    init: function() {\n        this.CRCDNPInit();\n    },\n    CleanString: function(inputType) {\n        if (inputType == \"ASCII\") {\n            this.CleanedString = this.StringToCheck;\n        } else {\n            if (this.StringToCheck.match(/^[0-9A-F \\t]+$/gi) !== null) {\n                this.CleanedString = this._hexStringToString(this.StringToCheck.toUpperCase().replace(/[\\t ]/g, ''));\n            } else {\n                //window.alert(\"String doesn't seem to be a valid Hex input.\");\n                return false;\n            }\n        }\n        return true;\n    },\n    CRCDNPInit: function() {\n        var i, j, crc, c;\n        for (i = 0; i < 256; i++) {\n            crc = 0;\n            c = i;\n            for (j = 0; j < 8; j++) {\n                if ((crc ^ c) & 0x0001) crc = (crc >> 1) ^ 0xA6BC;\n                else crc = crc >> 1;\n                c = c >> 1;\n            }\n            this.CRCTableDNP[i] = crc;\n        }\n    },\n    CRC16Modbus: function() {\n        var crc = 0xFFFF;\n        var str = this.CleanedString;\n        for (var pos = 0; pos < str.length; pos++) {\n            crc ^= str.charCodeAt(pos);\n            for (var i = 8; i !== 0; i--) {\n                if ((crc & 0x0001) !== 0) {\n                    crc >>= 1;\n                    crc ^= 0xA001;\n                } else\n                    crc >>= 1;\n            }\n        }\n        return crc;\n    },\n    _stringToBytes: function(str) {\n        var ch, st, re = [];\n        for (var i = 0; i < str.length; i++) {\n            ch = str.charCodeAt(i); // get char\n            st = []; // set up \"stack\"\n            do {\n                st.push(ch & 0xFF); // push byte to stack\n                ch = ch >> 8; // shift value down by 1 byte\n            }\n            while (ch);\n            // add stack contents to result\n            // done because chars have \"wrong\" endianness\n            re = re.concat(st.reverse());\n        }\n        // return an array of bytes\n        return re;\n    },\n    _hexStringToString: function(inputstr) {\n        var hex = inputstr.toString(); //force conversion\n        var str = '';\n        for (var i = 0; i < hex.length; i += 2)\n            str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n        return str;\n    },\n    Calculate: function(str, inputType) {\n        this.StringToCheck = str;\n        if (this.CleanString(inputType)) {\n            crcinputcrc16modbus=this.CRC16Modbus().toString(16).toUpperCase();\n            crcinputcrc16modbus=crcinputcrc16modbus.substr(2) + crcinputcrc16modbus.substr(0, 2); //swap bytes\n   \n        }\n    }\n};\n\nCRCMaster.init();\n\nvar inputType = \"HEX\";\nvar crcinputcrc16modbus;\nvar crcinput = msg.payload;\n\nCRCMaster.Calculate(crcinput, inputType);\n\nmsg.payload = crcinput + crcinputcrc16modbus;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 700,
        "wires": [
            [
                "551b272b5a604b1f"
            ]
        ]
    },
    {
        "id": "045724b12257d2e9",
        "type": "ui_numeric",
        "z": "eec921f299f35505",
        "name": "",
        "label": "Main Pump Heater Speed",
        "tooltip": "",
        "group": "7692346a821a947a",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "MainPumpHeaterSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "fbc8f1231527c978",
                "8c39f1fc41509a6d"
            ]
        ]
    },
    {
        "id": "fbc8f1231527c978",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 700,
        "wires": [
            [
                "1c13a9ea6fd77d08"
            ]
        ]
    },
    {
        "id": "8c39f1fc41509a6d",
        "type": "ui_digital_display",
        "z": "eec921f299f35505",
        "name": "Main Pump Heater RPM Set",
        "group": "7692346a821a947a",
        "order": 4,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 420,
        "y": 640,
        "wires": []
    },
    {
        "id": "72236852128f856c",
        "type": "delay",
        "z": "eec921f299f35505",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 880,
        "y": 880,
        "wires": [
            [
                "73bca259cb8c16b9"
            ]
        ]
    },
    {
        "id": "04242e2acc0575a8",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Stop Pump",
        "func": "if (msg.payload === 0) {\n    global.set('counterMP',0);\n    await delay(500);\n    return [{ payload:Buffer.from(\"154220517C\",\"hex\")}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 880,
        "wires": [
            [
                "72236852128f856c"
            ]
        ]
    },
    {
        "id": "c7baae9812a91893",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Run Pump",
        "func": "if (msg.payload === 1) {\n    msg.payload = Buffer.from(\"154120518C\", \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 920,
        "wires": [
            [
                "72236852128f856c"
            ]
        ]
    },
    {
        "id": "4ecff4bf7f0bb279",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Demand",
        "func": "if (global.get('counterMP') < 2) {\n    // push 2850 prime pump\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    global.set('counterMP', global.get('counterMP') + 1);\n    await delay(1500);\n    return msg;\n}\nif (global.get('counterMP') > 24 && global.get('counterMP') < 26) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('heaterpumpsd'), \"hex\");\n    global.set('counterMP', global.get('counterMP') + 1);\n    await delay(1500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 960,
        "wires": [
            [
                "72236852128f856c"
            ]
        ]
    },
    {
        "id": "a67baf38ca13625b",
        "type": "trigger",
        "z": "eec921f299f35505",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 920,
        "wires": [
            [
                "c7baae9812a91893",
                "4ecff4bf7f0bb279"
            ]
        ]
    },
    {
        "id": "a56b8b17f7d4a21c",
        "type": "comment",
        "z": "eec921f299f35505",
        "name": "Future for Heater/Cooler Pump Run",
        "info": "",
        "x": 440,
        "y": 820,
        "wires": []
    },
    {
        "id": "96ba6156ddf227ae",
        "type": "ui_group",
        "name": "Main Pump",
        "tab": "ca6ac7a4f6a7c932",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7692346a821a947a",
        "type": "ui_group",
        "name": "Pump Set Points",
        "tab": "c5577b4b5680aa1a",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ca6ac7a4f6a7c932",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c5577b4b5680aa1a",
        "type": "ui_tab",
        "name": "Set Points",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    }
]