[
    {
        "id": "eec921f299f35505",
        "type": "tab",
        "label": "Main Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2242e2f628b1ea7d",
        "type": "tab",
        "label": "Waterfall Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d2c68e9ea49e3bd9",
        "type": "tab",
        "label": "Cleaner Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4a0a70f997c94c8e",
        "type": "tab",
        "label": "Lighting Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "13125f291573f180",
        "type": "tab",
        "label": "Freeze Protection",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ca6ac7a4f6a7c932",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4f41f112dbc6f131",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Pool Panel",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "MM/DD/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "96ba6156ddf227ae",
        "type": "ui_group",
        "name": "Main Pump",
        "tab": "ca6ac7a4f6a7c932",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7692346a821a947a",
        "type": "ui_group",
        "name": "Pump Set Points",
        "tab": "c5577b4b5680aa1a",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "48d756b4de93a0b0",
        "type": "ui_group",
        "name": "Waterfall Pump",
        "tab": "ca6ac7a4f6a7c932",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a77680b5e2f83022",
        "type": "ui_group",
        "name": "Aux Equipment",
        "tab": "ca6ac7a4f6a7c932",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c5577b4b5680aa1a",
        "type": "ui_tab",
        "name": "Set Points",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "38e9d493fe60cee2",
        "type": "modbustcp-server",
        "name": "Remote PLC I/O",
        "host": "127.0.0.1",
        "port": "502",
        "unit_id": "1",
        "reconnecttimeout": "2"
    },
    {
        "id": "d254887f7bb0664c",
        "type": "ui_group",
        "name": "Lighting Control",
        "tab": "c5577b4b5680aa1a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "04857c5dd16511db",
        "type": "persist-store",
        "filename": "persistence.json",
        "interval": "60"
    },
    {
        "id": "c7413c7458c9aa60",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "83e3861adaad8246",
        "type": "ui_group",
        "name": "Freeze Protection",
        "tab": "c5577b4b5680aa1a",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b1476d4d493c883a",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Run Pump",
        "func": "if (msg.payload === 1) {\n    msg.payload = Buffer.from(\"154120518C\", \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 440,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "ab0565353a45f0a1",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Stop Pump",
        "func": "if (msg.payload === 0) {\n    await delay(500);\n    return [{ payload:Buffer.from(\"154220517C\",\"hex\")}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "551b272b5a604b1f",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Variables",
        "func": "if (msg.topic === \"MainPumpSP\") {\n    global.set('mainpumpsd', msg.payload);\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\nif (msg.topic === \"PrimePumpSP\") {\n    global.set('primepumpsd', msg.payload);\n}\nif (msg.topic === \"MainPumpHeaterSP\") {\n    global.set('heaterpumpsd', msg.payload);\n}\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 520,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "73bca259cb8c16b9",
        "type": "tcp request",
        "z": "eec921f299f35505",
        "name": "",
        "server": "192.168.100.39",
        "port": "23",
        "out": "sit",
        "ret": "buffer",
        "splitc": " ",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1140,
        "y": 240,
        "wires": [
            [
                "49e2f19cb910415c",
                "f4a719a49190f362",
                "9bfc70496b295092"
            ]
        ]
    },
    {
        "id": "33add2c41c2970b7",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Status",
        "func": "if(msg.payload === 1) {\n    // check pump status\n    msg.payload=Buffer.from(\"15432050EC\",\"hex\");\n    await delay(600);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 60,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "49e2f19cb910415c",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Status",
        "func": "var msg2 = 0;\n\nif(msg.payload[1] === 67 && msg.payload[0] === 21) {\n    if(msg.payload[3] === 0) { msg.payload=0 }\n    if(msg.payload[3] === 11) { msg.payload=1}\n    if(msg.payload[3] === 32) { msg.payload=2}\n\n    if(msg.payload === 1){\n        msg2 = 1;\n    }\n    else {\n        msg2 =0;\n    }\n    return [msg, {'payload':msg2}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 180,
        "wires": [
            [
                "2927fbe8a0310aec"
            ],
            [
                "26bafbc36389233a"
            ]
        ]
    },
    {
        "id": "2718e1e0c9e7f20c",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Speed",
        "func": "if(msg.payload === 1) {\n    // check pump speed\n    msg.payload=Buffer.from(\"15452000003D05\",\"hex\");\n    await delay(700);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 100,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "43211d4ac3eb7fc8",
        "type": "ui_gauge",
        "z": "eec921f299f35505",
        "name": "",
        "group": "96ba6156ddf227ae",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Main Pump Speed",
        "label": "RPM",
        "format": "{{value}}",
        "min": 0,
        "max": "3600",
        "colors": [
            "#ca3838",
            "#ffff00",
            "#00b500"
        ],
        "seg1": "600",
        "seg2": "1800",
        "diff": false,
        "className": "",
        "x": 1390,
        "y": 320,
        "wires": []
    },
    {
        "id": "f4a719a49190f362",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Speed",
        "func": "var buff = Buffer.from(msg.payload);\n\nif(msg.payload[4] === 0 && msg.payload[0] === 21 && buff.length === 9) {\n    var msgOutput = msg.payload[6].toString(16) + msg.payload[5].toString(16);\n    var msgSpeed = parseInt(msgOutput, 16)/4; \n    return [{'payload':msgSpeed},{'payload':buff.length}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 320,
        "wires": [
            [
                "43211d4ac3eb7fc8"
            ],
            []
        ]
    },
    {
        "id": "496789266ceaeeab",
        "type": "inject",
        "z": "eec921f299f35505",
        "name": "Poll Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2.25",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 370,
        "y": 60,
        "wires": [
            [
                "33add2c41c2970b7",
                "2718e1e0c9e7f20c",
                "43d36b99e31ae928"
            ]
        ]
    },
    {
        "id": "200db0e3ae1fcc66",
        "type": "trigger",
        "z": "eec921f299f35505",
        "name": "Keep Alive Pulse",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 440,
        "wires": [
            [
                "b1476d4d493c883a"
            ]
        ]
    },
    {
        "id": "1484636c17e0f109",
        "type": "eztimer",
        "z": "eec921f299f35505",
        "name": "Run Main Pool Pump",
        "debug": false,
        "autoname": "02:00 - 14:00",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "02:00",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "num",
        "onvalue": 1,
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": false,
        "offtype": "2",
        "offtimesun": "dusk",
        "offtimetod": "14:00",
        "offduration": "00:01:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "num",
        "offvalue": 0,
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": false,
        "resend": false,
        "resendInterval": "0s",
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 140,
        "y": 240,
        "wires": [
            [
                "ab0565353a45f0a1",
                "200db0e3ae1fcc66",
                "653cb24a711109d8",
                "8c4257c0485be3eb"
            ]
        ]
    },
    {
        "id": "2927fbe8a0310aec",
        "type": "ui_led",
        "z": "eec921f299f35505",
        "order": 2,
        "group": "96ba6156ddf227ae",
        "width": 0,
        "height": 0,
        "label": "Main Pump Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ffff00",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 1190,
        "y": 120,
        "wires": []
    },
    {
        "id": "bd40abea2ab33676",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "HOA_Convert",
        "func": "if(msg.payload==='hand'){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload==='auto'){\n    msg.payload = {'suspended':false};\n    msg.payload = { 'action': 'off' };\n    return msg;\n}\nelse{\n    msg.payload = {'suspended':false};\n    msg.payload = {'action':'off'};\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "1484636c17e0f109"
            ]
        ]
    },
    {
        "id": "9782788f893f3ff0",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16-modbus",
        "func": "var CRCMaster = {\n    StringToCheck: \"\",\n    CleanedString: \"\",\n    CRCTableDNP: [],\n    init: function() {\n        this.CRCDNPInit();\n    },\n    CleanString: function(inputType) {\n        if (inputType == \"ASCII\") {\n            this.CleanedString = this.StringToCheck;\n        } else {\n            if (this.StringToCheck.match(/^[0-9A-F \\t]+$/gi) !== null) {\n                this.CleanedString = this._hexStringToString(this.StringToCheck.toUpperCase().replace(/[\\t ]/g, ''));\n            } else {\n                //window.alert(\"String doesn't seem to be a valid Hex input.\");\n                return false;\n            }\n        }\n        return true;\n    },\n    CRCDNPInit: function() {\n        var i, j, crc, c;\n        for (i = 0; i < 256; i++) {\n            crc = 0;\n            c = i;\n            for (j = 0; j < 8; j++) {\n                if ((crc ^ c) & 0x0001) crc = (crc >> 1) ^ 0xA6BC;\n                else crc = crc >> 1;\n                c = c >> 1;\n            }\n            this.CRCTableDNP[i] = crc;\n        }\n    },\n    CRC16Modbus: function() {\n        var crc = 0xFFFF;\n        var str = this.CleanedString;\n        for (var pos = 0; pos < str.length; pos++) {\n            crc ^= str.charCodeAt(pos);\n            for (var i = 8; i !== 0; i--) {\n                if ((crc & 0x0001) !== 0) {\n                    crc >>= 1;\n                    crc ^= 0xA001;\n                } else\n                    crc >>= 1;\n            }\n        }\n        return crc;\n    },\n    _stringToBytes: function(str) {\n        var ch, st, re = [];\n        for (var i = 0; i < str.length; i++) {\n            ch = str.charCodeAt(i); // get char\n            st = []; // set up \"stack\"\n            do {\n                st.push(ch & 0xFF); // push byte to stack\n                ch = ch >> 8; // shift value down by 1 byte\n            }\n            while (ch);\n            // add stack contents to result\n            // done because chars have \"wrong\" endianness\n            re = re.concat(st.reverse());\n        }\n        // return an array of bytes\n        return re;\n    },\n    _hexStringToString: function(inputstr) {\n        var hex = inputstr.toString(); //force conversion\n        var str = '';\n        for (var i = 0; i < hex.length; i += 2)\n            str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n        return str;\n    },\n    Calculate: function(str, inputType) {\n        this.StringToCheck = str;\n        if (this.CleanString(inputType)) {\n            crcinputcrc16modbus=this.CRC16Modbus().toString(16).toUpperCase();\n            crcinputcrc16modbus=crcinputcrc16modbus.substr(2) + crcinputcrc16modbus.substr(0, 2); //swap bytes\n   \n        }\n    }\n};\n\nCRCMaster.init();\n\nvar inputType = \"HEX\";\nvar crcinputcrc16modbus;\nvar crcinput = msg.payload;\n\nCRCMaster.Calculate(crcinput, inputType);\n\nmsg.payload = crcinput + crcinputcrc16modbus;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 520,
        "wires": [
            [
                "551b272b5a604b1f"
            ]
        ]
    },
    {
        "id": "7ffed07792ea384f",
        "type": "ui_numeric",
        "z": "eec921f299f35505",
        "name": "",
        "label": "Main Pump Speed",
        "tooltip": "",
        "group": "7692346a821a947a",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "MainPumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "14122a40fc60c7d3",
                "80352435c1688ede"
            ]
        ]
    },
    {
        "id": "14122a40fc60c7d3",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 560,
        "wires": [
            [
                "9782788f893f3ff0"
            ]
        ]
    },
    {
        "id": "fee2937ab82e9596",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16-modbus",
        "func": "var CRCMaster = {\n    StringToCheck: \"\",\n    CleanedString: \"\",\n    CRCTableDNP: [],\n    init: function() {\n        this.CRCDNPInit();\n    },\n    CleanString: function(inputType) {\n        if (inputType == \"ASCII\") {\n            this.CleanedString = this.StringToCheck;\n        } else {\n            if (this.StringToCheck.match(/^[0-9A-F \\t]+$/gi) !== null) {\n                this.CleanedString = this._hexStringToString(this.StringToCheck.toUpperCase().replace(/[\\t ]/g, ''));\n            } else {\n                //window.alert(\"String doesn't seem to be a valid Hex input.\");\n                return false;\n            }\n        }\n        return true;\n    },\n    CRCDNPInit: function() {\n        var i, j, crc, c;\n        for (i = 0; i < 256; i++) {\n            crc = 0;\n            c = i;\n            for (j = 0; j < 8; j++) {\n                if ((crc ^ c) & 0x0001) crc = (crc >> 1) ^ 0xA6BC;\n                else crc = crc >> 1;\n                c = c >> 1;\n            }\n            this.CRCTableDNP[i] = crc;\n        }\n    },\n    CRC16Modbus: function() {\n        var crc = 0xFFFF;\n        var str = this.CleanedString;\n        for (var pos = 0; pos < str.length; pos++) {\n            crc ^= str.charCodeAt(pos);\n            for (var i = 8; i !== 0; i--) {\n                if ((crc & 0x0001) !== 0) {\n                    crc >>= 1;\n                    crc ^= 0xA001;\n                } else\n                    crc >>= 1;\n            }\n        }\n        return crc;\n    },\n    _stringToBytes: function(str) {\n        var ch, st, re = [];\n        for (var i = 0; i < str.length; i++) {\n            ch = str.charCodeAt(i); // get char\n            st = []; // set up \"stack\"\n            do {\n                st.push(ch & 0xFF); // push byte to stack\n                ch = ch >> 8; // shift value down by 1 byte\n            }\n            while (ch);\n            // add stack contents to result\n            // done because chars have \"wrong\" endianness\n            re = re.concat(st.reverse());\n        }\n        // return an array of bytes\n        return re;\n    },\n    _hexStringToString: function(inputstr) {\n        var hex = inputstr.toString(); //force conversion\n        var str = '';\n        for (var i = 0; i < hex.length; i += 2)\n            str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n        return str;\n    },\n    Calculate: function(str, inputType) {\n        this.StringToCheck = str;\n        if (this.CleanString(inputType)) {\n            crcinputcrc16modbus=this.CRC16Modbus().toString(16).toUpperCase();\n            crcinputcrc16modbus=crcinputcrc16modbus.substr(2) + crcinputcrc16modbus.substr(0, 2); //swap bytes\n   \n        }\n    }\n};\n\nCRCMaster.init();\n\nvar inputType = \"HEX\";\nvar crcinputcrc16modbus;\nvar crcinput = msg.payload;\n\nCRCMaster.Calculate(crcinput, inputType);\n\nmsg.payload = crcinput + crcinputcrc16modbus;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 620,
        "wires": [
            [
                "551b272b5a604b1f"
            ]
        ]
    },
    {
        "id": "bf605c77f42e33d8",
        "type": "ui_numeric",
        "z": "eec921f299f35505",
        "name": "",
        "label": "Prime Pump Speed",
        "tooltip": "",
        "group": "7692346a821a947a",
        "order": 7,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "PrimePumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "2500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "573da8a7d97c15c8",
                "6ecd92d4e80384fe"
            ]
        ]
    },
    {
        "id": "573da8a7d97c15c8",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 660,
        "wires": [
            [
                "fee2937ab82e9596"
            ]
        ]
    },
    {
        "id": "9bfc70496b295092",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Watts",
        "func": "var buff = Buffer.from(msg.payload);\n\nif(msg.payload[4] === 1 && msg.payload[0] === 21 && buff.length === 9) {\n    var msgOutput = msg.payload[6].toString(16) + msg.payload[5].toString(16);\n    var msgSpeed = parseInt(msgOutput, 16) * 240; // Convert Amps to est. Watts\n    msgSpeed = msgSpeed/1000;  //scaling\n    return [{'payload':msgSpeed},{'payload':msgOutput}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 360,
        "wires": [
            [
                "557db108d3b0abaa"
            ],
            []
        ]
    },
    {
        "id": "43d36b99e31ae928",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Pump Amp",
        "func": "if(msg.payload === 1) {\n    // check pump amp's\n    msg.payload=Buffer.from(\"1545200001FCC5\",\"hex\");\n    await delay(800);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 140,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "557db108d3b0abaa",
        "type": "ui_text",
        "z": "eec921f299f35505",
        "group": "96ba6156ddf227ae",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Power (watts):",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1380,
        "y": 360,
        "wires": []
    },
    {
        "id": "fbdd1ffcffc672ed",
        "type": "ui_multistate_switch",
        "z": "eec921f299f35505",
        "name": "",
        "group": "96ba6156ddf227ae",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "HOA Main Pump",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Auto",
                "value": "auto",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Hand",
                "value": "hand",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 390,
        "y": 120,
        "wires": [
            [
                "bd40abea2ab33676"
            ]
        ]
    },
    {
        "id": "80352435c1688ede",
        "type": "ui_digital_display",
        "z": "eec921f299f35505",
        "name": "Main Pump RPM Set",
        "group": "7692346a821a947a",
        "order": 2,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 140,
        "y": 520,
        "wires": []
    },
    {
        "id": "6ecd92d4e80384fe",
        "type": "ui_digital_display",
        "z": "eec921f299f35505",
        "name": "Prime RPM Set",
        "group": "7692346a821a947a",
        "order": 8,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 120,
        "y": 620,
        "wires": []
    },
    {
        "id": "df2407ff92c84021",
        "type": "delay",
        "z": "eec921f299f35505",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 860,
        "y": 240,
        "wires": [
            [
                "73bca259cb8c16b9"
            ]
        ]
    },
    {
        "id": "653cb24a711109d8",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Prime Demand",
        "func": "if (msg.payload === 1) {\n    // push prime speed to pump\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(500);\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "df2407ff92c84021"
            ],
            [
                "323677db99a0022e"
            ]
        ]
    },
    {
        "id": "1c13a9ea6fd77d08",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "CRC16-modbus",
        "func": "var CRCMaster = {\n    StringToCheck: \"\",\n    CleanedString: \"\",\n    CRCTableDNP: [],\n    init: function() {\n        this.CRCDNPInit();\n    },\n    CleanString: function(inputType) {\n        if (inputType == \"ASCII\") {\n            this.CleanedString = this.StringToCheck;\n        } else {\n            if (this.StringToCheck.match(/^[0-9A-F \\t]+$/gi) !== null) {\n                this.CleanedString = this._hexStringToString(this.StringToCheck.toUpperCase().replace(/[\\t ]/g, ''));\n            } else {\n                //window.alert(\"String doesn't seem to be a valid Hex input.\");\n                return false;\n            }\n        }\n        return true;\n    },\n    CRCDNPInit: function() {\n        var i, j, crc, c;\n        for (i = 0; i < 256; i++) {\n            crc = 0;\n            c = i;\n            for (j = 0; j < 8; j++) {\n                if ((crc ^ c) & 0x0001) crc = (crc >> 1) ^ 0xA6BC;\n                else crc = crc >> 1;\n                c = c >> 1;\n            }\n            this.CRCTableDNP[i] = crc;\n        }\n    },\n    CRC16Modbus: function() {\n        var crc = 0xFFFF;\n        var str = this.CleanedString;\n        for (var pos = 0; pos < str.length; pos++) {\n            crc ^= str.charCodeAt(pos);\n            for (var i = 8; i !== 0; i--) {\n                if ((crc & 0x0001) !== 0) {\n                    crc >>= 1;\n                    crc ^= 0xA001;\n                } else\n                    crc >>= 1;\n            }\n        }\n        return crc;\n    },\n    _stringToBytes: function(str) {\n        var ch, st, re = [];\n        for (var i = 0; i < str.length; i++) {\n            ch = str.charCodeAt(i); // get char\n            st = []; // set up \"stack\"\n            do {\n                st.push(ch & 0xFF); // push byte to stack\n                ch = ch >> 8; // shift value down by 1 byte\n            }\n            while (ch);\n            // add stack contents to result\n            // done because chars have \"wrong\" endianness\n            re = re.concat(st.reverse());\n        }\n        // return an array of bytes\n        return re;\n    },\n    _hexStringToString: function(inputstr) {\n        var hex = inputstr.toString(); //force conversion\n        var str = '';\n        for (var i = 0; i < hex.length; i += 2)\n            str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n        return str;\n    },\n    Calculate: function(str, inputType) {\n        this.StringToCheck = str;\n        if (this.CleanString(inputType)) {\n            crcinputcrc16modbus=this.CRC16Modbus().toString(16).toUpperCase();\n            crcinputcrc16modbus=crcinputcrc16modbus.substr(2) + crcinputcrc16modbus.substr(0, 2); //swap bytes\n   \n        }\n    }\n};\n\nCRCMaster.init();\n\nvar inputType = \"HEX\";\nvar crcinputcrc16modbus;\nvar crcinput = msg.payload;\n\nCRCMaster.Calculate(crcinput, inputType);\n\nmsg.payload = crcinput + crcinputcrc16modbus;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 720,
        "wires": [
            [
                "551b272b5a604b1f"
            ]
        ]
    },
    {
        "id": "045724b12257d2e9",
        "type": "ui_numeric",
        "z": "eec921f299f35505",
        "name": "",
        "label": "Main Pump Heater Speed",
        "tooltip": "",
        "group": "7692346a821a947a",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "MainPumpHeaterSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1500",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 150,
        "y": 760,
        "wires": [
            [
                "fbc8f1231527c978",
                "8c39f1fc41509a6d"
            ]
        ]
    },
    {
        "id": "fbc8f1231527c978",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 760,
        "wires": [
            [
                "1c13a9ea6fd77d08"
            ]
        ]
    },
    {
        "id": "8c39f1fc41509a6d",
        "type": "ui_digital_display",
        "z": "eec921f299f35505",
        "name": "Main Pump Heater RPM Set",
        "group": "7692346a821a947a",
        "order": 4,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 160,
        "y": 720,
        "wires": []
    },
    {
        "id": "72236852128f856c",
        "type": "delay",
        "z": "eec921f299f35505",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "0.05",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 880,
        "y": 1060,
        "wires": [
            [
                "73bca259cb8c16b9"
            ]
        ]
    },
    {
        "id": "04242e2acc0575a8",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Stop Pump",
        "func": "if (msg.payload === 0) {\n    global.set('counterMP',0);\n    await delay(500);\n    return [{ payload:Buffer.from(\"154220517C\",\"hex\")}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1060,
        "wires": [
            [
                "72236852128f856c"
            ]
        ]
    },
    {
        "id": "c7baae9812a91893",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Run Pump",
        "func": "if (msg.payload === 1) {\n    msg.payload = Buffer.from(\"154120518C\", \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1100,
        "wires": [
            [
                "72236852128f856c"
            ]
        ]
    },
    {
        "id": "4ecff4bf7f0bb279",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Demand",
        "func": "if (global.get('counterMP') < 2) {\n    // push 2850 prime pump\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    global.set('counterMP', global.get('counterMP') + 1);\n    await delay(1500);\n    return msg;\n}\nif (global.get('counterMP') > 24 && global.get('counterMP') < 26) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('heaterpumpsd'), \"hex\");\n    global.set('counterMP', global.get('counterMP') + 1);\n    await delay(1500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1140,
        "wires": [
            [
                "72236852128f856c"
            ]
        ]
    },
    {
        "id": "a67baf38ca13625b",
        "type": "trigger",
        "z": "eec921f299f35505",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 1100,
        "wires": [
            [
                "c7baae9812a91893",
                "4ecff4bf7f0bb279"
            ]
        ]
    },
    {
        "id": "a56b8b17f7d4a21c",
        "type": "comment",
        "z": "eec921f299f35505",
        "name": "Future for Heater/Cooler Pump Run",
        "info": "",
        "x": 440,
        "y": 1000,
        "wires": []
    },
    {
        "id": "323677db99a0022e",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Prime Demand bk",
        "func": "if (msg.payload === 1) {\n    // push prime speed to pump\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 320,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "8c4257c0485be3eb",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Speed Demand",
        "func": "if (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(120000);\n    return [msg, { 'payload': 1 }];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 360,
        "wires": [
            [
                "df2407ff92c84021"
            ],
            [
                "7d584f5c6c0f4568"
            ]
        ]
    },
    {
        "id": "7d584f5c6c0f4568",
        "type": "function",
        "z": "eec921f299f35505",
        "name": "Set Pump Speed Demand bk",
        "func": "if (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 400,
        "wires": [
            [
                "df2407ff92c84021"
            ]
        ]
    },
    {
        "id": "725ac63d1d57c3e0",
        "type": "modbustcp-write",
        "z": "eec921f299f35505",
        "name": "Oxidizer Run CMD",
        "topic": "",
        "dataType": "Coil",
        "adr": "10000",
        "server": "38e9d493fe60cee2",
        "x": 1530,
        "y": 180,
        "wires": []
    },
    {
        "id": "26bafbc36389233a",
        "type": "rbe",
        "z": "eec921f299f35505",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "725ac63d1d57c3e0"
            ]
        ]
    },
    {
        "id": "6d60918a2d1d00c7",
        "type": "link in",
        "z": "eec921f299f35505",
        "name": "link in Cleaner",
        "links": [
            "3c0e65b82291ca59"
        ],
        "x": 205,
        "y": 180,
        "wires": [
            [
                "1484636c17e0f109"
            ]
        ]
    },
    {
        "id": "5ef145ec8dcb0b8a",
        "type": "link in",
        "z": "eec921f299f35505",
        "name": "link in Freeze",
        "links": [
            "919febfe094f2632"
        ],
        "x": 205,
        "y": 320,
        "wires": [
            [
                "1484636c17e0f109"
            ]
        ]
    },
    {
        "id": "3ab6c971f06f442d",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "CRC16-modbus",
        "func": "var CRCMaster = {\n    StringToCheck: \"\",\n    CleanedString: \"\",\n    CRCTableDNP: [],\n    init: function() {\n        this.CRCDNPInit();\n    },\n    CleanString: function(inputType) {\n        if (inputType == \"ASCII\") {\n            this.CleanedString = this.StringToCheck;\n        } else {\n            if (this.StringToCheck.match(/^[0-9A-F \\t]+$/gi) !== null) {\n                this.CleanedString = this._hexStringToString(this.StringToCheck.toUpperCase().replace(/[\\t ]/g, ''));\n            } else {\n                //window.alert(\"String doesn't seem to be a valid Hex input.\");\n                return false;\n            }\n        }\n        return true;\n    },\n    CRCDNPInit: function() {\n        var i, j, crc, c;\n        for (i = 0; i < 256; i++) {\n            crc = 0;\n            c = i;\n            for (j = 0; j < 8; j++) {\n                if ((crc ^ c) & 0x0001) crc = (crc >> 1) ^ 0xA6BC;\n                else crc = crc >> 1;\n                c = c >> 1;\n            }\n            this.CRCTableDNP[i] = crc;\n        }\n    },\n    CRC16Modbus: function() {\n        var crc = 0xFFFF;\n        var str = this.CleanedString;\n        for (var pos = 0; pos < str.length; pos++) {\n            crc ^= str.charCodeAt(pos);\n            for (var i = 8; i !== 0; i--) {\n                if ((crc & 0x0001) !== 0) {\n                    crc >>= 1;\n                    crc ^= 0xA001;\n                } else\n                    crc >>= 1;\n            }\n        }\n        return crc;\n    },\n    _stringToBytes: function(str) {\n        var ch, st, re = [];\n        for (var i = 0; i < str.length; i++) {\n            ch = str.charCodeAt(i); // get char\n            st = []; // set up \"stack\"\n            do {\n                st.push(ch & 0xFF); // push byte to stack\n                ch = ch >> 8; // shift value down by 1 byte\n            }\n            while (ch);\n            // add stack contents to result\n            // done because chars have \"wrong\" endianness\n            re = re.concat(st.reverse());\n        }\n        // return an array of bytes\n        return re;\n    },\n    _hexStringToString: function(inputstr) {\n        var hex = inputstr.toString(); //force conversion\n        var str = '';\n        for (var i = 0; i < hex.length; i += 2)\n            str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n        return str;\n    },\n    Calculate: function(str, inputType) {\n        this.StringToCheck = str;\n        if (this.CleanString(inputType)) {\n            crcinputcrc16modbus=this.CRC16Modbus().toString(16).toUpperCase();\n            crcinputcrc16modbus=crcinputcrc16modbus.substr(2) + crcinputcrc16modbus.substr(0, 2); //swap bytes\n   \n        }\n    }\n};\n\nCRCMaster.init();\n\nvar inputType = \"HEX\";\nvar crcinputcrc16modbus;\nvar crcinput = msg.payload;\n\nCRCMaster.Calculate(crcinput, inputType);\n\nmsg.payload = crcinput + crcinputcrc16modbus;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 580,
        "wires": [
            [
                "73c78aa373f47825"
            ]
        ]
    },
    {
        "id": "c41c5811e0e50c09",
        "type": "ui_numeric",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "label": "Waterfall Pump Speed",
        "tooltip": "",
        "group": "7692346a821a947a",
        "order": 5,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "WFPumpSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "2000",
        "max": "3500",
        "step": "50",
        "className": "",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "6d2bc6d569285dc4",
                "2aa8b8db0686664c"
            ]
        ]
    },
    {
        "id": "6d2bc6d569285dc4",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set_Speed_CMD",
        "func": "var speed = msg.payload;\nspeed = speed * 4;\n\nvar hex = (speed).toString(16);\nvar len = hex.length;\nvar padLen = len + (len % 2);\nvar hexPad = hex.padStart(Math.max(padLen, 4), '0');\nvar pairs = hexPad.match(/../g).reverse().map(p => parseInt(p, 16));\nvar ui8Arr = new Uint8Array(pairs);\n\nvar buffCmd = Buffer.from(\"\\x15\\x44\\x20\\x00\");\nvar buffSP = Buffer.from(ui8Arr);\nvar arrComb = [buffCmd,buffSP];\nvar speedCmd = Buffer.concat(arrComb)\nhex = speedCmd.toString('hex');\n\nmsg.payload = hex;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "3ab6c971f06f442d"
            ]
        ]
    },
    {
        "id": "aa3f020438125ffe",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Run Pump",
        "func": "if (msg.payload === 1) {\n    // run pump command\n    msg.payload = Buffer.from(\"154120518C\", \"hex\");\n    await delay(500);\n    return msg;\n}\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 520,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "c706727fc5e07d59",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Stop Pump",
        "func": "await delay(500);\n\nif (msg.payload === 0) {\n    global.set('counterWFP',0);\n    return [{ payload:Buffer.from(\"154220517C\",\"hex\")}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 260,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "dca8bf402e9e9a2e",
        "type": "tcp request",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "server": "192.168.100.25",
        "port": "3001",
        "out": "time",
        "ret": "buffer",
        "splitc": "0",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1130,
        "y": 260,
        "wires": [
            [
                "f28f7690adbe26bd",
                "41575a147acbb583",
                "64146a262769c5e8"
            ]
        ]
    },
    {
        "id": "b1350cfc78c50eee",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Status",
        "func": "if(msg.payload === 1) {\n    // check pump status\n    msg.payload=Buffer.from(\"15432050EC\",\"hex\");\n    await delay(600);\n    return msg;\n}\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 100,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "f28f7690adbe26bd",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Status",
        "func": "if(msg.payload[1] === 67 && msg.payload[0] === 21) {\n    if(msg.payload[3] === 0) { msg.payload=0 }\n    if(msg.payload[3] === 11) { msg.payload=1}\n    if(msg.payload[3] === 32) { msg.payload=2}\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 380,
        "wires": [
            [
                "d265227f7ce05653"
            ]
        ]
    },
    {
        "id": "063ad6f1a3fbc839",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Speed",
        "func": "if(msg.payload === 1) {\n    // check pump rpm\n    msg.payload=Buffer.from(\"15452000003D05\",\"hex\");\n    await delay(700);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 140,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "7f2e0bdaf085ca0e",
        "type": "ui_gauge",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "group": "48d756b4de93a0b0",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Waterfall Pump Speed",
        "label": "RPM",
        "format": "{{value}}",
        "min": 0,
        "max": "3600",
        "colors": [
            "#ca3838",
            "#ffff00",
            "#00b500"
        ],
        "seg1": "600",
        "seg2": "1800",
        "diff": false,
        "className": "",
        "x": 1100,
        "y": 420,
        "wires": []
    },
    {
        "id": "41575a147acbb583",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Speed",
        "func": "if(msg.payload[4] === 0 && msg.payload[0] === 21) {\n    var msgOutput = msg.payload[6].toString(16) + msg.payload[5].toString(16);\n    var msgSpeed = parseInt(msgOutput, 16)/4;\n    return [{'payload':msgSpeed},{'payload':msgOutput}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 420,
        "wires": [
            [
                "7f2e0bdaf085ca0e"
            ],
            []
        ]
    },
    {
        "id": "ffc82838237a2856",
        "type": "inject",
        "z": "2242e2f628b1ea7d",
        "name": "Poll Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "18000",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "b1350cfc78c50eee",
                "063ad6f1a3fbc839",
                "4e0c59f08b380c9d"
            ]
        ]
    },
    {
        "id": "f9b343e0b7e286a6",
        "type": "trigger",
        "z": "2242e2f628b1ea7d",
        "name": "Keep Alive Pulse",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 410,
        "y": 520,
        "wires": [
            [
                "aa3f020438125ffe"
            ]
        ]
    },
    {
        "id": "e77263115e1ca086",
        "type": "eztimer",
        "z": "2242e2f628b1ea7d",
        "name": "Run Waterfall Pool Pump",
        "debug": false,
        "autoname": "12:30 - 13:30",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "12:30",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "num",
        "onvalue": 1,
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": false,
        "offtype": "2",
        "offtimesun": "dusk",
        "offtimetod": "13:30",
        "offduration": "00:01:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "num",
        "offvalue": 0,
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": false,
        "resend": false,
        "resendInterval": "0s",
        "mon": false,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": true,
        "sun": true,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "c706727fc5e07d59",
                "f9b343e0b7e286a6",
                "9c44f69ffc362448",
                "9af0e6f27a535a27"
            ]
        ]
    },
    {
        "id": "d265227f7ce05653",
        "type": "ui_led",
        "z": "2242e2f628b1ea7d",
        "order": 2,
        "group": "48d756b4de93a0b0",
        "width": 0,
        "height": 0,
        "label": "Waterfall Pump Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ffff00",
                "value": "2",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "",
        "x": 1050,
        "y": 380,
        "wires": []
    },
    {
        "id": "12e9a83fdd105b4b",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "HOA_Convert",
        "func": "if(msg.payload==='hand'){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload==='auto'){\n    msg.payload = {'suspended':false};\n    msg.payload = { 'action': 'off' };\n    return msg;\n}\nelse{\n    msg.payload = {'suspended':false};\n    msg.payload = {'action':'off'};\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            [
                "e77263115e1ca086"
            ]
        ]
    },
    {
        "id": "73c78aa373f47825",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set Variables",
        "func": "if (msg.topic === \"WFPumpSP\") {\n    global.set('wfpumpsd', msg.payload);\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('wfpumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 580,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "4e0c59f08b380c9d",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Amp",
        "func": "if(msg.payload === 1) {\n    // check pump amp's\n    msg.payload=Buffer.from(\"1545200001FCC5\",\"hex\");\n    await delay(800);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 180,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "64146a262769c5e8",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Pump Watts",
        "func": "if(msg.payload[4] === 1 && msg.payload[0] === 21) {\n    var msgOutput = msg.payload[6].toString(16) + msg.payload[5].toString(16);\n    var msgSpeed = parseInt(msgOutput, 16) * 240; // Convert Amps to est. Watts\n    msgSpeed = msgSpeed/1000;  //scaling\n    return [{'payload':msgSpeed},{'payload':msgOutput}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 460,
        "wires": [
            [
                "28951a2641a3ef89"
            ],
            []
        ]
    },
    {
        "id": "28951a2641a3ef89",
        "type": "ui_text",
        "z": "2242e2f628b1ea7d",
        "group": "48d756b4de93a0b0",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Power (watts):",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1080,
        "y": 460,
        "wires": []
    },
    {
        "id": "876f1aa51d257d52",
        "type": "trigger",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "num",
        "op2type": "num",
        "duration": "4",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 110,
        "y": 40,
        "wires": [
            [
                "de5be01573cf307a"
            ]
        ]
    },
    {
        "id": "54457a0a23170106",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Delay Shutoff Timer",
        "func": "if (msg.payload === 'hand') {\n    msg.payload = 1;\n    return msg;\n}\nelse if (msg.payload === 'auto') {\n    msg.payload = 0;\n    return msg;\n}\nelse {\n    msg.payload = 0;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 40,
        "wires": [
            [
                "876f1aa51d257d52"
            ]
        ]
    },
    {
        "id": "de5be01573cf307a",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "HOA Reset",
        "func": "if(msg.payload===1){\n    msg.payload = 'auto';\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 100,
        "wires": [
            [
                "38f7771f2fded410"
            ]
        ]
    },
    {
        "id": "38f7771f2fded410",
        "type": "ui_multistate_switch",
        "z": "2242e2f628b1ea7d",
        "name": "",
        "group": "48d756b4de93a0b0",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "HOA Waterfall Pump",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Auto",
                "value": "auto",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Hand",
                "value": "hand",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "12e9a83fdd105b4b",
                "54457a0a23170106"
            ]
        ]
    },
    {
        "id": "2aa8b8db0686664c",
        "type": "ui_digital_display",
        "z": "2242e2f628b1ea7d",
        "name": "Waterfall RPM Set",
        "group": "7692346a821a947a",
        "order": 6,
        "width": 0,
        "height": 0,
        "digits": "4",
        "decimals": "0",
        "x": 130,
        "y": 580,
        "wires": []
    },
    {
        "id": "9c44f69ffc362448",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set Pump Prime Demand",
        "func": "if (msg.payload === 1) {\n    // push prime pump speed\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(500);\n    return [msg,{'payload':1}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 320,
        "wires": [
            [
                "11ef37aa9891664a"
            ],
            [
                "62a7d15ddce3a3f1"
            ]
        ]
    },
    {
        "id": "11ef37aa9891664a",
        "type": "delay",
        "z": "2242e2f628b1ea7d",
        "name": "Message Buffer 50ms",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.05",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 860,
        "y": 260,
        "wires": [
            [
                "dca8bf402e9e9a2e"
            ]
        ]
    },
    {
        "id": "62a7d15ddce3a3f1",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set Pump Prime Demand bk",
        "func": "if (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('primepumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 360,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "9af0e6f27a535a27",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set Pump Speed Demand",
        "func": "if (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(120000);\n    return [msg,{'payload':1}];\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 400,
        "wires": [
            [
                "11ef37aa9891664a"
            ],
            [
                "a41afc295c83c397"
            ]
        ]
    },
    {
        "id": "a41afc295c83c397",
        "type": "function",
        "z": "2242e2f628b1ea7d",
        "name": "Set Pump Prime Demand bk",
        "func": "if (msg.payload === 1) {\n    // push main pump run speed\n    msg.payload = Buffer.from(global.get('mainpumpsd'), \"hex\");\n    await delay(500);\n    return msg;\n}\n\nasync function delay(timeMs) {\n    await new Promise(resolve => setTimeout(resolve, timeMs));\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 440,
        "wires": [
            [
                "11ef37aa9891664a"
            ]
        ]
    },
    {
        "id": "615470b8aeecb54b",
        "type": "link in",
        "z": "2242e2f628b1ea7d",
        "name": "link in Freeze",
        "links": [
            "919febfe094f2632"
        ],
        "x": 215,
        "y": 340,
        "wires": [
            [
                "e77263115e1ca086"
            ]
        ]
    },
    {
        "id": "8a74c2f770ea35e4",
        "type": "eztimer",
        "z": "d2c68e9ea49e3bd9",
        "name": "Run Cleaner Pool Pump",
        "debug": false,
        "autoname": "03:00 - 12:00",
        "tag": "eztimer",
        "topic": "",
        "suspended": false,
        "sendEventsOnSuspend": false,
        "latLongSource": "manual",
        "latLongHaZone": "zone.home",
        "lat": "",
        "lon": "",
        "timerType": "1",
        "startupMessage": true,
        "ontype": "2",
        "ontimesun": "dawn",
        "ontimetod": "03:00",
        "onpropertytype": "msg",
        "onproperty": "payload",
        "onvaluetype": "num",
        "onvalue": 1,
        "onoffset": 0,
        "onrandomoffset": 0,
        "onsuppressrepeats": false,
        "offtype": "2",
        "offtimesun": "dusk",
        "offtimetod": "12:00",
        "offduration": "00:01:00",
        "offpropertytype": "msg",
        "offproperty": "payload",
        "offvaluetype": "num",
        "offvalue": 0,
        "offoffset": 0,
        "offrandomoffset": 0,
        "offsuppressrepeats": false,
        "resend": false,
        "resendInterval": "0s",
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "befa64548d838c45",
                "0b65f27a769b9b61"
            ]
        ]
    },
    {
        "id": "ef43362f770f0554",
        "type": "ui_multistate_switch",
        "z": "d2c68e9ea49e3bd9",
        "name": "",
        "group": "a77680b5e2f83022",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "HOA Cleaner Pump",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Auto",
                "value": "auto",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Hand",
                "value": "hand",
                "valueType": "str",
                "color": "#ff6666"
            }
        ],
        "topic": "",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "e246f39b6238ecbf"
            ]
        ]
    },
    {
        "id": "e246f39b6238ecbf",
        "type": "function",
        "z": "d2c68e9ea49e3bd9",
        "name": "HOA_Convert",
        "func": "if(msg.payload==='hand'){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\nelse if(msg.payload==='auto'){\n    msg.payload = {'suspended':false};\n    return msg;\n}\nelse{\n    msg.payload = {'suspended':false};\n    msg.payload = {'action':'off'};\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 60,
        "wires": [
            [
                "8a74c2f770ea35e4"
            ]
        ]
    },
    {
        "id": "befa64548d838c45",
        "type": "modbustcp-write",
        "z": "d2c68e9ea49e3bd9",
        "name": "Cleaner Run/Stop CMD",
        "topic": "",
        "dataType": "Coil",
        "adr": "10001",
        "server": "38e9d493fe60cee2",
        "x": 790,
        "y": 120,
        "wires": []
    },
    {
        "id": "3c0e65b82291ca59",
        "type": "link out",
        "z": "d2c68e9ea49e3bd9",
        "name": "link out Cleaner",
        "mode": "link",
        "links": [
            "6d60918a2d1d00c7"
        ],
        "x": 575,
        "y": 180,
        "wires": []
    },
    {
        "id": "0b65f27a769b9b61",
        "type": "function",
        "z": "d2c68e9ea49e3bd9",
        "name": "Main Pump Run",
        "func": "if(msg.payload === 1){\n    msg.payload = {'suspended':true};\n    msg.payload = {'action':'on'};\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "3c0e65b82291ca59"
            ]
        ]
    },
    {
        "id": "9cf92e95f8fa1cab",
        "type": "modbustcp-read",
        "z": "d2c68e9ea49e3bd9",
        "name": "Read PLC I/O",
        "topic": "",
        "dataType": "Coil",
        "adr": "10000",
        "quantity": "4",
        "rate": "2",
        "rateUnit": "s",
        "server": "38e9d493fe60cee2",
        "ieeeType": "off",
        "ieeeBE": true,
        "x": 120,
        "y": 300,
        "wires": [
            [
                "af7eb88927da048a"
            ]
        ]
    },
    {
        "id": "af7eb88927da048a",
        "type": "function",
        "z": "d2c68e9ea49e3bd9",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 340,
        "wires": [
            [
                "e8e5f666e8b91f3a"
            ],
            [
                "1fbeeef41e929801"
            ],
            [],
            []
        ]
    },
    {
        "id": "e8e5f666e8b91f3a",
        "type": "ui_led",
        "z": "d2c68e9ea49e3bd9",
        "order": 2,
        "group": "a77680b5e2f83022",
        "width": 0,
        "height": 0,
        "label": "Oxidizer Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 590,
        "y": 320,
        "wires": []
    },
    {
        "id": "1fbeeef41e929801",
        "type": "ui_led",
        "z": "d2c68e9ea49e3bd9",
        "order": 3,
        "group": "a77680b5e2f83022",
        "width": 0,
        "height": 0,
        "label": "Pool Cleaner Run Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 590,
        "y": 360,
        "wires": []
    },
    {
        "id": "3ccee3b8c2f18719",
        "type": "link in",
        "z": "d2c68e9ea49e3bd9",
        "name": "link in Freeze",
        "links": [
            "919febfe094f2632"
        ],
        "x": 225,
        "y": 180,
        "wires": [
            [
                "8a74c2f770ea35e4"
            ]
        ]
    },
    {
        "id": "bf13e4ed1d796137",
        "type": "ui_dropdown",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "1",
        "group": "d254887f7bb0664c",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Alpine White",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Sky Blue",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Cobalt Blue",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Caribbean Blue",
                "value": 4,
                "type": "num"
            },
            {
                "label": "Spring Green",
                "value": 5,
                "type": "num"
            },
            {
                "label": "Emerald Green",
                "value": 6,
                "type": "num"
            },
            {
                "label": "Emerald Rose",
                "value": 7,
                "type": "num"
            },
            {
                "label": "Magenta",
                "value": 8,
                "type": "num"
            },
            {
                "label": "Violet",
                "value": 9,
                "type": "num"
            },
            {
                "label": "Slow Color Splash",
                "value": 10,
                "type": "num"
            },
            {
                "label": "Fast Color Splash",
                "value": 11,
                "type": "num"
            },
            {
                "label": "USA",
                "value": 12,
                "type": "num"
            },
            {
                "label": "Fat Tuesday",
                "value": 13,
                "type": "num"
            },
            {
                "label": "Disco Tech",
                "value": 14,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "dropdown",
        "topicType": "msg",
        "className": "",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "b7e0ab1b05707018",
                "2147bddeb1f24415",
                "dacbdf04ec39addb",
                "723ed6891105215e"
            ]
        ]
    },
    {
        "id": "07e24069e43dd42f",
        "type": "function",
        "z": "4a0a70f997c94c8e",
        "name": "Calculate Light Pulses",
        "func": "var counter = 0;\nvar numMaxPulse = 14;\n\nif(msg.payload[0] > msg.payload[1]){\n    counter = msg.payload[0] - msg.payload[1];\n}\nif(msg.payload[0] < msg.payload[1]){\n    counter = numMaxPulse - msg.payload[1];\n    counter = counter + msg.payload[0];\n}\nreturn [{'payload':counter}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "741833ea.8be7cc"
            ]
        ]
    },
    {
        "id": "2147bddeb1f24415",
        "type": "persist out",
        "z": "4a0a70f997c94c8e",
        "name": "LightStatus",
        "storageNode": "04857c5dd16511db",
        "x": 290,
        "y": 180,
        "wires": [
            [
                "7a8d1ff563d4b60b"
            ]
        ]
    },
    {
        "id": "dacbdf04ec39addb",
        "type": "persist in",
        "z": "4a0a70f997c94c8e",
        "name": "LightStatus",
        "storageNode": "04857c5dd16511db",
        "x": 290,
        "y": 260,
        "wires": []
    },
    {
        "id": "b7e0ab1b05707018",
        "type": "join",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 490,
        "y": 140,
        "wires": [
            [
                "07e24069e43dd42f"
            ]
        ]
    },
    {
        "id": "7a8d1ff563d4b60b",
        "type": "delay",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 220,
        "wires": [
            [
                "b7e0ab1b05707018",
                "07d90ac4f924424d"
            ]
        ]
    },
    {
        "id": "741833ea.8be7cc",
        "type": "function",
        "z": "4a0a70f997c94c8e",
        "name": "BLINK n Times",
        "func": "\nvar o = false;\nfor (var i=0; i<(msg.payload*2); i++) {\n    node.send( {payload:+(o=!o)} )\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 200,
        "wires": [
            [
                "c79ca805.386358"
            ]
        ]
    },
    {
        "id": "c79ca805.386358",
        "type": "delay",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 200,
        "wires": [
            [
                "69b1b97a0c778f8a"
            ]
        ]
    },
    {
        "id": "69b1b97a0c778f8a",
        "type": "modbus-write",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "10002",
        "quantity": "1",
        "server": "c7413c7458c9aa60",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1140,
        "y": 200,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a1b439156cefc86e",
        "type": "ui_button",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "group": "d254887f7bb0664c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Turn Lights On",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 940,
        "y": 260,
        "wires": [
            [
                "5238f2066e05122c"
            ]
        ]
    },
    {
        "id": "fea2b2695987f73e",
        "type": "modbus-write",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "10002",
        "quantity": "1",
        "server": "c7413c7458c9aa60",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 360,
        "wires": [
            [
                "da16d0d894280166"
            ],
            []
        ]
    },
    {
        "id": "5238f2066e05122c",
        "type": "delay",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1140,
        "y": 300,
        "wires": [
            [
                "fea2b2695987f73e"
            ]
        ]
    },
    {
        "id": "da16d0d894280166",
        "type": "debug",
        "z": "4a0a70f997c94c8e",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1140,
        "y": 360,
        "wires": []
    },
    {
        "id": "4293afec24bcb560",
        "type": "ui_button",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "group": "d254887f7bb0664c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Turn Lights Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 940,
        "y": 300,
        "wires": [
            [
                "5238f2066e05122c"
            ]
        ]
    },
    {
        "id": "07d90ac4f924424d",
        "type": "delay",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "pauseType": "delay",
        "timeout": "28",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 260,
        "wires": [
            [
                "a1b439156cefc86e"
            ]
        ]
    },
    {
        "id": "c5b04a9aaad46a1a",
        "type": "modbustcp-read",
        "z": "4a0a70f997c94c8e",
        "name": "Read PLC I/O",
        "topic": "",
        "dataType": "Coil",
        "adr": "10000",
        "quantity": "4",
        "rate": "2",
        "rateUnit": "s",
        "server": "38e9d493fe60cee2",
        "ieeeType": "off",
        "ieeeBE": true,
        "x": 120,
        "y": 400,
        "wires": [
            [
                "938891f9bd890add",
                "7cfab5f8f714e49e"
            ]
        ]
    },
    {
        "id": "938891f9bd890add",
        "type": "trigger",
        "z": "4a0a70f997c94c8e",
        "name": "",
        "op1": "0",
        "op2": "1",
        "op1type": "num",
        "op2type": "num",
        "duration": "4",
        "extend": false,
        "overrideDelay": false,
        "units": "hr",
        "reset": "0",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 370,
        "y": 400,
        "wires": [
            [
                "4293afec24bcb560"
            ]
        ]
    },
    {
        "id": "f7f78802b827da04",
        "type": "comment",
        "z": "4a0a70f997c94c8e",
        "name": "Shut off Lights if on Longer than 4 hours",
        "info": "",
        "x": 200,
        "y": 360,
        "wires": []
    },
    {
        "id": "7cfab5f8f714e49e",
        "type": "ui_led",
        "z": "4a0a70f997c94c8e",
        "order": 1,
        "group": "d254887f7bb0664c",
        "width": 0,
        "height": 0,
        "label": "Lights On/Off Status",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "0",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 370,
        "y": 460,
        "wires": []
    },
    {
        "id": "723ed6891105215e",
        "type": "ui_led",
        "z": "4a0a70f997c94c8e",
        "order": 1,
        "group": "d254887f7bb0664c",
        "width": 0,
        "height": 0,
        "label": "Light Color Selected",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#fffee9",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#1799e7",
                "value": "2",
                "valueType": "num"
            },
            {
                "color": "#0047ab",
                "value": "3",
                "valueType": "num"
            },
            {
                "color": "#4c9bb0",
                "value": "4",
                "valueType": "num"
            },
            {
                "color": "#00ff7f",
                "value": "5",
                "valueType": "num"
            },
            {
                "color": "#5fbb9c",
                "value": "6",
                "valueType": "num"
            },
            {
                "color": "#50c878",
                "value": "7",
                "valueType": "num"
            },
            {
                "color": "#ff00ff",
                "value": "8",
                "valueType": "num"
            },
            {
                "color": "#000000",
                "value": "9",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "10",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "11",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "12",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "13",
                "valueType": "num"
            },
            {
                "color": "#ffff80",
                "value": "14",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 270,
        "y": 80,
        "wires": []
    },
    {
        "id": "226c3b56a2f19979",
        "type": "modbus-read",
        "z": "13125f291573f180",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "40000",
        "quantity": "4",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "c7413c7458c9aa60",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 60,
        "wires": [
            [
                "be5e6a897a41ecb2"
            ],
            []
        ]
    },
    {
        "id": "177855e6ea2e81fd",
        "type": "function",
        "z": "13125f291573f180",
        "name": "Set Variables",
        "func": "if (msg.topic === \"FreezeSP\") {\n    global.set('freeze', msg.payload);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "fa2bcc65f1745358",
        "type": "ui_numeric",
        "z": "13125f291573f180",
        "name": "",
        "label": "Freeze Protection Set Point",
        "tooltip": "",
        "group": "83e3861adaad8246",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "FreezeSP",
        "topicType": "str",
        "format": "{{value}}",
        "min": "33",
        "max": "40",
        "step": "1",
        "className": "",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "e35f568f97aecc0b",
                "177855e6ea2e81fd"
            ]
        ]
    },
    {
        "id": "be5e6a897a41ecb2",
        "type": "function",
        "z": "13125f291573f180",
        "name": "Check Temp for Freeze",
        "func": "var currentTemp = msg.payload;\n\nif(currentTemp < global.get('freeze')){\n    return [{'payload':1}];\n} \nelse {\n    return [{'payload':0}];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 60,
        "wires": [
            [
                "dfd8251fa8c435ec"
            ]
        ]
    },
    {
        "id": "e35f568f97aecc0b",
        "type": "ui_digital_display",
        "z": "13125f291573f180",
        "name": "Freeze Set Point",
        "group": "83e3861adaad8246",
        "order": 1,
        "width": 0,
        "height": 0,
        "digits": "2",
        "decimals": "0",
        "x": 150,
        "y": 120,
        "wires": []
    },
    {
        "id": "dfd8251fa8c435ec",
        "type": "function",
        "z": "13125f291573f180",
        "name": "Run All Pumps",
        "func": "if (msg.payload === 1) {\n    msg.payload = { 'suspended': true };\n    msg.payload = { 'action': 'on' };\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 60,
        "wires": [
            [
                "919febfe094f2632"
            ]
        ]
    },
    {
        "id": "919febfe094f2632",
        "type": "link out",
        "z": "13125f291573f180",
        "name": "link out Freeze",
        "mode": "link",
        "links": [
            "3ccee3b8c2f18719",
            "615470b8aeecb54b",
            "5ef145ec8dcb0b8a"
        ],
        "x": 925,
        "y": 60,
        "wires": []
    }
]